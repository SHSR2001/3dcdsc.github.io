{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Us \u00b6 Digital Design & Development Club (3DC) is an official Fifth-Row club affiliated with ISTD Pillar at SUTD . We are also a Developer Student Club (DSC) supported by Google and a member of the OpenNodes Campus Collective . Stay Connected with Us \u00b6 \u2013 3DC Family \u2013 SUTD 3DC \u2013 @sutd3dc \u2013 www.twitch.tv/3dcdsc \u2013 github.com/3DCdsc Collaboration with Google \u00b6 Developer Student Clubs are university based community groups for students interested in Google developer technologies. Students from all undergraduate or graduate programs with an interest in growing as a developer are welcome. By joining a DSC, students grow their knowledge in a peer-to-peer learning environment and build solutions for local businesses and their community. In short, DSC is a worldwide community supported by Google. Our 3DC DSC at SUTD is proud to be a part of this community. We are seeking to empower students in their journey of undergraduate/graduate education. By joining our DSC, students will be able to build up their professional and personal skills, get access to Google Developer resources, and work together to build solutions for local problems in a peer-to-peer learning environment. Disclaimer: DSC@SUTD is an independent group; the activities and opinions expressed by the group should in no way be linked to Google, the corporation. Collaboration with OpenNodes \u00b6 OpenNodes is an initiative started by Tribe and IMDA Singapore, and is supported by more than 30 leading global corporations and government agencies with 3DC running SUTD\u2019s branch of OpenNodes. The aim is to foster greater collaboration between various stakeholders within the tech ecosystem. OpenNodes Campus Collective is an extension of these efforts, and will be the first time students from various universities across Singapore will be brought together for career opportunities and education resources. OpenNodes connects students with projects from companies like IBM and WeBank to give students industry exposure. It will also be pushing out educational workshops for students to learn technical and consulting skills. For more information on ongoing projects and news, please visit this website Collaboration with ISTD \u00b6 We work closely with ISTD Pillar at SUTD and organise events in collaboration with ISTD at Intelligence, Innovation and Interconnection (i3) Lab (1.605). Meet The Team \u00b6 3DC Core Team Members Join 3DC as a Member","title":"Home"},{"location":"#about-us","text":"Digital Design & Development Club (3DC) is an official Fifth-Row club affiliated with ISTD Pillar at SUTD . We are also a Developer Student Club (DSC) supported by Google and a member of the OpenNodes Campus Collective .","title":"About Us"},{"location":"#stay-connected-with-us","text":"\u2013 3DC Family \u2013 SUTD 3DC \u2013 @sutd3dc \u2013 www.twitch.tv/3dcdsc \u2013 github.com/3DCdsc","title":"Stay Connected with Us"},{"location":"#collaboration-with-google","text":"Developer Student Clubs are university based community groups for students interested in Google developer technologies. Students from all undergraduate or graduate programs with an interest in growing as a developer are welcome. By joining a DSC, students grow their knowledge in a peer-to-peer learning environment and build solutions for local businesses and their community. In short, DSC is a worldwide community supported by Google. Our 3DC DSC at SUTD is proud to be a part of this community. We are seeking to empower students in their journey of undergraduate/graduate education. By joining our DSC, students will be able to build up their professional and personal skills, get access to Google Developer resources, and work together to build solutions for local problems in a peer-to-peer learning environment. Disclaimer: DSC@SUTD is an independent group; the activities and opinions expressed by the group should in no way be linked to Google, the corporation.","title":"Collaboration with Google"},{"location":"#collaboration-with-opennodes","text":"OpenNodes is an initiative started by Tribe and IMDA Singapore, and is supported by more than 30 leading global corporations and government agencies with 3DC running SUTD\u2019s branch of OpenNodes. The aim is to foster greater collaboration between various stakeholders within the tech ecosystem. OpenNodes Campus Collective is an extension of these efforts, and will be the first time students from various universities across Singapore will be brought together for career opportunities and education resources. OpenNodes connects students with projects from companies like IBM and WeBank to give students industry exposure. It will also be pushing out educational workshops for students to learn technical and consulting skills. For more information on ongoing projects and news, please visit this website","title":"Collaboration with OpenNodes"},{"location":"#collaboration-with-istd","text":"We work closely with ISTD Pillar at SUTD and organise events in collaboration with ISTD at Intelligence, Innovation and Interconnection (i3) Lab (1.605).","title":"Collaboration with ISTD"},{"location":"#meet-the-team","text":"3DC Core Team Members Join 3DC as a Member","title":"Meet The Team"},{"location":"3dc_membership/","text":"How to Become a 3DC Member \u00b6 Last Updated Valid Until 23 Sep 2020 01 Jan 2021 Why Join 3DC? \u00b6 Everyone can participate in 3DC-organised events with or without being a member of 3DC, we also extend our events to other local universities from time to time. We are an open community. However, we do have 3 groups of people within our 3DC Family. Non-members - You can participate in 3DC events freely, no commitments, but also no Fifth-Row record. 3DC Members - You can participate in 3DC events based on your preference, get more involved in projects/ workshops/ Hackathons. You will get the official Fifth-Row records on your Fifth-Row transcript. 3DC Core Team - We organize events, we host Hackathons, we build communities and everything behind the scene. You will get leadership experience and strong records on your Fifth-Row records and your R\u00e9sum\u00e9. The rest of the page tells you how to become a 3DC Members . If you are interested to join 3DC Core Team , please also check this out. 3 Pathways to Gain Membership \u00b6 You can choose one of the following 3 pathways to become a 3DC member. (ps: The requirements are not that hard to achieve, and you can definitely make it if you keen to!) Project Workshop Hackthon Pathway 1: Do a Project with 3DC \u00b6 Doing practical software projects is the best way to learn programming, software development, and computer science. We encourage you to do a software development projects with 3DC, that means you get unlimited support from the 3DC community; we will assign you a mentor from our core team to guide you along the way; You get to showcase your finished project on 3DC's website, get exposures and opportunities. What kind of \"project\" can I do? \u00b6 Don't be afraid, this \"project\" can be anything at any scale, we just want to encourage you to learn with the community. These projects can be: Self-Initiated (Come up with your own idea.) Mentor-Suggested (You can ask for ideas if you can't think of any.) School-proposed (Sometimes you can work with the school to serve real-world needs by building applications.) Pathway 2: Organise a Workshop with 3DC \u00b6 If you have passion about certain technical topics that you wanna share it with your peers, or if you are passionate about teaching and helping others. You can cooperate with 3DC and organize a workshop/ lecture/ sharing session. Teaching others is the best way to reinforce your knowledge at any discipline. 3DC can help you with: Event application & administrative matters Event publicity & announcement Workshop content refinement, quality control Video recording/steaming TA supports You can gain: Workshop directing experience Official fifth-row record 3DC membership for a year What kind of \"workshop\" can I do? \u00b6 Note: Topic of workshop/ lecture/ sharing session is not limited at all, you can pick any topic of your like, present it at any level of difficulty of your like. We only wish that you are passionate about what you are sharing, and we wish the topic to be as diverse as possible. For workshops, it should engage participants with hands-on activities, the pace of the workshop should be as slow as possible. Lecturing time versus hands-on activity time should be around 50:50. Some example topics for workshops may look like: How to build your first website How to build a native iOS App with SwiftUI How to build a Todo App using ReactJS For lectures, you can have fewer interactions with the audience, you don't need to design any hands-on activities. Some topics suit for lecture may look like: What is vim and why you should give it a try What are the best practices in using Vue.JS What is parallelism in Python and how do you use it. For sharing sessions, you can share about your internship experience, UROP experience, job-finding experience. It should come with a longer Q&A time. Some example topics for inspiration: Start-up or Big Corp, which one should you choose? How to prepare for technical interview Undergraduate research 101 - UROP experience sharing Pathway 3: Join a Hackathon with 3DC \u00b6 Team up with anyone in the 3DC Community, represent 3DC and participate in a hackathon.","title":"Join 3DC as a Member"},{"location":"3dc_membership/#how-to-become-a-3dc-member","text":"Last Updated Valid Until 23 Sep 2020 01 Jan 2021","title":"How to Become a 3DC Member"},{"location":"3dc_membership/#why-join-3dc","text":"Everyone can participate in 3DC-organised events with or without being a member of 3DC, we also extend our events to other local universities from time to time. We are an open community. However, we do have 3 groups of people within our 3DC Family. Non-members - You can participate in 3DC events freely, no commitments, but also no Fifth-Row record. 3DC Members - You can participate in 3DC events based on your preference, get more involved in projects/ workshops/ Hackathons. You will get the official Fifth-Row records on your Fifth-Row transcript. 3DC Core Team - We organize events, we host Hackathons, we build communities and everything behind the scene. You will get leadership experience and strong records on your Fifth-Row records and your R\u00e9sum\u00e9. The rest of the page tells you how to become a 3DC Members . If you are interested to join 3DC Core Team , please also check this out.","title":"Why Join 3DC?"},{"location":"3dc_membership/#3-pathways-to-gain-membership","text":"You can choose one of the following 3 pathways to become a 3DC member. (ps: The requirements are not that hard to achieve, and you can definitely make it if you keen to!) Project Workshop Hackthon","title":"3 Pathways to Gain Membership"},{"location":"3dc_membership/#pathway-1-do-a-project-with-3dc","text":"Doing practical software projects is the best way to learn programming, software development, and computer science. We encourage you to do a software development projects with 3DC, that means you get unlimited support from the 3DC community; we will assign you a mentor from our core team to guide you along the way; You get to showcase your finished project on 3DC's website, get exposures and opportunities.","title":"Pathway 1: Do a Project with 3DC"},{"location":"3dc_membership/#what-kind-of-project-can-i-do","text":"Don't be afraid, this \"project\" can be anything at any scale, we just want to encourage you to learn with the community. These projects can be: Self-Initiated (Come up with your own idea.) Mentor-Suggested (You can ask for ideas if you can't think of any.) School-proposed (Sometimes you can work with the school to serve real-world needs by building applications.)","title":"What kind of \"project\" can I do?"},{"location":"3dc_membership/#pathway-2-organise-a-workshop-with-3dc","text":"If you have passion about certain technical topics that you wanna share it with your peers, or if you are passionate about teaching and helping others. You can cooperate with 3DC and organize a workshop/ lecture/ sharing session. Teaching others is the best way to reinforce your knowledge at any discipline. 3DC can help you with: Event application & administrative matters Event publicity & announcement Workshop content refinement, quality control Video recording/steaming TA supports You can gain: Workshop directing experience Official fifth-row record 3DC membership for a year","title":"Pathway 2: Organise a Workshop with 3DC"},{"location":"3dc_membership/#what-kind-of-workshop-can-i-do","text":"Note: Topic of workshop/ lecture/ sharing session is not limited at all, you can pick any topic of your like, present it at any level of difficulty of your like. We only wish that you are passionate about what you are sharing, and we wish the topic to be as diverse as possible. For workshops, it should engage participants with hands-on activities, the pace of the workshop should be as slow as possible. Lecturing time versus hands-on activity time should be around 50:50. Some example topics for workshops may look like: How to build your first website How to build a native iOS App with SwiftUI How to build a Todo App using ReactJS For lectures, you can have fewer interactions with the audience, you don't need to design any hands-on activities. Some topics suit for lecture may look like: What is vim and why you should give it a try What are the best practices in using Vue.JS What is parallelism in Python and how do you use it. For sharing sessions, you can share about your internship experience, UROP experience, job-finding experience. It should come with a longer Q&A time. Some example topics for inspiration: Start-up or Big Corp, which one should you choose? How to prepare for technical interview Undergraduate research 101 - UROP experience sharing","title":"What kind of \"workshop\" can I do?"},{"location":"3dc_membership/#pathway-3-join-a-hackathon-with-3dc","text":"Team up with anyone in the 3DC Community, represent 3DC and participate in a hackathon.","title":"Pathway 3: Join a Hackathon with 3DC"},{"location":"contact_us/","text":"Contact Us \u00b6 Primary E-mail: 3dc@club.sutd.edu.sg Secondary E-mail: 3dcsutd@gmail.com","title":"Contact Us"},{"location":"contact_us/#contact-us","text":"Primary E-mail: 3dc@club.sutd.edu.sg Secondary E-mail: 3dcsutd@gmail.com","title":"Contact Us"},{"location":"core_team/","text":"Core Team Members \u00b6 Kai Xun President, Google DSC Lead, Class of 2022 I'm a sophomore in ISTD. I initially picked up programming years ago as a hobby. It was only after completing A levels that i considered pursuing a career in ths field. Thus far, my experience has mainly been in web and app dev but I'm mostly interested in research into AI. Huang He (Mark) Vice-President, Class of 2022 I'm a computer science undergraduate specialising artificial intelligence at SUTD. I have multidisciplinary experience as a software engineer and product manager in Agile software development teams. I am passionate about research in Computer Vision with Deep Learning as well as open-source stuff. Shoham Chakraborty Secretary, Class of 2022 I am passionate about helping people apply their software development skills to create practical and useful products for the public. I am personally interested in containers, cloud architecture, WebAssembly and WebXR. My main programming languages are Golang, Javascript and Python. Jason Chow Treasurer, Class of 2021 Just a guy who likes to dabble in every field of computer science. Favourites areas of interest include cloud, IoT and embedded, with a passion for web and mobile development. Shyam Sridhar OpenNodes Campus Lead, Class of 2022 I am very passionate about Blockchain Technology and exploring how it can be used to solve real world business problems in todays world. I love scouting for opportunities for members or the community and providing them with useful and meaningful resources which is why I resonate well with the mission of the OpenNodes Campus Collective . Other interests of mine include pets and coffee. Naomi Kong-Vega Class of 2022 I'm a sophomore in ISTD. I dabbled in some AI research before, and even got to publish some of my past projects. Currently, I'm interested in the new and emerging field of quantum computing and how it ties in with AI. Raphael Yee Class of 2024 A former film student turned full-stack engineer, I've worked at Carousell and MOE. My interests include web tech, infrastructure design and web scraping. The coolest thing I've built is a search engine that tracked price changes for >500k listings across Carousell, Qoo10 and Shopee using a serverless scraping architecture. Qiu Weihong Class of 2024 My passion for programming started in Junior College, where I learnt the fundamentals of coding, and continued to explore different programming languages and technologies after graduating. Now in 3DC, I hope to sharpen my skills and broaden my skillset, and also help others explore their interest in programming. Saakshi Vinod Saraf Class of 2024 I'm passionate about programming and love mentoring at workshops where I can help others realise their interest in coding. I code mostly in back-end languages like C++, Java, and Python, but I also enjoy exploring other front-end languages and frameworks. Other fields I am interested in include Data Science and Cybersecurity. Clarence Lee Class of 2024 Hi! I'm Clarence and I look forward to inspiring and building a strong community for a better SUTD. Areas: web development/mobile-development/machine learning/AI Bryce Goh Class of 2024 Interested in anything software related. I enjoy teaching others and building an open community in SUTD, where people can come together to collaborate and learn. Tan Li Ling Class of 2024 Currently a freshmore. Started picking up python and linux after A-levels. Interested in fintech and cybersecurity. Divy Chandra Class of 2024 I am really passionate about programming, and I love to get others excited and passionate about programming as well. I am also interested in solving algorithmic problems, Mathematics and Physics, and using code to make visualisations for concepts in those topics. I have mainly worked with Java, Python and JavaScript and I am mostly interested in software and game development!","title":"Core Team"},{"location":"core_team/#core-team-members","text":"Kai Xun President, Google DSC Lead, Class of 2022 I'm a sophomore in ISTD. I initially picked up programming years ago as a hobby. It was only after completing A levels that i considered pursuing a career in ths field. Thus far, my experience has mainly been in web and app dev but I'm mostly interested in research into AI. Huang He (Mark) Vice-President, Class of 2022 I'm a computer science undergraduate specialising artificial intelligence at SUTD. I have multidisciplinary experience as a software engineer and product manager in Agile software development teams. I am passionate about research in Computer Vision with Deep Learning as well as open-source stuff. Shoham Chakraborty Secretary, Class of 2022 I am passionate about helping people apply their software development skills to create practical and useful products for the public. I am personally interested in containers, cloud architecture, WebAssembly and WebXR. My main programming languages are Golang, Javascript and Python. Jason Chow Treasurer, Class of 2021 Just a guy who likes to dabble in every field of computer science. Favourites areas of interest include cloud, IoT and embedded, with a passion for web and mobile development. Shyam Sridhar OpenNodes Campus Lead, Class of 2022 I am very passionate about Blockchain Technology and exploring how it can be used to solve real world business problems in todays world. I love scouting for opportunities for members or the community and providing them with useful and meaningful resources which is why I resonate well with the mission of the OpenNodes Campus Collective . Other interests of mine include pets and coffee. Naomi Kong-Vega Class of 2022 I'm a sophomore in ISTD. I dabbled in some AI research before, and even got to publish some of my past projects. Currently, I'm interested in the new and emerging field of quantum computing and how it ties in with AI. Raphael Yee Class of 2024 A former film student turned full-stack engineer, I've worked at Carousell and MOE. My interests include web tech, infrastructure design and web scraping. The coolest thing I've built is a search engine that tracked price changes for >500k listings across Carousell, Qoo10 and Shopee using a serverless scraping architecture. Qiu Weihong Class of 2024 My passion for programming started in Junior College, where I learnt the fundamentals of coding, and continued to explore different programming languages and technologies after graduating. Now in 3DC, I hope to sharpen my skills and broaden my skillset, and also help others explore their interest in programming. Saakshi Vinod Saraf Class of 2024 I'm passionate about programming and love mentoring at workshops where I can help others realise their interest in coding. I code mostly in back-end languages like C++, Java, and Python, but I also enjoy exploring other front-end languages and frameworks. Other fields I am interested in include Data Science and Cybersecurity. Clarence Lee Class of 2024 Hi! I'm Clarence and I look forward to inspiring and building a strong community for a better SUTD. Areas: web development/mobile-development/machine learning/AI Bryce Goh Class of 2024 Interested in anything software related. I enjoy teaching others and building an open community in SUTD, where people can come together to collaborate and learn. Tan Li Ling Class of 2024 Currently a freshmore. Started picking up python and linux after A-levels. Interested in fintech and cybersecurity. Divy Chandra Class of 2024 I am really passionate about programming, and I love to get others excited and passionate about programming as well. I am also interested in solving algorithmic problems, Mathematics and Physics, and using code to make visualisations for concepts in those topics. I have mainly worked with Java, Python and JavaScript and I am mostly interested in software and game development!","title":"Core Team Members"},{"location":"demo/","text":"Demo Page for MkDocs Material \u00b6 Text Formatting \u00b6 Bold Strikethrough Italic Highlight MarkDown Table \u00b6 Method Description GET Fetch resource PUT Update resource DELETE Delete resource Admonitions \u00b6 Note This is an Admonition with default header This is an Admonition with no header Admonition This is an Admonition with customised-text header Collapsible Admonition This is an Collapsible Admonition with customised-text header def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Tldr Other types of Admonitions Info Other types of Admonitions Tip Other types of Admonitions Success Other types of Admonitions Question Other types of Admonitions Warning Other types of Admonitions Failure Other types of Admonitions Code Blocks \u00b6 Basic Code Block def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code Block with Line Number starting at 1 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code Block with Line Numbers starting at 6 and Highlighted lines 6 7 8 9 10 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Multiple-language Tabs C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Java 1 2 3 4 5 class HelloWorld { public static void main ( String [] args ) { System . out . println ( \"Hello, World!\" ); } } Python 1 2 def main (): print ( \"Hello world!\" ) Go 1 2 3 4 5 6 package main import \"fmt\" func main () { fmt . Println ( \"hello world\" ) } Math Formulas using LaTeX \u00b6 LateX Reference: LaTeX for Undergrads Math \\[X = \\sum_{i=0}^k d^k =\\frac{1 - d^{k+1}}{1-d}\\] \\[X(1-d) = 1 - d^{k+1}\\] \\[1 - X(1-d) = d^{k+1}\\] \\[1 - X + dX = d^{k+1}\\] \\[{k+1} = \\log_d (1 - X + dX)\\] \\[k = \\log_d (1 - X + dX) - 1\\] Images \u00b6 Just use HTML instead of MarkDown syntax for fine control over dimensions and margins. Centered image with caption Complete Documentation: https://squidfunk.github.io/mkdocs-material/reference/abbreviations/","title":"Demo Page"},{"location":"demo/#demo-page-for-mkdocs-material","text":"","title":"Demo Page for MkDocs Material"},{"location":"demo/#text-formatting","text":"Bold Strikethrough Italic Highlight","title":"Text Formatting"},{"location":"demo/#markdown-table","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"MarkDown Table"},{"location":"demo/#admonitions","text":"Note This is an Admonition with default header This is an Admonition with no header Admonition This is an Admonition with customised-text header Collapsible Admonition This is an Collapsible Admonition with customised-text header def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Tldr Other types of Admonitions Info Other types of Admonitions Tip Other types of Admonitions Success Other types of Admonitions Question Other types of Admonitions Warning Other types of Admonitions Failure Other types of Admonitions","title":"Admonitions"},{"location":"demo/#code-blocks","text":"Basic Code Block def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code Block with Line Number starting at 1 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code Block with Line Numbers starting at 6 and Highlighted lines 6 7 8 9 10 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Multiple-language Tabs C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Java 1 2 3 4 5 class HelloWorld { public static void main ( String [] args ) { System . out . println ( \"Hello, World!\" ); } } Python 1 2 def main (): print ( \"Hello world!\" ) Go 1 2 3 4 5 6 package main import \"fmt\" func main () { fmt . Println ( \"hello world\" ) }","title":"Code Blocks"},{"location":"demo/#math-formulas-using-latex","text":"LateX Reference: LaTeX for Undergrads Math \\[X = \\sum_{i=0}^k d^k =\\frac{1 - d^{k+1}}{1-d}\\] \\[X(1-d) = 1 - d^{k+1}\\] \\[1 - X(1-d) = d^{k+1}\\] \\[1 - X + dX = d^{k+1}\\] \\[{k+1} = \\log_d (1 - X + dX)\\] \\[k = \\log_d (1 - X + dX) - 1\\]","title":"Math Formulas using LaTeX"},{"location":"demo/#images","text":"Just use HTML instead of MarkDown syntax for fine control over dimensions and margins. Centered image with caption Complete Documentation: https://squidfunk.github.io/mkdocs-material/reference/abbreviations/","title":"Images"},{"location":"gtc/","text":"Google Tech Challenge (GTC) \u00b6 IAP 2021 is just around the corner, and we at 3DC have organised Google Tech Challenge! Google Tech Challenge comprises of a series of technical workshops to aid you in developing digital platforms, as well as a challenge. Challenge Announcement \u00b6 We at 3DC believe in learning through hands-on. Therefore, we (optionally) challenge you (and your friends) to create your own application(s) either during or after the workshop , and submit them to us! Some ideas could be your own e-commerce platform or a club website! The best submission will win a Keychron K2 Wireless Mechanical Keyboard , while the 10 best submissions will receive $5 GrabFood vouchers! For the challenge submission itself, there will be no sign-up form, just make sure you have signed up for at least one workshop and submit your code/application to us by 22 nd January 2020 . The submission link and scoring criteria can be found at the bottom of the page. Timeline \u00b6 All Workshops are virtual, apart from Telegram Bot workshop which is both physical and virtual, but physical signups for Telegram Bot workshop is closed Date/Time Workshop Details Sign up Link 7-8 Jan 3pm-6pm Web Dev Interested in creating a website or web application? This two-day workshop will cover backend web development with Django and SQL, and frontend web development with ReactJS. Sign up 11-12 Jan 2pm-6pm Android App Dev Want to learn to create an interactive Android application? Come join us for a two-day workshop, which will first cover Android fundamentals, before covering adding interactivity to your Android application using Firebase. Sign up 13 Jan 3pm-6pm Cloud Learn how to push your web application to the cloud! Participants will learn the basics of Linux, including setup and the command line interface, which will be useful for the cloud workshop. In the Cloud workshop, participants will learn how to deploy web applications on Google Cloud Platform. Sign up 14-15 Jan 9am-3pm Telegram Bot Want to make good use of your Python knowledge after CTD? Come join us in this two-day workshop to learn how to make your first Telegram Bot, hosted on Amazon Web Services. Sign up Submission Link and Scoring Criteria \u00b6 Click here to submit After you have finished any of our GTC workshops (Web, Android, Cloud or Telebot), you may submit your prototype/work you have done (either during or after workshops). We are not expecting finished products or anything like that! Just apply the concepts you have learnt and show us what you've accomplished, you may stand to win a prize! The scoring rules and criteria are as follows: Use at least one of the technologies from our workshops (Web, Android, Cloud, Telebot), but you are free to use any other technologies in conjunction as well. Do not submit projects/work that has been started for some time already (i.e. no cheating)! We want to see good implementations of concepts learnt (can be on your own or during workshops)! Be creative! If you have multiple pieces of prototype/work (e.g. different workshops), please submit them together. Implementing multiple technologies well may help you score higher! Bonus points for cool ideas","title":"Introduction"},{"location":"gtc/#google-tech-challenge-gtc","text":"IAP 2021 is just around the corner, and we at 3DC have organised Google Tech Challenge! Google Tech Challenge comprises of a series of technical workshops to aid you in developing digital platforms, as well as a challenge.","title":"Google Tech Challenge (GTC)"},{"location":"gtc/#challenge-announcement","text":"We at 3DC believe in learning through hands-on. Therefore, we (optionally) challenge you (and your friends) to create your own application(s) either during or after the workshop , and submit them to us! Some ideas could be your own e-commerce platform or a club website! The best submission will win a Keychron K2 Wireless Mechanical Keyboard , while the 10 best submissions will receive $5 GrabFood vouchers! For the challenge submission itself, there will be no sign-up form, just make sure you have signed up for at least one workshop and submit your code/application to us by 22 nd January 2020 . The submission link and scoring criteria can be found at the bottom of the page.","title":"Challenge Announcement"},{"location":"gtc/#timeline","text":"All Workshops are virtual, apart from Telegram Bot workshop which is both physical and virtual, but physical signups for Telegram Bot workshop is closed Date/Time Workshop Details Sign up Link 7-8 Jan 3pm-6pm Web Dev Interested in creating a website or web application? This two-day workshop will cover backend web development with Django and SQL, and frontend web development with ReactJS. Sign up 11-12 Jan 2pm-6pm Android App Dev Want to learn to create an interactive Android application? Come join us for a two-day workshop, which will first cover Android fundamentals, before covering adding interactivity to your Android application using Firebase. Sign up 13 Jan 3pm-6pm Cloud Learn how to push your web application to the cloud! Participants will learn the basics of Linux, including setup and the command line interface, which will be useful for the cloud workshop. In the Cloud workshop, participants will learn how to deploy web applications on Google Cloud Platform. Sign up 14-15 Jan 9am-3pm Telegram Bot Want to make good use of your Python knowledge after CTD? Come join us in this two-day workshop to learn how to make your first Telegram Bot, hosted on Amazon Web Services. Sign up","title":"Timeline"},{"location":"gtc/#submission-link-and-scoring-criteria","text":"Click here to submit After you have finished any of our GTC workshops (Web, Android, Cloud or Telebot), you may submit your prototype/work you have done (either during or after workshops). We are not expecting finished products or anything like that! Just apply the concepts you have learnt and show us what you've accomplished, you may stand to win a prize! The scoring rules and criteria are as follows: Use at least one of the technologies from our workshops (Web, Android, Cloud, Telebot), but you are free to use any other technologies in conjunction as well. Do not submit projects/work that has been started for some time already (i.e. no cheating)! We want to see good implementations of concepts learnt (can be on your own or during workshops)! Be creative! If you have multiple pieces of prototype/work (e.g. different workshops), please submit them together. Implementing multiple technologies well may help you score higher! Bonus points for cool ideas","title":"Submission Link and Scoring Criteria"},{"location":"join_3dc_core/","text":"How to Join 3DC Core Team \u00b6 Last Updated Valid Until 23 Sep 2020 01 Jan 2021 Why Join 3DC Core Team? \u00b6 We organise talks, workshops, Hackthons; We build communities; We advocate for Open Source; We give back to community using technology. If you are interested in joining 3DC's Core Team (EXCO), please fill in this form to let us know. We will contact you from there.","title":"Join 3DC Core Team"},{"location":"join_3dc_core/#how-to-join-3dc-core-team","text":"Last Updated Valid Until 23 Sep 2020 01 Jan 2021","title":"How to Join 3DC Core Team"},{"location":"join_3dc_core/#why-join-3dc-core-team","text":"We organise talks, workshops, Hackthons; We build communities; We advocate for Open Source; We give back to community using technology. If you are interested in joining 3DC's Core Team (EXCO), please fill in this form to let us know. We will contact you from there.","title":"Why Join 3DC Core Team?"},{"location":"project/","text":"coming soon...","title":"Project"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/","text":"Recess Week Challenge Cloud-Based Lab: Sheep-as-a-Service (SaaS) \u00b6 The story so far... \u00b6 If you have tried out the teaser challenge released on Friday, you would have helped our main character, Steve to set up his sheep farm! Thanks to all your help, Steve is now happily shearing wool from his sheep! Now, Steve wants to sell wool to other Minecrafters. He needs your help to set up a system that helps customers calculate the price of the wool they wish to buy! Introduction \u00b6 Welcome to 3DC's cloud-based lab! This lab has the following aims: Create a web-app with a working backend API The web-app will serve a very simple webpage as well that makes use of the backend API Deploy the web-app onto the cloud. TODO: Explain API In this case, our backend API will return a response containing the total price of the wool that the requester requests for. For this lab tutorial, we will be using Flask (a Python backend framework). We will be deploying our app to ( Amazon Web Services(AWS) ) Elastic Beanstalk. Setting up your Local Environment \u00b6 Installing Python \u00b6 Please refer to the Python Website for instructions to install Python3 if you don't already have Python3 installed. Installing Flask \u00b6 Open a Terminal/Command Prompt on your computer. (Here's an example for Windows) Now, install Flask by typing the following into your command line. (Note: It might be pip or pip3 on your computer depending on how you installed python) pip install Flask We now have Flask installed! ( Credits :Original Installation Instructions from Flask Website ) Creating our first Flask Web Application! \u00b6 For now, we will create a Flask Web Application that runs on our local machine first. We will deploy this application to the cloud later. Setting up the workspace \u00b6 Let us start by creating a folder for our cloud lab. In this case I will name this folder cloud_lab . We will create a Python file which will act as the source code for our Flask application. I will name this file sheep_shop.py , since this will be steve's sheep shop (or wool shop)! We will also create a HTML file which will be our home webpage for Steve's Sheep Shop! Steve's customers will access this webpage to check the price of the wool they want to buy! I will be creating a new file called index.html and placing it under the templates folder inside our cloud_lab folder. If you followed the steps above correctly, your directory structure should look like the following: cloud_lab | sheep_shop.py | \u2514\u2500\u2500\u2500templates | index.html Creating the webpage \u00b6 Since this tutorial is meant to be simple, we will only be using HTML, no CSS or Javascript Open your empty index.html file using your favourite text editor (you can use Notepad). To make things simple, we have provided some very simple sample code with comments. Simply paste this code into your file and replace the fields the file tells you to replace. <!doctype html> < html > < head > <!-- Fill in the title to appear as your tab title below --> < title > YOUR TITLE HERE </ title > </ head > < body > <!-- Fill in the main header title for your webpage below --> < h1 > YOUR HEADER TITLE HERE </ h1 > <!-- Fill in the subtitle for your webpage below --> < h2 > YOUR SUBTITLE HERE </ h2 > <!-- The below code adds a form to our webpage --> <!-- This form calls our Python file when the button is pressed --> < form id = \"request_form\" action = \"{{ url_for('request_price') }}\" method = \"POST\" > <!-- The <label> elements add labels for each field --> <!-- The <input> elements add fields for our forms --> < label for = \"num_red_wool\" > Number of Red Wool: </ label >< br > < input type = \"number\" id = \"num_red_wool\" name = \"num_red_wool\" >< br > < label for = \"num_green_wool\" > Number of Green Wool: </ label >< br > < input type = \"number\" id = \"num_green_wool\" name = \"num_green_wool\" >< br > < label for = \"num_blue_wool\" > Number of Blue Wool: </ label >< br > < input type = \"number\" id = \"num_blue_wool\" name = \"num_blue_wool\" >< br > <!-- The below represents the submit button for our form --> < input type = \"submit\" value = \"Calculate Price\" > </ form > </ body > </ html > Note that the <input> elements in the form have the name attribute assigned to them. This name attribute allows us to identify which field is which when we pass the form over to the Python code later on. In the <form> element, the action attribute causes the form to submit a HTTP request to our Python Flask Application (which acts as the server). If you are interested to know, the method attribute specifies the kind of HTTP request that is sent to the server. A POST request is usually used to send data to a server. Make sure to save your file! You can open this HTML file in your web browser to see what it looks like! Setting up the Local Flask Server \u00b6 What we have just done is created a simple static webpage! However, the webpage by itself right now doesnt really do anything. It can't actually calculate anything! Usually, you could simply add some javascript to add some interactive functionality to your webpage. However, we Steve realises he has a problem. The cost of each red wool, green wool and blue wool is changing all the time! Steve does not want to implement the logic for calculating the cost for the wool on his webpage. Instead, he wants to leave the calculation logic to a server, where he could also do many other things! Now of course, Steve's goal to calculate price is a very simple task, however, a server becomes much more important when you have databases and complicated logic involved. Static web pages by themselves are not made to handle complex server logic or concurrency. Open sheep_shop.py in your favourite text editor(e.g. Notepad, VScode) or IDE (e.g. Spyder, PyCharm). Paste the following template code with comments into your Python file and replace the part to calculate the total wool price. from flask import Flask , render_template , request , jsonify red_wool_price = 100 # Sets the price of a red wool to 100. DO NOT MODIFY green_wool_price = 10 # Sets the price of a green wool to 10. DO NOT MODIFY blue_wool_price = 1 # Sets the price of a green wool to 1. DO NOT MODIFY app = Flask ( __name__ ) # Creates a Flask application @app . route ( '/' ) def index (): # When the user navigates to <your_site_url>/, the index.html page renders return render_template ( 'index.html' ) @app . route ( '/request_price' , methods = [ 'POST' ]) def request_price (): # The HTML page sends a HTTP request to this endpoint # containing the wool numbers that the customer keyed in # Now we extract the actual wool numbers from the HTTP request. num_red_wool = int ( request . form . get ( 'num_red_wool' )) num_green_wool = int ( request . form . get ( 'num_green_wool' )) num_blue_wool = int ( request . form . get ( 'num_blue_wool' )) # Replace the 0 with the logic to calulcate the total price of the wools # Hint: Total price is given by the sum of the number of each type of wool # multiplied by their individual price. The variables containig the price of # each wool has already been provided at the start of this file price = 0 # Now we return a JSON object containing the price of the object # as a reponse return jsonify ({ 'price' : price }) if __name__ == '__main__' : app . run () Basically, the Flask app shows the user the webpage when the user navigates to the root directory of the website. In the second part of the flask app, there is a HTTP endpoint (you can think of it like a function) that handles the submitted form data from our index.html webpage. If you recall from the HTML file, we had a line < form id = \"request_form\" action = \"{{ url_for('request_price') }}\" method = \"POST\" > This action attribute tells the form to send the form data to the the url of the function with the name request_price in our flask app. The request_price function then takes the form data containing the number of wools, calculates the total price and returns a JSON object containing this total price in its response. Running the Local Flask Server \u00b6 To start up the server, open up a terminal, and navigate to the cloud_lab directory. Simply start the server by typing in the terminal (warning: depending on your setup, the command may be python3 instead of python ) python sheep_shop.py You should see output on the terminal similar to the following: * Serving Flask app \"sheep_shop\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Great, our flask app is now running! In your web browser, navigate to the url stated in the terminal output (usually http://127.0.0.1:5000/ ), and you should see your main webpage again, but this time served from your local Flask server! We can test out our webpage and price calculation. For example, fill in the number of the red, green and blue wools to be 1, 2 and 3 respectively, then click on the calculate button. You should now be redirected to another page that looks like this: On Firefox: On Chrome/Edge: Congratulations, you have created your first working Flask application with a webpage and HTTP endpoint! Let us see how we can deploy this application to the cloud so the anyone on the internet case access it! (and so we can award you marks for your lab) Deploying a Flask Web Application to the Cloud (AWS) \u00b6 We will be deploying our Flask server to AWS Elastic Beanstalk, a managed cloud service that will help to host the Flask application for us. Note that the options we choose in this lab should not incur any monetary costs, as we are using the 'free tier' of services. 0. Prepare our application \u00b6 To upload to Elastic Beanstalk, we need to do some additional configurations and setup. First, Elastic Beanstalk requires our Python Flask file to be called application.py , so go ahead rename that file. The name of the Flask app variable in our Python file also needs to be called application , so go ahead and replace ALL occurances of app with application . IMPORTANT: Be careful! You need to change the app.route to application.route and the app.run() to application.run() Second, Elastic Beanstalk requires a requirements.txt in the same folder as the application.py , so that it knows what dependencies it needs to install. Normally, we would use pip freeze to help us find out the requirements of our virtual environment. However, since we did not create virtual environment, this would just return all the dependencies installed on our computer, instead of just the ones required for the Flask Application. So, create a new file called requirements.txt and paste the contents inside: click==7.1.2 Flask==1.1.2 itsdangerous==1.1.0 Jinja2==2.11.2 MarkupSafe==1.1.1 Werkzeug==1.0.1 We will need to zip our application to upload to AWS later. There are other ways to upload our application, e.g. using S3 or Github, but we will just zip the application for now. (I will zip the contents cloud_lab folder to cloud_lab.zip ) IMPORTANT: Make sure there is no extra base folder in your zip file. The moment you open the zip file, the Python file and requirements file and templates folder should be in the root directory. 1. Create an AWS Account \u00b6 If you do not have an AWS Account already, sign up for a free AWS account here: https://aws.amazon.com/. If you have an account, just log in. 2. Go to the AWS Elastic Beanstalk Console \u00b6 In the AWS Management Console, click on Services in the top left corner, and click on Elastic Beanstalk . Then, click on Create Application 3. Fill in Application Details \u00b6 You should now see a form to fill in your application details. Fill in the following: For Application Name , just fill in whatever you want (e.g. Sheep Shop ) Leave Application Tags empty For Platform , choose Python , then Python3.7 running on 64bit Amazon Linux 2 for the Platform branch, then 3.1.2 for the platform version (or which is given) For Application Code , choose to upload your code. For Source Code Origin , choose Choose file , then choose to upload the zip file we created for our application earlier (e.g. cloud_lab.zip ). For Application code tags , leave it alone, then click on Create Application 4. Wait for Application Deployment \u00b6 You should now see something like this. AWS Elastic Beanstalk is now deploying your application, give it a while for it to be ready. Meanwhile, go make yourself some coffee or something! After some time, the deployment should be complete, and you should see the following: To verify the webpage is indeed working, navigate to the link (as circled in the image). You should see your working webpage. Try calculating the price of wools, and it should be working! 5. You're Done! \u00b6 That wasn't so difficult was it? Deploying your first web application onto the cloud. Once you're ready, submit your cloud based lab here . We strongly encourage you to explore other options for creating a web-app (e.g. Express/Spring/ASP.NET/Django), as well as the other cloud providers (E.g. Microsoft Azure, Google Cloud Platform) and the different services they have to offer!","title":"Cloud-based Lab"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#recess-week-challenge-cloud-based-lab-sheep-as-a-service-saas","text":"","title":"Recess Week Challenge Cloud-Based Lab: Sheep-as-a-Service (SaaS)"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#the-story-so-far","text":"If you have tried out the teaser challenge released on Friday, you would have helped our main character, Steve to set up his sheep farm! Thanks to all your help, Steve is now happily shearing wool from his sheep! Now, Steve wants to sell wool to other Minecrafters. He needs your help to set up a system that helps customers calculate the price of the wool they wish to buy!","title":"The story so far..."},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#introduction","text":"Welcome to 3DC's cloud-based lab! This lab has the following aims: Create a web-app with a working backend API The web-app will serve a very simple webpage as well that makes use of the backend API Deploy the web-app onto the cloud. TODO: Explain API In this case, our backend API will return a response containing the total price of the wool that the requester requests for. For this lab tutorial, we will be using Flask (a Python backend framework). We will be deploying our app to ( Amazon Web Services(AWS) ) Elastic Beanstalk.","title":"Introduction"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#setting-up-your-local-environment","text":"","title":"Setting up your Local Environment"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#installing-python","text":"Please refer to the Python Website for instructions to install Python3 if you don't already have Python3 installed.","title":"Installing Python"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#installing-flask","text":"Open a Terminal/Command Prompt on your computer. (Here's an example for Windows) Now, install Flask by typing the following into your command line. (Note: It might be pip or pip3 on your computer depending on how you installed python) pip install Flask We now have Flask installed! ( Credits :Original Installation Instructions from Flask Website )","title":"Installing Flask"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#creating-our-first-flask-web-application","text":"For now, we will create a Flask Web Application that runs on our local machine first. We will deploy this application to the cloud later.","title":"Creating our first Flask Web Application!"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#setting-up-the-workspace","text":"Let us start by creating a folder for our cloud lab. In this case I will name this folder cloud_lab . We will create a Python file which will act as the source code for our Flask application. I will name this file sheep_shop.py , since this will be steve's sheep shop (or wool shop)! We will also create a HTML file which will be our home webpage for Steve's Sheep Shop! Steve's customers will access this webpage to check the price of the wool they want to buy! I will be creating a new file called index.html and placing it under the templates folder inside our cloud_lab folder. If you followed the steps above correctly, your directory structure should look like the following: cloud_lab | sheep_shop.py | \u2514\u2500\u2500\u2500templates | index.html","title":"Setting up the workspace"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#creating-the-webpage","text":"Since this tutorial is meant to be simple, we will only be using HTML, no CSS or Javascript Open your empty index.html file using your favourite text editor (you can use Notepad). To make things simple, we have provided some very simple sample code with comments. Simply paste this code into your file and replace the fields the file tells you to replace. <!doctype html> < html > < head > <!-- Fill in the title to appear as your tab title below --> < title > YOUR TITLE HERE </ title > </ head > < body > <!-- Fill in the main header title for your webpage below --> < h1 > YOUR HEADER TITLE HERE </ h1 > <!-- Fill in the subtitle for your webpage below --> < h2 > YOUR SUBTITLE HERE </ h2 > <!-- The below code adds a form to our webpage --> <!-- This form calls our Python file when the button is pressed --> < form id = \"request_form\" action = \"{{ url_for('request_price') }}\" method = \"POST\" > <!-- The <label> elements add labels for each field --> <!-- The <input> elements add fields for our forms --> < label for = \"num_red_wool\" > Number of Red Wool: </ label >< br > < input type = \"number\" id = \"num_red_wool\" name = \"num_red_wool\" >< br > < label for = \"num_green_wool\" > Number of Green Wool: </ label >< br > < input type = \"number\" id = \"num_green_wool\" name = \"num_green_wool\" >< br > < label for = \"num_blue_wool\" > Number of Blue Wool: </ label >< br > < input type = \"number\" id = \"num_blue_wool\" name = \"num_blue_wool\" >< br > <!-- The below represents the submit button for our form --> < input type = \"submit\" value = \"Calculate Price\" > </ form > </ body > </ html > Note that the <input> elements in the form have the name attribute assigned to them. This name attribute allows us to identify which field is which when we pass the form over to the Python code later on. In the <form> element, the action attribute causes the form to submit a HTTP request to our Python Flask Application (which acts as the server). If you are interested to know, the method attribute specifies the kind of HTTP request that is sent to the server. A POST request is usually used to send data to a server. Make sure to save your file! You can open this HTML file in your web browser to see what it looks like!","title":"Creating the webpage"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#setting-up-the-local-flask-server","text":"What we have just done is created a simple static webpage! However, the webpage by itself right now doesnt really do anything. It can't actually calculate anything! Usually, you could simply add some javascript to add some interactive functionality to your webpage. However, we Steve realises he has a problem. The cost of each red wool, green wool and blue wool is changing all the time! Steve does not want to implement the logic for calculating the cost for the wool on his webpage. Instead, he wants to leave the calculation logic to a server, where he could also do many other things! Now of course, Steve's goal to calculate price is a very simple task, however, a server becomes much more important when you have databases and complicated logic involved. Static web pages by themselves are not made to handle complex server logic or concurrency. Open sheep_shop.py in your favourite text editor(e.g. Notepad, VScode) or IDE (e.g. Spyder, PyCharm). Paste the following template code with comments into your Python file and replace the part to calculate the total wool price. from flask import Flask , render_template , request , jsonify red_wool_price = 100 # Sets the price of a red wool to 100. DO NOT MODIFY green_wool_price = 10 # Sets the price of a green wool to 10. DO NOT MODIFY blue_wool_price = 1 # Sets the price of a green wool to 1. DO NOT MODIFY app = Flask ( __name__ ) # Creates a Flask application @app . route ( '/' ) def index (): # When the user navigates to <your_site_url>/, the index.html page renders return render_template ( 'index.html' ) @app . route ( '/request_price' , methods = [ 'POST' ]) def request_price (): # The HTML page sends a HTTP request to this endpoint # containing the wool numbers that the customer keyed in # Now we extract the actual wool numbers from the HTTP request. num_red_wool = int ( request . form . get ( 'num_red_wool' )) num_green_wool = int ( request . form . get ( 'num_green_wool' )) num_blue_wool = int ( request . form . get ( 'num_blue_wool' )) # Replace the 0 with the logic to calulcate the total price of the wools # Hint: Total price is given by the sum of the number of each type of wool # multiplied by their individual price. The variables containig the price of # each wool has already been provided at the start of this file price = 0 # Now we return a JSON object containing the price of the object # as a reponse return jsonify ({ 'price' : price }) if __name__ == '__main__' : app . run () Basically, the Flask app shows the user the webpage when the user navigates to the root directory of the website. In the second part of the flask app, there is a HTTP endpoint (you can think of it like a function) that handles the submitted form data from our index.html webpage. If you recall from the HTML file, we had a line < form id = \"request_form\" action = \"{{ url_for('request_price') }}\" method = \"POST\" > This action attribute tells the form to send the form data to the the url of the function with the name request_price in our flask app. The request_price function then takes the form data containing the number of wools, calculates the total price and returns a JSON object containing this total price in its response.","title":"Setting up the Local Flask Server"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#running-the-local-flask-server","text":"To start up the server, open up a terminal, and navigate to the cloud_lab directory. Simply start the server by typing in the terminal (warning: depending on your setup, the command may be python3 instead of python ) python sheep_shop.py You should see output on the terminal similar to the following: * Serving Flask app \"sheep_shop\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Great, our flask app is now running! In your web browser, navigate to the url stated in the terminal output (usually http://127.0.0.1:5000/ ), and you should see your main webpage again, but this time served from your local Flask server! We can test out our webpage and price calculation. For example, fill in the number of the red, green and blue wools to be 1, 2 and 3 respectively, then click on the calculate button. You should now be redirected to another page that looks like this: On Firefox: On Chrome/Edge: Congratulations, you have created your first working Flask application with a webpage and HTTP endpoint! Let us see how we can deploy this application to the cloud so the anyone on the internet case access it! (and so we can award you marks for your lab)","title":"Running the Local Flask Server"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#deploying-a-flask-web-application-to-the-cloud-aws","text":"We will be deploying our Flask server to AWS Elastic Beanstalk, a managed cloud service that will help to host the Flask application for us. Note that the options we choose in this lab should not incur any monetary costs, as we are using the 'free tier' of services.","title":"Deploying a Flask Web Application to the Cloud (AWS)"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#0-prepare-our-application","text":"To upload to Elastic Beanstalk, we need to do some additional configurations and setup. First, Elastic Beanstalk requires our Python Flask file to be called application.py , so go ahead rename that file. The name of the Flask app variable in our Python file also needs to be called application , so go ahead and replace ALL occurances of app with application . IMPORTANT: Be careful! You need to change the app.route to application.route and the app.run() to application.run() Second, Elastic Beanstalk requires a requirements.txt in the same folder as the application.py , so that it knows what dependencies it needs to install. Normally, we would use pip freeze to help us find out the requirements of our virtual environment. However, since we did not create virtual environment, this would just return all the dependencies installed on our computer, instead of just the ones required for the Flask Application. So, create a new file called requirements.txt and paste the contents inside: click==7.1.2 Flask==1.1.2 itsdangerous==1.1.0 Jinja2==2.11.2 MarkupSafe==1.1.1 Werkzeug==1.0.1 We will need to zip our application to upload to AWS later. There are other ways to upload our application, e.g. using S3 or Github, but we will just zip the application for now. (I will zip the contents cloud_lab folder to cloud_lab.zip ) IMPORTANT: Make sure there is no extra base folder in your zip file. The moment you open the zip file, the Python file and requirements file and templates folder should be in the root directory.","title":"0. Prepare our application"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#1-create-an-aws-account","text":"If you do not have an AWS Account already, sign up for a free AWS account here: https://aws.amazon.com/. If you have an account, just log in.","title":"1. Create an AWS Account"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#2-go-to-the-aws-elastic-beanstalk-console","text":"In the AWS Management Console, click on Services in the top left corner, and click on Elastic Beanstalk . Then, click on Create Application","title":"2. Go to the AWS Elastic Beanstalk Console"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#3-fill-in-application-details","text":"You should now see a form to fill in your application details. Fill in the following: For Application Name , just fill in whatever you want (e.g. Sheep Shop ) Leave Application Tags empty For Platform , choose Python , then Python3.7 running on 64bit Amazon Linux 2 for the Platform branch, then 3.1.2 for the platform version (or which is given) For Application Code , choose to upload your code. For Source Code Origin , choose Choose file , then choose to upload the zip file we created for our application earlier (e.g. cloud_lab.zip ). For Application code tags , leave it alone, then click on Create Application","title":"3. Fill in Application Details"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#4-wait-for-application-deployment","text":"You should now see something like this. AWS Elastic Beanstalk is now deploying your application, give it a while for it to be ready. Meanwhile, go make yourself some coffee or something! After some time, the deployment should be complete, and you should see the following: To verify the webpage is indeed working, navigate to the link (as circled in the image). You should see your working webpage. Try calculating the price of wools, and it should be working!","title":"4. Wait for Application Deployment"},{"location":"Recess_Week_Challenge_Stuff/cloud_based_lab/#5-youre-done","text":"That wasn't so difficult was it? Deploying your first web application onto the cloud. Once you're ready, submit your cloud based lab here . We strongly encourage you to explore other options for creating a web-app (e.g. Express/Spring/ASP.NET/Django), as well as the other cloud providers (E.g. Microsoft Azure, Google Cloud Platform) and the different services they have to offer!","title":"5. You're Done!"},{"location":"Recess_Week_Challenge_Stuff/guide/","text":"Recess Week Challenge Hackerrank Guide \u00b6 Typically, the first line of the question specifies the parameters for the input, such as the number of lines, values of variables. It is usually followed by a specified number of lines containing data separated by spaces. Input Example (2 represents the number of lines to be followed by \\((x)\\) , 1 8 3 is one line of data (to be read into first line of list), 4 5 6 is the second line of data (to be read into second line of list)) 2 1 8 3 4 5 6 Output Example 1 2 3 Python3 Guide \u00b6 To read the first line of input, x = int ( input ()) # The int() is used to convert input from a string to integer To read the subsequent 2 lines of input all_lists = [] for j in range ( x ): my_list = [] my_list = [ int ( i ) for i in input () . split ()] # A list of integers all_lists . append ( my_list ) For printing output print ( a , b , c ) C++ Guide \u00b6 You will require the following libraries #include <iostream> // To read from input and to print output #include <array> // To read the tuple #include <vector> // To read the lines of input To read the first line of input int x ; std :: cin >> x ; To read the subsequent 2 lines of input std :: vector < int > v ( x ); // Initialise vector with size x for ( int i = 0 ; i < x ; ++ i ) { std :: cin >> a1 >> a2 >> a3 ; v . at ( i ) = std :: array < int , 3 > { a1 , a2 , a3 }; // Assign element at i index of vector to array of inputs } To print to output std :: cout << a << b << c ;","title":"HackerRank Guide"},{"location":"Recess_Week_Challenge_Stuff/guide/#recess-week-challenge-hackerrank-guide","text":"Typically, the first line of the question specifies the parameters for the input, such as the number of lines, values of variables. It is usually followed by a specified number of lines containing data separated by spaces. Input Example (2 represents the number of lines to be followed by \\((x)\\) , 1 8 3 is one line of data (to be read into first line of list), 4 5 6 is the second line of data (to be read into second line of list)) 2 1 8 3 4 5 6 Output Example 1 2 3","title":"Recess Week Challenge Hackerrank Guide"},{"location":"Recess_Week_Challenge_Stuff/guide/#python3-guide","text":"To read the first line of input, x = int ( input ()) # The int() is used to convert input from a string to integer To read the subsequent 2 lines of input all_lists = [] for j in range ( x ): my_list = [] my_list = [ int ( i ) for i in input () . split ()] # A list of integers all_lists . append ( my_list ) For printing output print ( a , b , c )","title":"Python3 Guide"},{"location":"Recess_Week_Challenge_Stuff/guide/#c-guide","text":"You will require the following libraries #include <iostream> // To read from input and to print output #include <array> // To read the tuple #include <vector> // To read the lines of input To read the first line of input int x ; std :: cin >> x ; To read the subsequent 2 lines of input std :: vector < int > v ( x ); // Initialise vector with size x for ( int i = 0 ; i < x ; ++ i ) { std :: cin >> a1 >> a2 >> a3 ; v . at ( i ) = std :: array < int , 3 > { a1 , a2 , a3 }; // Assign element at i index of vector to array of inputs } To print to output std :: cout << a << b << c ;","title":"C++ Guide"},{"location":"Recess_Week_Challenge_Stuff/q1_hints/","text":"Q1 Hints \u00b6 Try to use hints only when you really need help! The hints are arranged in order. Hint 1 There is an obvious brute force algorithm to do this question (iterate through each block, then iterate through the number of adjacent blocks to add the light level), but is this efficient? You will need to spend O(n * m) time for this algorithm, where n is the number of blocks, and m is the maximum brightness level of a light source. You are possibly iterating through each block so many times! Perhaps you might find [prefix sum arrays](https://www.geeksforgeeks.org/prefix-sum-array-implementation-applications-competitive-programming/) to be of use! Hint 2 Break down the problem into smaller sub-problems! Try to solve a simpler version of the problem first! - How do we get the brightness level of each block, without taking into account the light decay yet? (i.e. the light sources are infinitely powerful) - Then, how do we take into account the light decay of each light source? Hint 3 You will only need linear time corresponding to the number of blocks to solve this problem! Perhaps you could combine prefix sum arrays with dividing the problem into smaller problems? Multiple prefix sum arrays? Hint 4 What effect does performing prefix sum of on an array TWICE do? Might it be useful in this question? Especially for the falloff?","title":"Q1 Hints"},{"location":"Recess_Week_Challenge_Stuff/q1_hints/#q1-hints","text":"Try to use hints only when you really need help! The hints are arranged in order. Hint 1 There is an obvious brute force algorithm to do this question (iterate through each block, then iterate through the number of adjacent blocks to add the light level), but is this efficient? You will need to spend O(n * m) time for this algorithm, where n is the number of blocks, and m is the maximum brightness level of a light source. You are possibly iterating through each block so many times! Perhaps you might find [prefix sum arrays](https://www.geeksforgeeks.org/prefix-sum-array-implementation-applications-competitive-programming/) to be of use! Hint 2 Break down the problem into smaller sub-problems! Try to solve a simpler version of the problem first! - How do we get the brightness level of each block, without taking into account the light decay yet? (i.e. the light sources are infinitely powerful) - Then, how do we take into account the light decay of each light source? Hint 3 You will only need linear time corresponding to the number of blocks to solve this problem! Perhaps you could combine prefix sum arrays with dividing the problem into smaller problems? Multiple prefix sum arrays? Hint 4 What effect does performing prefix sum of on an array TWICE do? Might it be useful in this question? Especially for the falloff?","title":"Q1 Hints"},{"location":"Recess_Week_Challenge_Stuff/q1_sol/","text":"Q1: Solution and Afterthoughts \u00b6 Steve's Wheat Farm is arguably the most difficult problem in the entire recess week challenge, so much that Q2 was made easier to allow participants more time to solve Q1. However, Steve's Wheat Farm is actually not that difficult of a problem if approached correctly. There is really only one advanced programming concept: The Prefix Sum Array (Refer to hints on what is a Prefix Sum Array). Straightforward (and Naive) \u00b6 Let us explore the problem step by step. Let's use an example to visualise 11 0 0 0 0 3 0 3 0 0 0 0 The straightfowrward approach is to Visit each block in order (* denotes the current block we are on) If there is a light source on that block Add the brightness to that block (we shall just skip to the first light source) To the block to the right of the current block, add brightness level of the source block, subtracted by 1. Repeat this process as we continue going right, subtracting 1 more each time until we reach brightness level 0, or there are no more blocks on the right. Repeat above steps for the right side of the block. After visiting the first light source: 0 0 1 2 3 2 4 0 0 0 0 After visiting the second light source: 0 0 1 2 4 4 4 2 1 0 0 This gives us a time complexity of \\(O(n * B_{max})\\) , where \\(n\\) is the number of blocks and \\(B_{max}\\) is the max brightness level of a source. Naive approach in Python3 n = int ( input ()) brightness = [ 0 ] * n raws = input () . split () # Store the source inputs in an array for i in range ( n ): # Iterate through source inputs, and add them to the final brightness array. source = int ( raws [ i ]) brightness [ i ] += source d = 1 # Represents the current distance away from the source for j in range ( source - 1 , 0 , - 1 ): # Decrement brightness level by 1 for each block away from source if i + d < n : # If the dth block on right side of the source block is within the given blocks # Add brightness level due to source block at that block brightness [ i + d ] += j if i - d >= 0 : # If dth block on left side of the source block is within the given blocks # Add brightness level due to source block at that block brightness [ i - d ] += j d += 1 # Increment distance at each iteration # Now loop through the array to find the number of blocks that meet # the optimal brightness condition count = 0 for source in brightness : if ( source >= 10000 and source <= 30000000 ): count += 1 print ( count ) The problem with the naive apporach \u00b6 We are potentially visiting each block so many times if every block has a source of \\(B_{max}\\) brightness level. In particular, the step where we \"spread\" out the light from the light source is incredibly repetitive. is there a way to do things better? A better approach \u00b6 We can use the prefix sum array approach, where we \"jot down\" the main parameters for the operations that we will need to perform later. For example for any given light source, we can describe its impact on the result array by breaking it down into a few segments: The resultant brightness level at any block is the arithmetic sum of the individual resultant brightness levels due to individual light sources around it (something like superposition) The resultant brightness level of a block due to a source falls off over distance. Conversely, we can rephrase the above statement to: (Taking a left-to-right approach) The resultant brightness level of a block due to a source increases (by 1 per block) as we approach the source, and falls back down(by 1 per block) to zero as we get further away from the source. Of course, take note the resultant brightness level of a block due to a source can never be less than zero. This means that at \\(brightnesslevel\\) distance to the left of the source, we should start to increase the brightness level by 1 every block Notice that in terms of a prefix sum array, this can be represented by adding +1 to the first block where the brightness level is non-zero (initalise a new array first) Adding +1 to the first block where brightness level is non-zero 0 0 1 0 1 0 0 0 0 0 0 Then when we get to the block right after the source, we should reverse this trend (i.e. make it decreasing). Notice that we can change the prefix sum trend from +1 to -1, by adding -2 to the block right after the light source. Adding -2 to the block to the immediate right of the source: 0 0 1 0 1 -2 0 -2 0 0 0 Eventually, we should stop this decreasing trend right after the block where the brightness level due to this source should become zero. This means we should counter the -1 prefix sum trend by adding +1 to the block right after where the brightness level due to the light source should become zero. 0 0 1 0 1 -2 0 -2 1 0 1 Note that the step where we add +1 to start the increasing trend, the index of the source may be negative. To fix that, we can Add +1 to the first element of the prefix sum array to denote the increasing trend Add the brightness level of the first block (due to the current light source) subtracted by 1, to sort of shared \\(base\\) variable. We will add this \\(base\\) variable back to the array later. Since we are going from left to right, we don't have to do this treatment for the part on the right of the light source. All that is left now is to evaluate the prefix sum of our array base = 0 0 0 1 1 2 0 0 -2 0 -1 -1 0 Performing prefix sum once will give us the realised total increasing/decreasing trend for each block. Add the \\(base\\) variable back to the first element of the array, since we are going to evaluate the final total brightness levels due to the starting value and the increasing/decreasing trends now, and we need the starting brightness value at the first block. Perform prefix sum yet another time on the array. The first element will represent the starting brightness, and apply the trend for the next block at every next block, together with the base value from the previous block. 0 0 1 2 4 4 4 2 1 0 0 Efficiency of improved algorithm \u00b6 Notice that we only iterate through the array thrice, and during the first set of iteration, we perform a maximum of three array-lookup operations (of \\(O(1)\\) time complexity) per block, which gives us a total linear time complexity of \\(O(n)\\) ! The full solution (Python3) can be found below. Python 3 Full Solution with Prefix Sum def prefixSum ( arr ): # Returns array where each element is the cumulative sum of the elements # up to its current index in the original array arr2 = [ 0 ] * len ( arr ) arr2 [ 0 ] = arr [ 0 ] for i in range ( 1 , len ( arr )): arr2 [ i ] = arr2 [ i - 1 ] + arr [ i ] return arr2 n = int ( input ()) sources = [ 0 ] * n # Base Array to perform prefix sum on. raws = [ int ( i ) for i in input () . split ()] base = 0 # Base variable to store the starting value of the array for i in range ( n ): source = raws [ i ] if source == 0 : # If the source is zero, there is no need to do anything continue if i - source + 1 >= 0 : # Check if the first non-zero brightness level block is within the array bounds # If it is within bounds, add +1 to indicate the start of the increasing trend sources [ i - source + 1 ] += 1 else : # Otherwise, add +1 to the first element of the array to indicate the trend # and also store the starting brightness level at the first block at base variable sources [ 0 ] += 1 base += source - i - 1 if i + 1 < n : # If the source is non-zero and not the last block # Indicate that the trend should be reversed at the next block sources [ i + 1 ] -= 2 if i + 1 + source < n : # And indicate where this reverse trend should end # This should be where the brightness level decreases to zero sources [ i + 1 + source ] += 1 # Prefix Sum once gives us the array of total increasing/decreasing trends at each block pfSources = prefixSum ( sources ) # Add base back to the array to set our starting value pfSources [ 0 ] += base # Prefix sum again to apply the trends from the starting value res = prefixSum ( pfSources ) optimal = 0 # Variable to contain number of optimal blocks for i in range ( n ): # To find the actual light level, add light level of each block due to sources # in both directions, then add cumulative falloff at each block in both directions if ( res [ i ] >= 10000 and res [ i ] < 30000000 ): optimal += 1 print ( optimal )","title":"Q1 Solution"},{"location":"Recess_Week_Challenge_Stuff/q1_sol/#q1-solution-and-afterthoughts","text":"Steve's Wheat Farm is arguably the most difficult problem in the entire recess week challenge, so much that Q2 was made easier to allow participants more time to solve Q1. However, Steve's Wheat Farm is actually not that difficult of a problem if approached correctly. There is really only one advanced programming concept: The Prefix Sum Array (Refer to hints on what is a Prefix Sum Array).","title":"Q1: Solution and Afterthoughts"},{"location":"Recess_Week_Challenge_Stuff/q1_sol/#straightforward-and-naive","text":"Let us explore the problem step by step. Let's use an example to visualise 11 0 0 0 0 3 0 3 0 0 0 0 The straightfowrward approach is to Visit each block in order (* denotes the current block we are on) If there is a light source on that block Add the brightness to that block (we shall just skip to the first light source) To the block to the right of the current block, add brightness level of the source block, subtracted by 1. Repeat this process as we continue going right, subtracting 1 more each time until we reach brightness level 0, or there are no more blocks on the right. Repeat above steps for the right side of the block. After visiting the first light source: 0 0 1 2 3 2 4 0 0 0 0 After visiting the second light source: 0 0 1 2 4 4 4 2 1 0 0 This gives us a time complexity of \\(O(n * B_{max})\\) , where \\(n\\) is the number of blocks and \\(B_{max}\\) is the max brightness level of a source. Naive approach in Python3 n = int ( input ()) brightness = [ 0 ] * n raws = input () . split () # Store the source inputs in an array for i in range ( n ): # Iterate through source inputs, and add them to the final brightness array. source = int ( raws [ i ]) brightness [ i ] += source d = 1 # Represents the current distance away from the source for j in range ( source - 1 , 0 , - 1 ): # Decrement brightness level by 1 for each block away from source if i + d < n : # If the dth block on right side of the source block is within the given blocks # Add brightness level due to source block at that block brightness [ i + d ] += j if i - d >= 0 : # If dth block on left side of the source block is within the given blocks # Add brightness level due to source block at that block brightness [ i - d ] += j d += 1 # Increment distance at each iteration # Now loop through the array to find the number of blocks that meet # the optimal brightness condition count = 0 for source in brightness : if ( source >= 10000 and source <= 30000000 ): count += 1 print ( count )","title":"Straightforward (and Naive)"},{"location":"Recess_Week_Challenge_Stuff/q1_sol/#the-problem-with-the-naive-apporach","text":"We are potentially visiting each block so many times if every block has a source of \\(B_{max}\\) brightness level. In particular, the step where we \"spread\" out the light from the light source is incredibly repetitive. is there a way to do things better?","title":"The problem with the naive apporach"},{"location":"Recess_Week_Challenge_Stuff/q1_sol/#a-better-approach","text":"We can use the prefix sum array approach, where we \"jot down\" the main parameters for the operations that we will need to perform later. For example for any given light source, we can describe its impact on the result array by breaking it down into a few segments: The resultant brightness level at any block is the arithmetic sum of the individual resultant brightness levels due to individual light sources around it (something like superposition) The resultant brightness level of a block due to a source falls off over distance. Conversely, we can rephrase the above statement to: (Taking a left-to-right approach) The resultant brightness level of a block due to a source increases (by 1 per block) as we approach the source, and falls back down(by 1 per block) to zero as we get further away from the source. Of course, take note the resultant brightness level of a block due to a source can never be less than zero. This means that at \\(brightnesslevel\\) distance to the left of the source, we should start to increase the brightness level by 1 every block Notice that in terms of a prefix sum array, this can be represented by adding +1 to the first block where the brightness level is non-zero (initalise a new array first) Adding +1 to the first block where brightness level is non-zero 0 0 1 0 1 0 0 0 0 0 0 Then when we get to the block right after the source, we should reverse this trend (i.e. make it decreasing). Notice that we can change the prefix sum trend from +1 to -1, by adding -2 to the block right after the light source. Adding -2 to the block to the immediate right of the source: 0 0 1 0 1 -2 0 -2 0 0 0 Eventually, we should stop this decreasing trend right after the block where the brightness level due to this source should become zero. This means we should counter the -1 prefix sum trend by adding +1 to the block right after where the brightness level due to the light source should become zero. 0 0 1 0 1 -2 0 -2 1 0 1 Note that the step where we add +1 to start the increasing trend, the index of the source may be negative. To fix that, we can Add +1 to the first element of the prefix sum array to denote the increasing trend Add the brightness level of the first block (due to the current light source) subtracted by 1, to sort of shared \\(base\\) variable. We will add this \\(base\\) variable back to the array later. Since we are going from left to right, we don't have to do this treatment for the part on the right of the light source. All that is left now is to evaluate the prefix sum of our array base = 0 0 0 1 1 2 0 0 -2 0 -1 -1 0 Performing prefix sum once will give us the realised total increasing/decreasing trend for each block. Add the \\(base\\) variable back to the first element of the array, since we are going to evaluate the final total brightness levels due to the starting value and the increasing/decreasing trends now, and we need the starting brightness value at the first block. Perform prefix sum yet another time on the array. The first element will represent the starting brightness, and apply the trend for the next block at every next block, together with the base value from the previous block. 0 0 1 2 4 4 4 2 1 0 0","title":"A better approach"},{"location":"Recess_Week_Challenge_Stuff/q1_sol/#efficiency-of-improved-algorithm","text":"Notice that we only iterate through the array thrice, and during the first set of iteration, we perform a maximum of three array-lookup operations (of \\(O(1)\\) time complexity) per block, which gives us a total linear time complexity of \\(O(n)\\) ! The full solution (Python3) can be found below. Python 3 Full Solution with Prefix Sum def prefixSum ( arr ): # Returns array where each element is the cumulative sum of the elements # up to its current index in the original array arr2 = [ 0 ] * len ( arr ) arr2 [ 0 ] = arr [ 0 ] for i in range ( 1 , len ( arr )): arr2 [ i ] = arr2 [ i - 1 ] + arr [ i ] return arr2 n = int ( input ()) sources = [ 0 ] * n # Base Array to perform prefix sum on. raws = [ int ( i ) for i in input () . split ()] base = 0 # Base variable to store the starting value of the array for i in range ( n ): source = raws [ i ] if source == 0 : # If the source is zero, there is no need to do anything continue if i - source + 1 >= 0 : # Check if the first non-zero brightness level block is within the array bounds # If it is within bounds, add +1 to indicate the start of the increasing trend sources [ i - source + 1 ] += 1 else : # Otherwise, add +1 to the first element of the array to indicate the trend # and also store the starting brightness level at the first block at base variable sources [ 0 ] += 1 base += source - i - 1 if i + 1 < n : # If the source is non-zero and not the last block # Indicate that the trend should be reversed at the next block sources [ i + 1 ] -= 2 if i + 1 + source < n : # And indicate where this reverse trend should end # This should be where the brightness level decreases to zero sources [ i + 1 + source ] += 1 # Prefix Sum once gives us the array of total increasing/decreasing trends at each block pfSources = prefixSum ( sources ) # Add base back to the array to set our starting value pfSources [ 0 ] += base # Prefix sum again to apply the trends from the starting value res = prefixSum ( pfSources ) optimal = 0 # Variable to contain number of optimal blocks for i in range ( n ): # To find the actual light level, add light level of each block due to sources # in both directions, then add cumulative falloff at each block in both directions if ( res [ i ] >= 10000 and res [ i ] < 30000000 ): optimal += 1 print ( optimal )","title":"Efficiency of improved algorithm"},{"location":"Recess_Week_Challenge_Stuff/q2_sol/","text":"Q2: Solution and Afterthoughts \u00b6 Question 2 is not difficult at all, and everyone who submitted code managed to solve it. The main objective of Question 2 was to give everyone a breather and more time to solve Question 1. It's all about intuition! \u00b6 We notice that we have a square room. Then we also notice that if we simply mirror Prof Oka's step every single time (i.e. if he goes Down, we go Right and vice versa), it is impossible for us to copy Prof Oka at all. And since we are mirroring him, we will start at the same point, and end at the same point!","title":"Q2 Solution"},{"location":"Recess_Week_Challenge_Stuff/q2_sol/#q2-solution-and-afterthoughts","text":"Question 2 is not difficult at all, and everyone who submitted code managed to solve it. The main objective of Question 2 was to give everyone a breather and more time to solve Question 1.","title":"Q2: Solution and Afterthoughts"},{"location":"Recess_Week_Challenge_Stuff/q2_sol/#its-all-about-intuition","text":"We notice that we have a square room. Then we also notice that if we simply mirror Prof Oka's step every single time (i.e. if he goes Down, we go Right and vice versa), it is impossible for us to copy Prof Oka at all. And since we are mirroring him, we will start at the same point, and end at the same point!","title":"It's all about intuition!"},{"location":"Recess_Week_Challenge_Stuff/q3_hints/","text":"Q3 Hints \u00b6 Try to use hints only when you really need help! The hints are arranged in order. Hint 1 This can be achieved using a Flood fill algorithm , but you must add your own custom checks regarding the depth level, and change the notion of \"same colour\" to \"obstacle\". Hint 2 Encountering a timeout on your code for more complex cases? Perhaps consider how efficient your current algorithm is. Does it constantly excessively waste time computing something that would be overwritten later? Is there a way to minimize this wastage in computational time?","title":"Q3 Hints"},{"location":"Recess_Week_Challenge_Stuff/q3_hints/#q3-hints","text":"Try to use hints only when you really need help! The hints are arranged in order. Hint 1 This can be achieved using a Flood fill algorithm , but you must add your own custom checks regarding the depth level, and change the notion of \"same colour\" to \"obstacle\". Hint 2 Encountering a timeout on your code for more complex cases? Perhaps consider how efficient your current algorithm is. Does it constantly excessively waste time computing something that would be overwritten later? Is there a way to minimize this wastage in computational time?","title":"Q3 Hints"},{"location":"Recess_Week_Challenge_Stuff/q3_sol/","text":"Q3: Solution and Afterthoughts \u00b6 Question 3 was a more balanced question compared to Question 1 and Question 2, one being really difficult, and the other being really easy. The participant's objective is to take the straightforward approach to Question 3 and try to make it more efficient. Mainly, this was a greedy algorithm question. The base approaches \u00b6 All the approaches utilise the flood fill algorithm in one way or another. However, it is not too difficult to come up with the flood fill algorithm yourself either. The most straightforward approach is to visit each block one by one from the top left, and then try to visit all blocks adjacent to it (up, down, left, right). If the adjacent block has a depth lower that current depth minus by one, then update that block with current depth minus by one. And visit that block to repeat the algorithm for its adjacent blocks If the adjacent block does not have a depth lower than current depth minus by one, or if it is an obstacle, do nothing, there is no need to update or visit that block If the current depth is zero, just backtrack. The other similar approach is to start from the water source block and run the same above three steps. The problem \u00b6 Both approaches can be extremely inefficient, possibly having to recompute each block's depth multiple times, which can lead to recomputation of the blocks below it as well. The above approaches are depth-based, going deep into branches right from the start, instead of spreading out slowly. A more efficient, greedy approach \u00b6 Intuition tells us that blocks closer to the water source block are more likely to be deeper (more water) than blocks further from it. Obstacles may complicate things and the bove may not always hold true as a result, but it is still a good general rule of thumb to follow. Thus, we can try to be greedy by choosing to update blocks that are likely to have a larger water depth first (i.e. blocks closer to the water source), before exploring the ones that are likely to be shallower (i.e. blocks further from the water source). Statistically, this minimizes the chance of us having to re-update later. To do this, we need to explore the blocks by going in a spiral around the water source block. One way to do this is to use a queue . A queue follows a first-in-first-out policy, allowing us to \"remember\" or \"save\" the blocks we want to visit later (i.e. we can store adjacent blocks of the current block we are visiting (that we have recently updated) into the queue), while trying clear the blocks that we have marked for visiting earlier. This queue causes us to go in a spiral pattern, and we are going broad first rather than deep, minimizing our inefficiency. Eventually, the algorithm ends when there are no more blocks in the queue (i.e. no more blocks that we need to visit/update). Python3 Approach for Greedy Queue Algorithm def flood ( grid , r , c , depth , x , y ): # For loop algorithm (function that calls itself) that uses a queue if depth == 1 : # If water depth is one, there is no need to update anything else return Q = [] # Initialise Queue to be empty Q . append (( r , c , depth )) # Add water source block's position and depth to the queue while len ( Q ) != 0 : # While queue is not empty, visit all the blocks in the queue, FIFO ( nx , ny , d ) = Q . pop ( 0 ) # Visit block at the start of the queue for ( i , j ) in [( nx - 1 , ny ), ( nx + 1 , ny ),( nx , ny - 1 ), ( nx , ny + 1 )]: # Try to see if adjacent blocks need to be updated if i < x and i >= 0 and j < y and j >= 0 \\ and grid [ i ][ j ] >= 0 and grid [ i ][ j ] < d - 1 : # If adjacent blocks have lower water depth and current -1 # and are within boundaries grid [ i ][ j ] = d - 1 # Set their new water depth to current depth - 1 Q . append (( i , j , d - 1 )) # Since water depth was updated for that block # Might need to update depth of blocks adjacent to it, so add to queue rows , cols , depth = [ int ( i ) for i in input () . split ()] grid = [[ 0 for i in range ( cols )] for j in range ( rows )] water_r = 0 water_c = 0 for row in range ( rows ): # We store the source block's water depth # Any blocks is an obstacle is marked with -1 # All other blocks are marked as 0 s = input () . split () for col in range ( cols ): if s [ col ] == \"X\" : grid [ row ][ col ] = - 1 elif s [ col ] == \".\" : grid [ row ][ col ] = 0 else : grid [ row ][ col ] = int ( s [ col ]) water_r = row water_c = col flood ( grid , water_r , water_c , depth , rows , cols ) # Result obtained, just convert it into the format requested by qn for row in range ( rows ): for col in range ( cols ): if grid [ row ][ col ] == 0 : print ( '.' , end = \" \" ) elif grid [ row ][ col ] == - 1 : print ( 'X' , end = \" \" ) else : print ( grid [ row ][ col ], end = \" \" ) print () Compare it to the more naive, less greedy approach below. Python3 Solution for depth-first approach def flood ( grid , r , c , depth , x , y ): # Recursive algorithm (function that calls itself). Function will continue to invoke itself until depth == 1. if depth == 1 : return for ( i , j ) in [( r - 1 , c ), ( r + 1 , c ), ( r , c - 1 ), ( r , c + 1 )]: if i < x and i >= 0 and j < y and j >= 0 \\ and grid [ i ][ j ] >= 0 and grid [ i ][ j ] < depth - 1 : # The surrounding / adjacent cells cannot have a depth that is more than 1 below the current cell. # Hence, if it is, change it to just 1 below current cell grid [ i ][ j ] = depth - 1 flood ( grid , i , j , depth - 1 , x , y ) rows , cols , depth = [ int ( i ) for i in input () . split ()] grid = [[ 0 ] * cols for _ in range ( rows )] water_r = 0 water_c = 0 # Convert '.' and 'X' to -1 and 0 first. If it is the source of water, just convert to int. for row in range ( rows ): s = input () . split () for col in range ( cols ): if s [ col ] == \"X\" : grid [ row ][ col ] = - 1 elif s [ col ] == \".\" : grid [ row ][ col ] = 0 else : grid [ row ][ col ] = int ( s [ col ]) water_r = row water_c = col flood ( grid , water_r , water_c , depth , rows , cols ) # Result obtained, just convert it into the format requested by qn for row in range ( rows ): for col in range ( cols ): if grid [ row ][ col ] == 0 : print ( '.' , end = \" \" ) elif grid [ row ][ col ] == - 1 : print ( 'X' , end = \" \" ) else : print ( grid [ row ][ col ], end = \" \" ) print ()","title":"Q3 Solution"},{"location":"Recess_Week_Challenge_Stuff/q3_sol/#q3-solution-and-afterthoughts","text":"Question 3 was a more balanced question compared to Question 1 and Question 2, one being really difficult, and the other being really easy. The participant's objective is to take the straightforward approach to Question 3 and try to make it more efficient. Mainly, this was a greedy algorithm question.","title":"Q3: Solution and Afterthoughts"},{"location":"Recess_Week_Challenge_Stuff/q3_sol/#the-base-approaches","text":"All the approaches utilise the flood fill algorithm in one way or another. However, it is not too difficult to come up with the flood fill algorithm yourself either. The most straightforward approach is to visit each block one by one from the top left, and then try to visit all blocks adjacent to it (up, down, left, right). If the adjacent block has a depth lower that current depth minus by one, then update that block with current depth minus by one. And visit that block to repeat the algorithm for its adjacent blocks If the adjacent block does not have a depth lower than current depth minus by one, or if it is an obstacle, do nothing, there is no need to update or visit that block If the current depth is zero, just backtrack. The other similar approach is to start from the water source block and run the same above three steps.","title":"The base approaches"},{"location":"Recess_Week_Challenge_Stuff/q3_sol/#the-problem","text":"Both approaches can be extremely inefficient, possibly having to recompute each block's depth multiple times, which can lead to recomputation of the blocks below it as well. The above approaches are depth-based, going deep into branches right from the start, instead of spreading out slowly.","title":"The problem"},{"location":"Recess_Week_Challenge_Stuff/q3_sol/#a-more-efficient-greedy-approach","text":"Intuition tells us that blocks closer to the water source block are more likely to be deeper (more water) than blocks further from it. Obstacles may complicate things and the bove may not always hold true as a result, but it is still a good general rule of thumb to follow. Thus, we can try to be greedy by choosing to update blocks that are likely to have a larger water depth first (i.e. blocks closer to the water source), before exploring the ones that are likely to be shallower (i.e. blocks further from the water source). Statistically, this minimizes the chance of us having to re-update later. To do this, we need to explore the blocks by going in a spiral around the water source block. One way to do this is to use a queue . A queue follows a first-in-first-out policy, allowing us to \"remember\" or \"save\" the blocks we want to visit later (i.e. we can store adjacent blocks of the current block we are visiting (that we have recently updated) into the queue), while trying clear the blocks that we have marked for visiting earlier. This queue causes us to go in a spiral pattern, and we are going broad first rather than deep, minimizing our inefficiency. Eventually, the algorithm ends when there are no more blocks in the queue (i.e. no more blocks that we need to visit/update). Python3 Approach for Greedy Queue Algorithm def flood ( grid , r , c , depth , x , y ): # For loop algorithm (function that calls itself) that uses a queue if depth == 1 : # If water depth is one, there is no need to update anything else return Q = [] # Initialise Queue to be empty Q . append (( r , c , depth )) # Add water source block's position and depth to the queue while len ( Q ) != 0 : # While queue is not empty, visit all the blocks in the queue, FIFO ( nx , ny , d ) = Q . pop ( 0 ) # Visit block at the start of the queue for ( i , j ) in [( nx - 1 , ny ), ( nx + 1 , ny ),( nx , ny - 1 ), ( nx , ny + 1 )]: # Try to see if adjacent blocks need to be updated if i < x and i >= 0 and j < y and j >= 0 \\ and grid [ i ][ j ] >= 0 and grid [ i ][ j ] < d - 1 : # If adjacent blocks have lower water depth and current -1 # and are within boundaries grid [ i ][ j ] = d - 1 # Set their new water depth to current depth - 1 Q . append (( i , j , d - 1 )) # Since water depth was updated for that block # Might need to update depth of blocks adjacent to it, so add to queue rows , cols , depth = [ int ( i ) for i in input () . split ()] grid = [[ 0 for i in range ( cols )] for j in range ( rows )] water_r = 0 water_c = 0 for row in range ( rows ): # We store the source block's water depth # Any blocks is an obstacle is marked with -1 # All other blocks are marked as 0 s = input () . split () for col in range ( cols ): if s [ col ] == \"X\" : grid [ row ][ col ] = - 1 elif s [ col ] == \".\" : grid [ row ][ col ] = 0 else : grid [ row ][ col ] = int ( s [ col ]) water_r = row water_c = col flood ( grid , water_r , water_c , depth , rows , cols ) # Result obtained, just convert it into the format requested by qn for row in range ( rows ): for col in range ( cols ): if grid [ row ][ col ] == 0 : print ( '.' , end = \" \" ) elif grid [ row ][ col ] == - 1 : print ( 'X' , end = \" \" ) else : print ( grid [ row ][ col ], end = \" \" ) print () Compare it to the more naive, less greedy approach below. Python3 Solution for depth-first approach def flood ( grid , r , c , depth , x , y ): # Recursive algorithm (function that calls itself). Function will continue to invoke itself until depth == 1. if depth == 1 : return for ( i , j ) in [( r - 1 , c ), ( r + 1 , c ), ( r , c - 1 ), ( r , c + 1 )]: if i < x and i >= 0 and j < y and j >= 0 \\ and grid [ i ][ j ] >= 0 and grid [ i ][ j ] < depth - 1 : # The surrounding / adjacent cells cannot have a depth that is more than 1 below the current cell. # Hence, if it is, change it to just 1 below current cell grid [ i ][ j ] = depth - 1 flood ( grid , i , j , depth - 1 , x , y ) rows , cols , depth = [ int ( i ) for i in input () . split ()] grid = [[ 0 ] * cols for _ in range ( rows )] water_r = 0 water_c = 0 # Convert '.' and 'X' to -1 and 0 first. If it is the source of water, just convert to int. for row in range ( rows ): s = input () . split () for col in range ( cols ): if s [ col ] == \"X\" : grid [ row ][ col ] = - 1 elif s [ col ] == \".\" : grid [ row ][ col ] = 0 else : grid [ row ][ col ] = int ( s [ col ]) water_r = row water_c = col flood ( grid , water_r , water_c , depth , rows , cols ) # Result obtained, just convert it into the format requested by qn for row in range ( rows ): for col in range ( cols ): if grid [ row ][ col ] == 0 : print ( '.' , end = \" \" ) elif grid [ row ][ col ] == - 1 : print ( 'X' , end = \" \" ) else : print ( grid [ row ][ col ], end = \" \" ) print ()","title":"A more efficient, greedy approach"},{"location":"Recess_Week_Challenge_Stuff/q4_sol/","text":"Q4: Solution and Afterthoughts \u00b6 Question 4 seems difficult at first, with so many variables to take into account. However, if you break down the problem and think through the problem logically, this problem is actually very simple to solve. There are in fact many ways to solve this problem, I will talk about the more straightforward approach. Naive Approach \u00b6 One naive approach is to start from zero food items, then add 1 food item at a time (we try all types of food every single iteration), and see if the number of resources required exceeds the amount of resources we have. If the number of resources are exceeded, we see if the current total number of hunger points that we have is larger than the max, and set the max hunger correspondingly. Python3 Solution for Naive Approach # x: num types of resources # y: num types of food # ress: resources count # hungers: amount of hunger for each food type # crafting: crafting resources for each food type x , y = [ int ( i ) for i in input () . split ()] crafting = [ None ] * y ress = [ int ( i ) for i in input () . split ()] hungers = [ int ( i ) for i in input () . split ()] crafting = [[ int ( i ) for i in input () . split ()] for j in range ( y )] # Key: Food combinations list, Value: Max hunger # Zero food restores zero hunger initialFoods = [ 0 ] * y initialRes = [ 0 ] * x largest = 0 # To store the largeest hunger so far def run ( currentFoods , currentRes , currentHunger ): global largest for foodType in range ( y ): # For each food type newFoods = currentFoods . copy () newFoods [ foodType ] += 1 newRes = [ currentRes [ resId ] + crafting [ foodType ][ resId ] for resId in range ( x )] if any ([ newRes [ resId ] > ress [ resId ] for resId in range ( x )]): # If adding this food type exceeds the number of resources we are given, ignore if currentHunger > largest : largest = currentHunger continue # Compute and save the hunger restored, using hunger from previous computation newHunger = currentHunger + hungers [ foodType ] # Continue trying to add food to get more hunger restored run ( newFoods , newRes , newHunger ) run ( initialFoods , initialRes , 0 ) print ( largest ) Problems with the Naive Approach \u00b6 This works ok for less complicated cases where the max number of resources, as well as the number of types of resources and types of food is not too big. But we realise that that the above algorithm isn't very smart. The best way to demonstrate this is through an example. Suppose we have 2 types of food, Food A and Food B, and a very large number of resources. This algorithm would first start off with adding 1 Food A. After some time, we would get to the point where we would try adding 1 Food B to the 1 Food A we already have, giving us both 1 of Food A and Food B. After we are done with this, the algorithm would move on, starting off with adding 1 Food B instead. Then, it will try to add 1 Food A to our 1 Food B, giving us both 1 of Food A and Food B, yet again. Basically, we are possibly computing the amount of resources aand hunger restored for 1 of both Food and Food B multiple times. Basically, we are trying to find the solution for the same subproblem multiple times. This gives us the Overlapping Subproblems property of this question. The Optimised Approach \u00b6 The overlapping subproblems property gives us the idea that we can use tabulation to help us avoid recalculating problems unnecessarily. Basically, we should store the result of every subproblem after we compute it, in some sort of data structure. At first, it seems like we could use a array, or nested arrays in particular to store the result of each subproblem. However, we soon realise the dimensions of this nested array can become very large, since it depends on the number of types of food there are. Instead, it may be easier to use a dictionary, using the tuple containing the number of each food type as a key. We modify the algorithm accordingly to include the table. Whenever we need to solve one of the subproblems for each combination of food, we check our dictionary to see if the subproblem has already been solved previously, and simply use that result if the subproblem has indeed been solved. Python3 Solution for Tabulation Approach # x: num types of resources # y: num types of food # ress: resources count # hungers: amount of hunger for each food type # crafting: crafting resources for each food type x , y = [ int ( i ) for i in input () . split ()] crafting = [ None ] * y ress = [ int ( i ) for i in input () . split ()] hungers = [ int ( i ) for i in input () . split ()] crafting = [[ int ( i ) for i in input () . split ()] for j in range ( y )] # Key: Food combinations list, Value: Max hunger # Dp: Stores hunger restored for each food combination # Zero food restores zero hunger dp = {} initialFoods = [ 0 ] * y initialRes = [ 0 ] * x dp [ tuple ( initialFoods )] = 0 def run ( currentFoods , currentRes , currentHunger ): for foodType in range ( y ): # For each food type newFoods = currentFoods . copy () newFoods [ foodType ] += 1 if ( tuple ( newFoods ) in dp . keys ()): # If the food combination has already been evaluated before, just return continue newRes = [ currentRes [ resId ] + crafting [ foodType ][ resId ] for resId in range ( x )] if any ([ newRes [ resId ] > ress [ resId ] for resId in range ( x )]): # If adding this food type exceeds the number of resources we are given, ignore continue # Compute and save the hunger restored, using hunger from previous computation newHunger = currentHunger + hungers [ foodType ] dp [ tuple ( newFoods )] = newHunger # Continue trying to add food to get more hunger restored run ( newFoods , newRes , newHunger ) run ( initialFoods , initialRes , 0 ) # Print the max hunger value in our dictionary print ( max ( dp . values ()))","title":"Q4 Solution"},{"location":"Recess_Week_Challenge_Stuff/q4_sol/#q4-solution-and-afterthoughts","text":"Question 4 seems difficult at first, with so many variables to take into account. However, if you break down the problem and think through the problem logically, this problem is actually very simple to solve. There are in fact many ways to solve this problem, I will talk about the more straightforward approach.","title":"Q4: Solution and Afterthoughts"},{"location":"Recess_Week_Challenge_Stuff/q4_sol/#naive-approach","text":"One naive approach is to start from zero food items, then add 1 food item at a time (we try all types of food every single iteration), and see if the number of resources required exceeds the amount of resources we have. If the number of resources are exceeded, we see if the current total number of hunger points that we have is larger than the max, and set the max hunger correspondingly. Python3 Solution for Naive Approach # x: num types of resources # y: num types of food # ress: resources count # hungers: amount of hunger for each food type # crafting: crafting resources for each food type x , y = [ int ( i ) for i in input () . split ()] crafting = [ None ] * y ress = [ int ( i ) for i in input () . split ()] hungers = [ int ( i ) for i in input () . split ()] crafting = [[ int ( i ) for i in input () . split ()] for j in range ( y )] # Key: Food combinations list, Value: Max hunger # Zero food restores zero hunger initialFoods = [ 0 ] * y initialRes = [ 0 ] * x largest = 0 # To store the largeest hunger so far def run ( currentFoods , currentRes , currentHunger ): global largest for foodType in range ( y ): # For each food type newFoods = currentFoods . copy () newFoods [ foodType ] += 1 newRes = [ currentRes [ resId ] + crafting [ foodType ][ resId ] for resId in range ( x )] if any ([ newRes [ resId ] > ress [ resId ] for resId in range ( x )]): # If adding this food type exceeds the number of resources we are given, ignore if currentHunger > largest : largest = currentHunger continue # Compute and save the hunger restored, using hunger from previous computation newHunger = currentHunger + hungers [ foodType ] # Continue trying to add food to get more hunger restored run ( newFoods , newRes , newHunger ) run ( initialFoods , initialRes , 0 ) print ( largest )","title":"Naive Approach"},{"location":"Recess_Week_Challenge_Stuff/q4_sol/#problems-with-the-naive-approach","text":"This works ok for less complicated cases where the max number of resources, as well as the number of types of resources and types of food is not too big. But we realise that that the above algorithm isn't very smart. The best way to demonstrate this is through an example. Suppose we have 2 types of food, Food A and Food B, and a very large number of resources. This algorithm would first start off with adding 1 Food A. After some time, we would get to the point where we would try adding 1 Food B to the 1 Food A we already have, giving us both 1 of Food A and Food B. After we are done with this, the algorithm would move on, starting off with adding 1 Food B instead. Then, it will try to add 1 Food A to our 1 Food B, giving us both 1 of Food A and Food B, yet again. Basically, we are possibly computing the amount of resources aand hunger restored for 1 of both Food and Food B multiple times. Basically, we are trying to find the solution for the same subproblem multiple times. This gives us the Overlapping Subproblems property of this question.","title":"Problems with the Naive Approach"},{"location":"Recess_Week_Challenge_Stuff/q4_sol/#the-optimised-approach","text":"The overlapping subproblems property gives us the idea that we can use tabulation to help us avoid recalculating problems unnecessarily. Basically, we should store the result of every subproblem after we compute it, in some sort of data structure. At first, it seems like we could use a array, or nested arrays in particular to store the result of each subproblem. However, we soon realise the dimensions of this nested array can become very large, since it depends on the number of types of food there are. Instead, it may be easier to use a dictionary, using the tuple containing the number of each food type as a key. We modify the algorithm accordingly to include the table. Whenever we need to solve one of the subproblems for each combination of food, we check our dictionary to see if the subproblem has already been solved previously, and simply use that result if the subproblem has indeed been solved. Python3 Solution for Tabulation Approach # x: num types of resources # y: num types of food # ress: resources count # hungers: amount of hunger for each food type # crafting: crafting resources for each food type x , y = [ int ( i ) for i in input () . split ()] crafting = [ None ] * y ress = [ int ( i ) for i in input () . split ()] hungers = [ int ( i ) for i in input () . split ()] crafting = [[ int ( i ) for i in input () . split ()] for j in range ( y )] # Key: Food combinations list, Value: Max hunger # Dp: Stores hunger restored for each food combination # Zero food restores zero hunger dp = {} initialFoods = [ 0 ] * y initialRes = [ 0 ] * x dp [ tuple ( initialFoods )] = 0 def run ( currentFoods , currentRes , currentHunger ): for foodType in range ( y ): # For each food type newFoods = currentFoods . copy () newFoods [ foodType ] += 1 if ( tuple ( newFoods ) in dp . keys ()): # If the food combination has already been evaluated before, just return continue newRes = [ currentRes [ resId ] + crafting [ foodType ][ resId ] for resId in range ( x )] if any ([ newRes [ resId ] > ress [ resId ] for resId in range ( x )]): # If adding this food type exceeds the number of resources we are given, ignore continue # Compute and save the hunger restored, using hunger from previous computation newHunger = currentHunger + hungers [ foodType ] dp [ tuple ( newFoods )] = newHunger # Continue trying to add food to get more hunger restored run ( newFoods , newRes , newHunger ) run ( initialFoods , initialRes , 0 ) # Print the max hunger value in our dictionary print ( max ( dp . values ()))","title":"The Optimised Approach"},{"location":"Recess_Week_Challenge_Stuff/q5_hints/","text":"Final Question Hints \u00b6 Try to use hints only when you really need help! The hints are arranged in order. Hint 1 You may find Dynamic Programming to be useful. It is up to you to find out how to use it. (Read the basic concepts section).","title":"Q5 Hints"},{"location":"Recess_Week_Challenge_Stuff/q5_hints/#final-question-hints","text":"Try to use hints only when you really need help! The hints are arranged in order. Hint 1 You may find Dynamic Programming to be useful. It is up to you to find out how to use it. (Read the basic concepts section).","title":"Final Question Hints"},{"location":"Recess_Week_Challenge_Stuff/recess_week_challenge/","text":"Recess Week Challenge 2020: A Minecraft Story \u00b6 Last updated: 19/10/2020 3DC Recess Week Challenge is a great way to kill off spare time, or to learn a new skill during this recess week! Follow through our Minecraft-themed story to learn to do some basic coding, solve algorithm questions, try out your hand at deploying a cloud-based web application, compete in a time-based coding challenge and win prizes! Timeline \u00b6 The 3DC recess week challenge comprises three main parts: Cloud-based lab to deploy a simple web application with REST API (24/10/20) Daily Hackerrank own-time-own-target coding challenge (26/10/20 - 28/10/20) Time-based coding challenge on Hackerrank (30/10/20) You do not have to complete the challenges or labs on the day they are released. Just submit them before the deadline on 31/10/20 1500 (Saturday). However, those who complete the time-based coding challenge faster will rank higher, so try to start working on that challenge as soon as it is released! Prizes \u00b6 1 st Place : Raspberry Pi Model 4B+ 4GB RAM Prize for Top 5 Freshmore Students : $5 GrabFood Voucher each Prize for Top 5 Non-ISTD Pillar-Year Students : $5 GrabFood Voucher each Prize for Top 5 ISTD Students : $5 GrabFood Voucher each Registration and Links \u00b6 Register for the challenge here . Check out the leaderboard, or submit your cloud-based lab over here . All links to the 3DC challenges will be posted here. Challenge Difficulty Release Date Points Teaser Challenge: Steve and Sheep Medium 23/10/20 (Friday) N/A Cloud-based Lab: Sheep-as-a-Service Medium 24/10/20 (Saturday) 20:00 200 Hackerrank Challenge 1: Steve's Wheat Farm Challenging 26/10/20 (Monday) 09:00 100 Hackerrank Challenge 2: Steve vs Prof Oka! Easy 27/10/20 (Tuesday) 09:00 100 Hackerrank Challenge 3: Irritgating Steve Medium 28/10/20 (Wednesday) 09:00 100 Hackerrank Timed Challenge: Enderdragon Fight! Hard 30/10/20 (Friday) 14:30 200 Scoring Guidelines \u00b6 Both the Hackerrank non-timed and timed challenges will be graded by Hackerrank's automated scoring system. The Cloud-based challenge will be graded automatically. Please use this link to test your website. Placement is graded based on total score. In the event of a tie, timing for the hackerrank timed challenge will be used as a tiebreaker.","title":"Challenge Introduction"},{"location":"Recess_Week_Challenge_Stuff/recess_week_challenge/#recess-week-challenge-2020-a-minecraft-story","text":"Last updated: 19/10/2020 3DC Recess Week Challenge is a great way to kill off spare time, or to learn a new skill during this recess week! Follow through our Minecraft-themed story to learn to do some basic coding, solve algorithm questions, try out your hand at deploying a cloud-based web application, compete in a time-based coding challenge and win prizes!","title":"Recess Week Challenge 2020: A Minecraft Story"},{"location":"Recess_Week_Challenge_Stuff/recess_week_challenge/#timeline","text":"The 3DC recess week challenge comprises three main parts: Cloud-based lab to deploy a simple web application with REST API (24/10/20) Daily Hackerrank own-time-own-target coding challenge (26/10/20 - 28/10/20) Time-based coding challenge on Hackerrank (30/10/20) You do not have to complete the challenges or labs on the day they are released. Just submit them before the deadline on 31/10/20 1500 (Saturday). However, those who complete the time-based coding challenge faster will rank higher, so try to start working on that challenge as soon as it is released!","title":"Timeline"},{"location":"Recess_Week_Challenge_Stuff/recess_week_challenge/#prizes","text":"1 st Place : Raspberry Pi Model 4B+ 4GB RAM Prize for Top 5 Freshmore Students : $5 GrabFood Voucher each Prize for Top 5 Non-ISTD Pillar-Year Students : $5 GrabFood Voucher each Prize for Top 5 ISTD Students : $5 GrabFood Voucher each","title":"Prizes"},{"location":"Recess_Week_Challenge_Stuff/recess_week_challenge/#registration-and-links","text":"Register for the challenge here . Check out the leaderboard, or submit your cloud-based lab over here . All links to the 3DC challenges will be posted here. Challenge Difficulty Release Date Points Teaser Challenge: Steve and Sheep Medium 23/10/20 (Friday) N/A Cloud-based Lab: Sheep-as-a-Service Medium 24/10/20 (Saturday) 20:00 200 Hackerrank Challenge 1: Steve's Wheat Farm Challenging 26/10/20 (Monday) 09:00 100 Hackerrank Challenge 2: Steve vs Prof Oka! Easy 27/10/20 (Tuesday) 09:00 100 Hackerrank Challenge 3: Irritgating Steve Medium 28/10/20 (Wednesday) 09:00 100 Hackerrank Timed Challenge: Enderdragon Fight! Hard 30/10/20 (Friday) 14:30 200","title":"Registration and Links"},{"location":"Recess_Week_Challenge_Stuff/recess_week_challenge/#scoring-guidelines","text":"Both the Hackerrank non-timed and timed challenges will be graded by Hackerrank's automated scoring system. The Cloud-based challenge will be graded automatically. Please use this link to test your website. Placement is graded based on total score. In the event of a tie, timing for the hackerrank timed challenge will be used as a tiebreaker.","title":"Scoring Guidelines"},{"location":"Recess_Week_Challenge_Stuff/teaser_hints/","text":"Teaser Hints \u00b6 Try to use hints only when you really need help! The hints are arranged in order. Hint 1 This looks like a sorting problem. It might help to understand what sorting algorithms are out there. You can compare the speed of the algorithms by looking at their time complexities. Insertion Sort Merge Sort Quick Sort Heap Sort But wait! There might be better solutions! Many programming languages actually have their own standard implementations to help you to sort lists! Programming Language Implementation Python list.sort() or sorted() C++ std::sort from algorithm standard library Java Collections.sort() The real problem is these standard implementations usually only sort single numbers, but we have to sort a tuple of r, g and b... is there some way around that? Hint 2 Consider the followings notes/questions: Usually sorting allows us to sort lists of single numbers Is it possible to convert the tuple for r, g and b into a form that is more friendly for sorting? Or perhaps do the standard implementations allow you to use your own method to compare between two elements? Hint 3 Consider the following questions: Is there a way to combine r, g and b into a single number? (Maybe some arithmetic? Addition?) But how do we combine them in such a way that we can get the exact same r, g and b values back after sorting? Maybe we can think about how we can combine them to a number that reflects the relative importance of each colour component (i.e. r is more important than g and b)?","title":"Teaser Hints"},{"location":"Recess_Week_Challenge_Stuff/teaser_hints/#teaser-hints","text":"Try to use hints only when you really need help! The hints are arranged in order. Hint 1 This looks like a sorting problem. It might help to understand what sorting algorithms are out there. You can compare the speed of the algorithms by looking at their time complexities. Insertion Sort Merge Sort Quick Sort Heap Sort But wait! There might be better solutions! Many programming languages actually have their own standard implementations to help you to sort lists! Programming Language Implementation Python list.sort() or sorted() C++ std::sort from algorithm standard library Java Collections.sort() The real problem is these standard implementations usually only sort single numbers, but we have to sort a tuple of r, g and b... is there some way around that? Hint 2 Consider the followings notes/questions: Usually sorting allows us to sort lists of single numbers Is it possible to convert the tuple for r, g and b into a form that is more friendly for sorting? Or perhaps do the standard implementations allow you to use your own method to compare between two elements? Hint 3 Consider the following questions: Is there a way to combine r, g and b into a single number? (Maybe some arithmetic? Addition?) But how do we combine them in such a way that we can get the exact same r, g and b values back after sorting? Maybe we can think about how we can combine them to a number that reflects the relative importance of each colour component (i.e. r is more important than g and b)?","title":"Teaser Hints"},{"location":"Recess_Week_Challenge_Stuff/teaser_sols/","text":"Teaser Solutions (SPOILER!) \u00b6 This page shows the solutions for the teaser problem. If you that is not what you intended, turn back now! Time complexity: O(n*log(n)) for n = Number of Sheep This question is quite obviously a sorting problem. We just need to sort the sheep according to which is more red, then more blue, then more green. For many programming languages, there are well-established sorting functions for lists (they usually have well-established methods for common tasks). The main problem most sorting functions sort only single numbers (or is it?), whereas we have a tuple \\((r, g, b)\\) . Converting the tuple to a single number \u00b6 A simple approach is to simply flatten the tuple \\((r, g, b)\\) into a single number. We can convert the rgb value to be a 3-digit base-256 number (usually our numbers are in base-10). We can use this base-256 number to also represent the relative importances of \\(r\\) , \\(g\\) and \\(b\\) . Since \\(b\\) is the least important, we take it to be the 1 st digit of the base-256 number Since \\(g\\) is the 2 nd most important, we take it to be the 2 nd digit of the base-256 number Since \\(r\\) is the most important, we take it to be the 3 rd digit of the base-256 number To perform the conversion, we can just simply do \\(rgb = 256*256*r + 256*g + b\\) . After converting to the base-256 number, we can just use the standard sort functions to sort our tuple. However, we need to remember to convert the base-256 number back to \\((r, g, b)\\) format for printing out the result. Thats not too difficult, we can do \\(r = sheep \\div (256 * 256))\\) \\(g = (sheep \\mod (256 * 256)) \\div 256)\\) \\(b = sheep \\mod 256\\) Python3 Solution for Tuple Conversion (List) s = int ( input ()) sheeps = [] for i in range ( s ): [ r , g , b ] = input () . split () sheeps . append ( 256 * 256 * int ( r ) + 256 * int ( g ) + int ( b )) sheeps . sort ( reverse = True ) for sheep in sheeps : r = int ( sheep / ( 256 * 256 )) g = int ( sheep % ( 256 * 256 ) / 256 ) b = int ( sheep % 256 ) print ( r , g , b ) C++14 Solution for Tuple Conversion (List) #include <algorithm> #include <iostream> #include <vector> int main () { int s ; std :: cin >> s ; std :: vector < int > sheeps ( s ); for ( auto it { sheeps . begin () }; it != sheeps . end () ; ++ it ) { int r , g , b ; std :: cin >> r >> g >> b ; int rgb { 256 * 256 * r + 256 * g + b }; * it = rgb ; } std :: sort ( sheeps . begin (), sheeps . end ()); for ( auto it { sheeps . rbegin () }; it != sheeps . rend (); ++ it ) { int r { * it / ( 256 * 256 ) }; int g { * it % ( 256 * 256 ) / 256 }; int b { * it % 256 }; std :: cout << r << ' ' << g << ' ' << b << '\\n' ; } } Python3 Solution for Tuple Conversion (Dictionary) s = int ( input ()) sheeps = {} for i in range ( s ): [ r , g , b ] = input () . split () rgb = 256 * 256 * int ( r ) + 256 * int ( g ) + int ( b ) if rgb not in sheeps : sheeps [ rgb ] = 1 else : sheeps [ rgb ] += 1 for rgb , count in sorted ( sheeps . items (), reverse = True ): r = int ( rgb / ( 256 * 256 )) g = int ( rgb % ( 256 * 256 ) / 256 ) b = int ( rgb % 256 ) for i in range ( count ): print ( r , g , b ) C++14 Solution for Tuple Conversion (Hashmap) #include <algorithm> #include <iostream> #include <vector> int main () { int s ; std :: cin >> s ; std :: vector < int > sheeps ( s ); for ( auto it { sheeps . begin () }; it != sheeps . end () ; ++ it ) { int r , g , b ; std :: cin >> r >> g >> b ; int rgb { 256 * 256 * r + 256 * g + b }; * it = rgb ; } std :: sort ( sheeps . begin (), sheeps . end ()); for ( auto it { sheeps . rbegin () }; it != sheeps . rend (); ++ it ) { int r { * it / ( 256 * 256 ) }; int g { * it % ( 256 * 256 ) / 256 }; int b { * it % 256 }; std :: cout << r << ' ' << g << ' ' << b << '\\n' ; } } Custom Comparators \u00b6 If we look closely, most sorting functions allow you to use a custom comparator to compare two elements in a list. So we can simply do that. Also, most sorting functions allow you to reverse the sorting direction. Or you could just iterate from the back of the list so that we get the larger numbers first. Python3 Solution for Custom Comparator from operator import itemgetter s = int ( input ()) sheeps = [] for i in range ( s ): [ r , g , b ] = input () . split () sheeps . append (( int ( r ), int ( g ), int ( b ))) # Add our r, g and b values into a list of tuples # itemgetter allows us to sort by the first element first, then the second element # then the third element # reverse=True reverse the direction of the sort of the list for rgb in sorted ( sheeps , key = itemgetter ( 0 , 1 , 2 ), reverse = True ): r , g , b = rgb print ( r , g , b ) C++14 Solution for Custom Comparator #include <array> #include <algorithm> #include <iostream> #include <vector> // Custom function to compare our r, g, b values stored in an array // Function will have to return true if first element is smaller(less r, g or b) than second element // Return false otherwise bool cmp ( const std :: array < int , 3 >& a , const std :: array < int , 3 >& b ) { if ( a . at ( 0 ) > b . at ( 0 )) // If first element has more red { return false ; } else if ( a . at ( 1 ) > b . at ( 1 ) && a . at ( 0 ) == b . at ( 0 )) // If equally red, but first is more green { return false ; } else if ( a . at ( 2 ) >= b . at ( 2 ) && a . at ( 0 ) == b . at ( 0 ) && a . at ( 1 ) == b . at ( 1 )) // If equally red and green, but first is more or equally blue { return false ; } else // first element now has to be more red/green/blue than other element { return true ; } } int main () { int s ; std :: cin >> s ; std :: vector < std :: array < int , 3 >> sheeps ( s ); // Create a vector of size s to hold our rgb array for ( auto it { sheeps . begin () }; it != sheeps . end () ; ++ it ) { // Iterate through vector and assign each vector element to an array int r , g , b ; std :: cin >> r >> g >> b ; // Read our r, g, b values from input * it = std :: array < int , 3 > { r , g , b }; // Store r, g, b values into array } std :: sort ( sheeps . begin (), sheeps . end (), cmp ); // Sort vector using our custom comparator for ( auto it { sheeps . rbegin () }; it != sheeps . rend (); ++ it ) { // Iterate from the back which has sheep with larger r, g, b values // Then extract our r, g and b values and print them int r { it -> at ( 0 ) }; int g { it -> at ( 1 ) }; int b { it -> at ( 2 ) }; std :: cout << r << ' ' << g << ' ' << b << '\\n' ; } }","title":"Teaser Solution"},{"location":"Recess_Week_Challenge_Stuff/teaser_sols/#teaser-solutions-spoiler","text":"This page shows the solutions for the teaser problem. If you that is not what you intended, turn back now! Time complexity: O(n*log(n)) for n = Number of Sheep This question is quite obviously a sorting problem. We just need to sort the sheep according to which is more red, then more blue, then more green. For many programming languages, there are well-established sorting functions for lists (they usually have well-established methods for common tasks). The main problem most sorting functions sort only single numbers (or is it?), whereas we have a tuple \\((r, g, b)\\) .","title":"Teaser Solutions (SPOILER!)"},{"location":"Recess_Week_Challenge_Stuff/teaser_sols/#converting-the-tuple-to-a-single-number","text":"A simple approach is to simply flatten the tuple \\((r, g, b)\\) into a single number. We can convert the rgb value to be a 3-digit base-256 number (usually our numbers are in base-10). We can use this base-256 number to also represent the relative importances of \\(r\\) , \\(g\\) and \\(b\\) . Since \\(b\\) is the least important, we take it to be the 1 st digit of the base-256 number Since \\(g\\) is the 2 nd most important, we take it to be the 2 nd digit of the base-256 number Since \\(r\\) is the most important, we take it to be the 3 rd digit of the base-256 number To perform the conversion, we can just simply do \\(rgb = 256*256*r + 256*g + b\\) . After converting to the base-256 number, we can just use the standard sort functions to sort our tuple. However, we need to remember to convert the base-256 number back to \\((r, g, b)\\) format for printing out the result. Thats not too difficult, we can do \\(r = sheep \\div (256 * 256))\\) \\(g = (sheep \\mod (256 * 256)) \\div 256)\\) \\(b = sheep \\mod 256\\) Python3 Solution for Tuple Conversion (List) s = int ( input ()) sheeps = [] for i in range ( s ): [ r , g , b ] = input () . split () sheeps . append ( 256 * 256 * int ( r ) + 256 * int ( g ) + int ( b )) sheeps . sort ( reverse = True ) for sheep in sheeps : r = int ( sheep / ( 256 * 256 )) g = int ( sheep % ( 256 * 256 ) / 256 ) b = int ( sheep % 256 ) print ( r , g , b ) C++14 Solution for Tuple Conversion (List) #include <algorithm> #include <iostream> #include <vector> int main () { int s ; std :: cin >> s ; std :: vector < int > sheeps ( s ); for ( auto it { sheeps . begin () }; it != sheeps . end () ; ++ it ) { int r , g , b ; std :: cin >> r >> g >> b ; int rgb { 256 * 256 * r + 256 * g + b }; * it = rgb ; } std :: sort ( sheeps . begin (), sheeps . end ()); for ( auto it { sheeps . rbegin () }; it != sheeps . rend (); ++ it ) { int r { * it / ( 256 * 256 ) }; int g { * it % ( 256 * 256 ) / 256 }; int b { * it % 256 }; std :: cout << r << ' ' << g << ' ' << b << '\\n' ; } } Python3 Solution for Tuple Conversion (Dictionary) s = int ( input ()) sheeps = {} for i in range ( s ): [ r , g , b ] = input () . split () rgb = 256 * 256 * int ( r ) + 256 * int ( g ) + int ( b ) if rgb not in sheeps : sheeps [ rgb ] = 1 else : sheeps [ rgb ] += 1 for rgb , count in sorted ( sheeps . items (), reverse = True ): r = int ( rgb / ( 256 * 256 )) g = int ( rgb % ( 256 * 256 ) / 256 ) b = int ( rgb % 256 ) for i in range ( count ): print ( r , g , b ) C++14 Solution for Tuple Conversion (Hashmap) #include <algorithm> #include <iostream> #include <vector> int main () { int s ; std :: cin >> s ; std :: vector < int > sheeps ( s ); for ( auto it { sheeps . begin () }; it != sheeps . end () ; ++ it ) { int r , g , b ; std :: cin >> r >> g >> b ; int rgb { 256 * 256 * r + 256 * g + b }; * it = rgb ; } std :: sort ( sheeps . begin (), sheeps . end ()); for ( auto it { sheeps . rbegin () }; it != sheeps . rend (); ++ it ) { int r { * it / ( 256 * 256 ) }; int g { * it % ( 256 * 256 ) / 256 }; int b { * it % 256 }; std :: cout << r << ' ' << g << ' ' << b << '\\n' ; } }","title":"Converting the tuple to a single number"},{"location":"Recess_Week_Challenge_Stuff/teaser_sols/#custom-comparators","text":"If we look closely, most sorting functions allow you to use a custom comparator to compare two elements in a list. So we can simply do that. Also, most sorting functions allow you to reverse the sorting direction. Or you could just iterate from the back of the list so that we get the larger numbers first. Python3 Solution for Custom Comparator from operator import itemgetter s = int ( input ()) sheeps = [] for i in range ( s ): [ r , g , b ] = input () . split () sheeps . append (( int ( r ), int ( g ), int ( b ))) # Add our r, g and b values into a list of tuples # itemgetter allows us to sort by the first element first, then the second element # then the third element # reverse=True reverse the direction of the sort of the list for rgb in sorted ( sheeps , key = itemgetter ( 0 , 1 , 2 ), reverse = True ): r , g , b = rgb print ( r , g , b ) C++14 Solution for Custom Comparator #include <array> #include <algorithm> #include <iostream> #include <vector> // Custom function to compare our r, g, b values stored in an array // Function will have to return true if first element is smaller(less r, g or b) than second element // Return false otherwise bool cmp ( const std :: array < int , 3 >& a , const std :: array < int , 3 >& b ) { if ( a . at ( 0 ) > b . at ( 0 )) // If first element has more red { return false ; } else if ( a . at ( 1 ) > b . at ( 1 ) && a . at ( 0 ) == b . at ( 0 )) // If equally red, but first is more green { return false ; } else if ( a . at ( 2 ) >= b . at ( 2 ) && a . at ( 0 ) == b . at ( 0 ) && a . at ( 1 ) == b . at ( 1 )) // If equally red and green, but first is more or equally blue { return false ; } else // first element now has to be more red/green/blue than other element { return true ; } } int main () { int s ; std :: cin >> s ; std :: vector < std :: array < int , 3 >> sheeps ( s ); // Create a vector of size s to hold our rgb array for ( auto it { sheeps . begin () }; it != sheeps . end () ; ++ it ) { // Iterate through vector and assign each vector element to an array int r , g , b ; std :: cin >> r >> g >> b ; // Read our r, g, b values from input * it = std :: array < int , 3 > { r , g , b }; // Store r, g, b values into array } std :: sort ( sheeps . begin (), sheeps . end (), cmp ); // Sort vector using our custom comparator for ( auto it { sheeps . rbegin () }; it != sheeps . rend (); ++ it ) { // Iterate from the back which has sheep with larger r, g, b values // Then extract our r, g and b values and print them int r { it -> at ( 0 ) }; int g { it -> at ( 1 ) }; int b { it -> at ( 2 ) }; std :: cout << r << ' ' << g << ' ' << b << '\\n' ; } }","title":"Custom Comparators"},{"location":"Workshops/workshop_guide/","text":"Guide to Host Your First Workshop with 3DC \u00b6 Hello friend, since you are reading this, I suppose you want to find out how to host your own workshop with the help and support from 3DC. Don't worry, it is not hard to get started. Generally, things should to be determined from the start: Topic (Anything! Technical / Non-technical) Scope (Rough) Intended Audience (Beginners / Experienced / Advanced) Event Type (Workshop / Lecture / Sharing) Date of Event (Rough) You can think about above items on your own and then share your plan with us (3DC), but if you have any doubts about what might be suitable for your workshop, feel free to talk to us even without having answers to the above items, we can discuss them together. So after you have the scope of the workshop planned out, you can start to prepare for you workshop material and we can work on administrative stuff together. For workshop material: We usually open source all of our materials (slides, notes, sample code etc) on GitHub. For hands-on workshops, it is important to prepare a pre-workshop material for your audience if any software installation/ environment setup is required for your hands-on activity. Pre-workshop material can be used to get everyone on the same page as well by presenting background information/ foundation knowledge. If would be best if you can get all of the materials ready on GitHub before the actual date of event, so we can send the link to the attendees via email before the event. Format of releasing materials: .md (MarkDown) for main materials & notes, .pdf for slides, and source code (if any). For admin & publicity: Ideally, workshop should be planned 2-month ahead , because any event to be hosted in SUTD needs to submit Event Proposal 1-month prior to the actual date of event. Before Event: Event Proposal will be drafted and submitted by 3DC on behalf of you, and you will be the person-in-charge and the \"Workshop Director\" for this event. TA recruitment. 3DC will work with you on event publicity, which includes: Email (e-Poster) Website Social Media (3DC instagram etc) During Event: Recording / streaming TA Moderation After Event: Feedback form Post-workshop review AAR Submission","title":"Workshop Organizer Guide"},{"location":"Workshops/workshop_guide/#guide-to-host-your-first-workshop-with-3dc","text":"Hello friend, since you are reading this, I suppose you want to find out how to host your own workshop with the help and support from 3DC. Don't worry, it is not hard to get started. Generally, things should to be determined from the start: Topic (Anything! Technical / Non-technical) Scope (Rough) Intended Audience (Beginners / Experienced / Advanced) Event Type (Workshop / Lecture / Sharing) Date of Event (Rough) You can think about above items on your own and then share your plan with us (3DC), but if you have any doubts about what might be suitable for your workshop, feel free to talk to us even without having answers to the above items, we can discuss them together. So after you have the scope of the workshop planned out, you can start to prepare for you workshop material and we can work on administrative stuff together. For workshop material: We usually open source all of our materials (slides, notes, sample code etc) on GitHub. For hands-on workshops, it is important to prepare a pre-workshop material for your audience if any software installation/ environment setup is required for your hands-on activity. Pre-workshop material can be used to get everyone on the same page as well by presenting background information/ foundation knowledge. If would be best if you can get all of the materials ready on GitHub before the actual date of event, so we can send the link to the attendees via email before the event. Format of releasing materials: .md (MarkDown) for main materials & notes, .pdf for slides, and source code (if any). For admin & publicity: Ideally, workshop should be planned 2-month ahead , because any event to be hosted in SUTD needs to submit Event Proposal 1-month prior to the actual date of event. Before Event: Event Proposal will be drafted and submitted by 3DC on behalf of you, and you will be the person-in-charge and the \"Workshop Director\" for this event. TA recruitment. 3DC will work with you on event publicity, which includes: Email (e-Poster) Website Social Media (3DC instagram etc) During Event: Recording / streaming TA Moderation After Event: Feedback form Post-workshop review AAR Submission","title":"Guide to Host Your First Workshop with 3DC"},{"location":"Workshops/2020/past_workshops/","text":"Past Workshops \u00b6 Introduction to Python and Programming Workshop \u00b6 Target Audience: All Freshmore students who aren't comfortable with Python or with no prior programming experience. Prerequisite: None Session Dates: S1: Introduction to Programming & Python Basics Date: 27 th October 2020 (Tuesday of Week 7) (Recess week) Time: 1.30 - 4.30 PM (3 hours) S2: More on Python Programming Date: 12 th November 2020 (Thursday of Week 9) Time: 7.00 - 9.00 PM (2 hours) S3: Python Programming & Review for Computational Thinking for Design Date: 26 th November 2020 (Thursday of Week 11) Time: 7.00 - 9.00 PM (2 hours) Delivering Format: Hybrid (Offline + Online concurrently) Physical venue: SUTD i3 Lab (Building 1, Level 6) (With 20 ppl cap, only open for SUTD Freshmore & Hostel Residents) Virtual venue: YouTube or/and Twitch Stream Introduction to ReactJS and Web Development Workshop \u00b6 Target Audience: Beginners in web development. Prerequisite: Basic knowledge on Dictionary , List , Functions , Loops . Date: 26 th October 2020 , Monday of Week 7 (Recess week) Time: 3.00 - 5.00 PM (2 hours) Instructor: Bryce (Class of 2024)","title":"Past Workshops"},{"location":"Workshops/2020/past_workshops/#past-workshops","text":"","title":"Past Workshops"},{"location":"Workshops/2020/past_workshops/#introduction-to-python-and-programming-workshop","text":"Target Audience: All Freshmore students who aren't comfortable with Python or with no prior programming experience. Prerequisite: None Session Dates: S1: Introduction to Programming & Python Basics Date: 27 th October 2020 (Tuesday of Week 7) (Recess week) Time: 1.30 - 4.30 PM (3 hours) S2: More on Python Programming Date: 12 th November 2020 (Thursday of Week 9) Time: 7.00 - 9.00 PM (2 hours) S3: Python Programming & Review for Computational Thinking for Design Date: 26 th November 2020 (Thursday of Week 11) Time: 7.00 - 9.00 PM (2 hours) Delivering Format: Hybrid (Offline + Online concurrently) Physical venue: SUTD i3 Lab (Building 1, Level 6) (With 20 ppl cap, only open for SUTD Freshmore & Hostel Residents) Virtual venue: YouTube or/and Twitch Stream","title":"Introduction to Python and Programming Workshop"},{"location":"Workshops/2020/past_workshops/#introduction-to-reactjs-and-web-development-workshop","text":"Target Audience: Beginners in web development. Prerequisite: Basic knowledge on Dictionary , List , Functions , Loops . Date: 26 th October 2020 , Monday of Week 7 (Recess week) Time: 3.00 - 5.00 PM (2 hours) Instructor: Bryce (Class of 2024)","title":"Introduction to ReactJS and Web Development Workshop"},{"location":"Workshops/2021/blockchain_dev_workshop/","text":"Blockchain Development Workshop 2021 \u00b6","title":"Blockchain Development"},{"location":"Workshops/2021/blockchain_dev_workshop/#blockchain-development-workshop-2021","text":"","title":"Blockchain Development Workshop 2021"},{"location":"Workshops/2021/intro_to_programming/","text":"Introduction to Programming 2021 \u00b6 Information Hey Early-matriculated class of 2025, Welcome! \u00b6 We prepared this workshop series just for you. Workshop Registration Workshop Content Session Dates & Time Workshop Materials Workshop Recordings For above information, please visit 3dc.opensutd.org/Introduction_to_Programming .","title":"Intro to Programming"},{"location":"Workshops/2021/intro_to_programming/#introduction-to-programming-2021","text":"Information","title":"Introduction to Programming 2021"},{"location":"Workshops/2021/intro_to_programming/#hey-early-matriculated-class-of-2025-welcome","text":"We prepared this workshop series just for you. Workshop Registration Workshop Content Session Dates & Time Workshop Materials Workshop Recordings For above information, please visit 3dc.opensutd.org/Introduction_to_Programming .","title":"Hey Early-matriculated class of 2025, Welcome!"},{"location":"gtc/android/android/","text":"Android IAP 2020 Workshop Introduction \u00b6 Welcome to 3DC's Android Workshop for 2021! On this website you will find resources and information related to the workshop. For updates, join our Telegram group: https://t.me/joinchat/Gg0Am6Xg2W9yAxuO Stream Link: Please join the Microsoft Teams Group , we will be streaming our sessions there. Instructors: \u00b6 Jason Chow Naomi Kong-Vega Oei Kai Xun Schedule \u00b6 Before the workshop begins, do take a look at the pre-reading material (can be found on the left navigation bar). The material will guide you through installing Android Studio and some Java Basics. Session 1 (11 Jan Monday, 2pm-6pm): Android Fundamentals. Participants will learn the fundamentals of the architecture underlying an Android application. They will learn how to create UI elements and how to create interactions between the user and these elements. Full completed project for Session 1: https://github.com/3DCdsc/AndroidIAP2021 Session 2 (12 Jan Tuesday, 2pm-6pm): App Interactivity. Participants will learn how to add deeper online integrations into their application with Firebase Auth and Realtime Database and Storage Full completed project for Session 2: https://github.com/3DCdsc/AndroidIAP2021/tree/day2 Note for Session 2 Project downloaders: I strongly recommend you to use this project only for reference, because to get this project to work, you will also need to go through all the Firebase Console steps still. You will also need to download google-services.json into your project's app folder. Note: If you use git to clone Session 2, remember to switch to the day2 branch. Resources \u00b6 Refer to the navigation bar on the left for resources VODS \u00b6 Session 1 \u00b6 Session 2 \u00b6","title":"Introduction"},{"location":"gtc/android/android/#android-iap-2020-workshop-introduction","text":"Welcome to 3DC's Android Workshop for 2021! On this website you will find resources and information related to the workshop. For updates, join our Telegram group: https://t.me/joinchat/Gg0Am6Xg2W9yAxuO Stream Link: Please join the Microsoft Teams Group , we will be streaming our sessions there.","title":"Android IAP 2020 Workshop Introduction"},{"location":"gtc/android/android/#instructors","text":"Jason Chow Naomi Kong-Vega Oei Kai Xun","title":"Instructors:"},{"location":"gtc/android/android/#schedule","text":"Before the workshop begins, do take a look at the pre-reading material (can be found on the left navigation bar). The material will guide you through installing Android Studio and some Java Basics. Session 1 (11 Jan Monday, 2pm-6pm): Android Fundamentals. Participants will learn the fundamentals of the architecture underlying an Android application. They will learn how to create UI elements and how to create interactions between the user and these elements. Full completed project for Session 1: https://github.com/3DCdsc/AndroidIAP2021 Session 2 (12 Jan Tuesday, 2pm-6pm): App Interactivity. Participants will learn how to add deeper online integrations into their application with Firebase Auth and Realtime Database and Storage Full completed project for Session 2: https://github.com/3DCdsc/AndroidIAP2021/tree/day2 Note for Session 2 Project downloaders: I strongly recommend you to use this project only for reference, because to get this project to work, you will also need to go through all the Firebase Console steps still. You will also need to download google-services.json into your project's app folder. Note: If you use git to clone Session 2, remember to switch to the day2 branch.","title":"Schedule"},{"location":"gtc/android/android/#resources","text":"Refer to the navigation bar on the left for resources","title":"Resources"},{"location":"gtc/android/android/#vods","text":"","title":"VODS"},{"location":"gtc/android/android/#session-1","text":"","title":"Session 1"},{"location":"gtc/android/android/#session-2","text":"","title":"Session 2"},{"location":"gtc/android/day0a/","text":"Day 0: Environment Setup \u00b6 Installing Android Studio (What's that?) \u00b6 Please go through this document before coming for the workshop! Note that you may need to free up about 10GB worth of space for this workshop. We also recommend using a computer with at least 8GB of RAM The main piece of software we will be using for this workshop will be Android Studio! Android Studio is an IDE (Integrated Development Environment) used for developing Android applications. Download Android Studio here! Android Studio is available for all major operating systems, including Windows, Mac and Linux. Note: If you have IntelliJ IDEA installed already, you can use that instead of Android Studio. IntelliJ IDEA and Android Studio are nearly identical for Android Development (because Android Studio is mostly just a rebrand of IntelliJ IDEA). Go ahead and run the installer and follow the instructions. When you encounter the choose components screen, make sure Android Virtual Device is selected. Hold up, whats Android Virtual Device? Android Virtual Device (AVD) is basically an virtual Android Device that allows you to run an Android Phone on your computer! It allows you to test your Android Applications easily, even without a physical Android device! Neat huh? Once we're finished installing, let's proceed to the first time setup of Android Studio! Android Studio first time Setup \u00b6 Android Studio has been installed, but it still needs to download some dependencies, such as the Android SDK(Software Development Kit) and JDK(Java Development Kit). Open up Android Studio, which should prompt you with a Setup Wizard. We recommend selecting Standard as your installation type. Just follow the instructions and the Setup Wizard should start downloading your components for you! We're done installing! Let's proceed with the Java tutorial!(For those who have never touched Java before)","title":"Day 0 - Environment Setup"},{"location":"gtc/android/day0a/#day-0-environment-setup","text":"","title":"Day 0: Environment Setup"},{"location":"gtc/android/day0a/#installing-android-studio-whats-that","text":"Please go through this document before coming for the workshop! Note that you may need to free up about 10GB worth of space for this workshop. We also recommend using a computer with at least 8GB of RAM The main piece of software we will be using for this workshop will be Android Studio! Android Studio is an IDE (Integrated Development Environment) used for developing Android applications. Download Android Studio here! Android Studio is available for all major operating systems, including Windows, Mac and Linux. Note: If you have IntelliJ IDEA installed already, you can use that instead of Android Studio. IntelliJ IDEA and Android Studio are nearly identical for Android Development (because Android Studio is mostly just a rebrand of IntelliJ IDEA). Go ahead and run the installer and follow the instructions. When you encounter the choose components screen, make sure Android Virtual Device is selected. Hold up, whats Android Virtual Device? Android Virtual Device (AVD) is basically an virtual Android Device that allows you to run an Android Phone on your computer! It allows you to test your Android Applications easily, even without a physical Android device! Neat huh? Once we're finished installing, let's proceed to the first time setup of Android Studio!","title":"Installing Android Studio (What's that?)"},{"location":"gtc/android/day0a/#android-studio-first-time-setup","text":"Android Studio has been installed, but it still needs to download some dependencies, such as the Android SDK(Software Development Kit) and JDK(Java Development Kit). Open up Android Studio, which should prompt you with a Setup Wizard. We recommend selecting Standard as your installation type. Just follow the instructions and the Setup Wizard should start downloading your components for you! We're done installing! Let's proceed with the Java tutorial!(For those who have never touched Java before)","title":"Android Studio first time Setup"},{"location":"gtc/android/day0b/","text":"Day 0: Java Tutorial \u00b6 This is an Android workshop, not a Java workshop. This tutorial is tailored to teach you the Java that is necessary for the workshop, and is not exhaustive. We assume you have some Python experience from Computatoinal Thinking for Design or Digital World Psst, for now, use https://www.tutorialspoint.com/compile_java_online.php for an easy-to-use online Java code editor (instead of having to figure out Android Studio). Press the execute on the top left to run your code. Code Comments \u00b6 Recall that in Python, you used # and \"\"\" \"\"\"\" for code comments. E.g. # This is a python comment print ( \"Not a comment\" ) # Now this is a comment after some code \"\"\" This is a multiline python comment \"\"\" In Java, you use // and /* */ for code comments. Below is an example (Note that this is not a full program, see the next section for more information): // This is a Java comment System . out . println ( \"Not a comment\" ); // This is a comment after some code /* This is a multiline Java comment */ Printing Hello World To Terminal (Full program) \u00b6 Below is a Python3 command-line program that prints Hello World . test.py: print ( \"Hello World\" ) # Prints Hello World Here is a Java command-line program that prints Hello World . Test.java: public class Test { // Define class with same name as file public static void main ( String [] args ) { // Defining 'main' function System . out . println ( \"Hello World\" ); // Print \"Hello World\". Note the ; } // Denotes the end of the 'main' function } // Denotes the end of the 'Test' class Explanation: In a typical Java file, any runnable code must be contained within a class. A class is usually specified using the class keyword, followed by the name you want to give to the class. The public keyword before the class is to make the class visible to other Java files. The name of the class is usually the same as the name of the file (without the .java ) By convention, Java class names (and file names) begin with a capital letter (e.g. Test ) Curly braces { } are used to section/encapsulate blocks of code (in Python you used tabs or spaces to section blocks of code for cases like for loops) All java files end with a .java file extension For a Java Command Line Program (Not an Android App) , the code you want to run at program execution has to be encapsulated inside a function named main (i.e. public static void main(String[] args) ) and curly braces. The equivalent of print() in Java is System.out.println() The end of a line of code must be denoted by a semicolon ; (You usually don't put ; after braces) Try it out on the online Java editor! Variables and Functions \u00b6 In Java, all variables have types. Some common variable types include: String (Notice the first letter of String is capitalised) int double (Floating-point number) boolean Python also has types for its variables, but you dont explicitly declare them. You may have learnt that Python is a dynamically-typed language. That is to say, the types of your variables (as well as the return type of your functions) are resolved only at runtime. Consider the following Python program that declares a few variables of different types: a = \"I am a string\" # A string b = 2 # An int c = 2.0 # A floating-point number d = False # A boolean print ( addOne ( b )) # Prints 3 def addOne ( x ): # A function that returns an int return x + 1 Java is a statically-typed language, meaning types of your variables must be resolved at compile time. Therefore, you must declare the types of your variables and the return types of your functions. This is the Java equivalent program: public class Test { public static void main ( String [] args ) { String a = \"I am a string\" ; // A string int b = 2 ; // An int double c = 2.0 ; // A floating-point number boolean d = false ; // A boolean System . out . println ( addOne ( b )); // Prints 3 } // Functions called from another static function (e.g. main) must also be static // First int denotes return type of function // Second int denotes type of function parameter static int addOne ( int x ) { // Start of function return x + 1 ; } // End of function } Type-casting (Strings and Integers) \u00b6 Recall that in Python, sometimes you need to convert a variable from one type to another (most commonly from int to String and vice versa). Here is an example a = 1 # An int b = str ( a ) # Convert a to string c = \"2\" # A string d = int ( c ) # Convert c to int In Java, you perform type-casting this way: public class Test { public static void main ( String [] args ) { int a = 1 ; // An int String b = Integer . toString ( a ); // Convert a to string String c = \"2\" ; // A string int d = Integer . parseInt ( c ); // Convert c to int } } If Statements \u00b6 Recall in python how to write if/else statements to compare strings: a = \"cat\" if a == \"dog\" : print ( \"I am a dog\" ) elif a == \"cat\" : print ( \"I am a cat\" ) else : print ( \"I am not a cat or dog\" ) In Java, not only do if statements have a slightly different syntax, String comparison is different. elif is else if in java Use curly braces instead of semi-colon Use .equals() instead of == to compare strings (NOTE: == works sometimes (such as in this case), but many other times it doesn't work the way we want it to. See this post for a good explanation why) public class Test { public static void main ( String [] args ) { String a = \"cat\" ; if ( a . equals ( \"dog\" )) { System . out . println ( \"I am a dog\" ); } else if ( a . equals ( \"cat\" )) { System . out . println ( \"I am a cat\" ); } else { System . out . println ( \"I am not a cat or dog\" ); } } } Object-Oriented Programming \u00b6 Declaring a class in Python and creating an instance: class SomeClass : def __init__ ( self , x , y ): # Class constructor self . x = x # Class attribute declared and assigned here self . y = y sc = SomeClass ( 1 , 2 ) # Instantiate an object of x = 1 and y = 2 print ( sc . x ) # Prints 1 In Java: Class attributes (which are also variables) must be declared within the class itself at the top level. Constructors are defined using the name of the Class itself, instead of __init__ Use this instead of self to refer to class attributes. Declare the type of the class object when instantiating it Use new keyword during instantiation Declaring a class in Java and creating an instance: class SomeClass { int x ; // Class attribute declared here int y ; SomeClass ( int x , int y ) { this . x = x ; // Class attribute assigned here this . y = y ; } } public class Test { public static void main ( String [] args ) { SomeClass sc = new SomeClass ( 1 , 2 ); // Instantiate an object of x = 1 and y = 2 System . out . println ( sc . x ); // Prints 1 } } References \u00b6 Java Tutorial","title":"Day 0 - Java Tutorial"},{"location":"gtc/android/day0b/#day-0-java-tutorial","text":"This is an Android workshop, not a Java workshop. This tutorial is tailored to teach you the Java that is necessary for the workshop, and is not exhaustive. We assume you have some Python experience from Computatoinal Thinking for Design or Digital World Psst, for now, use https://www.tutorialspoint.com/compile_java_online.php for an easy-to-use online Java code editor (instead of having to figure out Android Studio). Press the execute on the top left to run your code.","title":"Day 0: Java Tutorial"},{"location":"gtc/android/day0b/#code-comments","text":"Recall that in Python, you used # and \"\"\" \"\"\"\" for code comments. E.g. # This is a python comment print ( \"Not a comment\" ) # Now this is a comment after some code \"\"\" This is a multiline python comment \"\"\" In Java, you use // and /* */ for code comments. Below is an example (Note that this is not a full program, see the next section for more information): // This is a Java comment System . out . println ( \"Not a comment\" ); // This is a comment after some code /* This is a multiline Java comment */","title":"Code Comments"},{"location":"gtc/android/day0b/#printing-hello-world-to-terminal-full-program","text":"Below is a Python3 command-line program that prints Hello World . test.py: print ( \"Hello World\" ) # Prints Hello World Here is a Java command-line program that prints Hello World . Test.java: public class Test { // Define class with same name as file public static void main ( String [] args ) { // Defining 'main' function System . out . println ( \"Hello World\" ); // Print \"Hello World\". Note the ; } // Denotes the end of the 'main' function } // Denotes the end of the 'Test' class Explanation: In a typical Java file, any runnable code must be contained within a class. A class is usually specified using the class keyword, followed by the name you want to give to the class. The public keyword before the class is to make the class visible to other Java files. The name of the class is usually the same as the name of the file (without the .java ) By convention, Java class names (and file names) begin with a capital letter (e.g. Test ) Curly braces { } are used to section/encapsulate blocks of code (in Python you used tabs or spaces to section blocks of code for cases like for loops) All java files end with a .java file extension For a Java Command Line Program (Not an Android App) , the code you want to run at program execution has to be encapsulated inside a function named main (i.e. public static void main(String[] args) ) and curly braces. The equivalent of print() in Java is System.out.println() The end of a line of code must be denoted by a semicolon ; (You usually don't put ; after braces) Try it out on the online Java editor!","title":"Printing Hello World To Terminal (Full program)"},{"location":"gtc/android/day0b/#variables-and-functions","text":"In Java, all variables have types. Some common variable types include: String (Notice the first letter of String is capitalised) int double (Floating-point number) boolean Python also has types for its variables, but you dont explicitly declare them. You may have learnt that Python is a dynamically-typed language. That is to say, the types of your variables (as well as the return type of your functions) are resolved only at runtime. Consider the following Python program that declares a few variables of different types: a = \"I am a string\" # A string b = 2 # An int c = 2.0 # A floating-point number d = False # A boolean print ( addOne ( b )) # Prints 3 def addOne ( x ): # A function that returns an int return x + 1 Java is a statically-typed language, meaning types of your variables must be resolved at compile time. Therefore, you must declare the types of your variables and the return types of your functions. This is the Java equivalent program: public class Test { public static void main ( String [] args ) { String a = \"I am a string\" ; // A string int b = 2 ; // An int double c = 2.0 ; // A floating-point number boolean d = false ; // A boolean System . out . println ( addOne ( b )); // Prints 3 } // Functions called from another static function (e.g. main) must also be static // First int denotes return type of function // Second int denotes type of function parameter static int addOne ( int x ) { // Start of function return x + 1 ; } // End of function }","title":"Variables and Functions"},{"location":"gtc/android/day0b/#type-casting-strings-and-integers","text":"Recall that in Python, sometimes you need to convert a variable from one type to another (most commonly from int to String and vice versa). Here is an example a = 1 # An int b = str ( a ) # Convert a to string c = \"2\" # A string d = int ( c ) # Convert c to int In Java, you perform type-casting this way: public class Test { public static void main ( String [] args ) { int a = 1 ; // An int String b = Integer . toString ( a ); // Convert a to string String c = \"2\" ; // A string int d = Integer . parseInt ( c ); // Convert c to int } }","title":"Type-casting (Strings and Integers)"},{"location":"gtc/android/day0b/#if-statements","text":"Recall in python how to write if/else statements to compare strings: a = \"cat\" if a == \"dog\" : print ( \"I am a dog\" ) elif a == \"cat\" : print ( \"I am a cat\" ) else : print ( \"I am not a cat or dog\" ) In Java, not only do if statements have a slightly different syntax, String comparison is different. elif is else if in java Use curly braces instead of semi-colon Use .equals() instead of == to compare strings (NOTE: == works sometimes (such as in this case), but many other times it doesn't work the way we want it to. See this post for a good explanation why) public class Test { public static void main ( String [] args ) { String a = \"cat\" ; if ( a . equals ( \"dog\" )) { System . out . println ( \"I am a dog\" ); } else if ( a . equals ( \"cat\" )) { System . out . println ( \"I am a cat\" ); } else { System . out . println ( \"I am not a cat or dog\" ); } } }","title":"If Statements"},{"location":"gtc/android/day0b/#object-oriented-programming","text":"Declaring a class in Python and creating an instance: class SomeClass : def __init__ ( self , x , y ): # Class constructor self . x = x # Class attribute declared and assigned here self . y = y sc = SomeClass ( 1 , 2 ) # Instantiate an object of x = 1 and y = 2 print ( sc . x ) # Prints 1 In Java: Class attributes (which are also variables) must be declared within the class itself at the top level. Constructors are defined using the name of the Class itself, instead of __init__ Use this instead of self to refer to class attributes. Declare the type of the class object when instantiating it Use new keyword during instantiation Declaring a class in Java and creating an instance: class SomeClass { int x ; // Class attribute declared here int y ; SomeClass ( int x , int y ) { this . x = x ; // Class attribute assigned here this . y = y ; } } public class Test { public static void main ( String [] args ) { SomeClass sc = new SomeClass ( 1 , 2 ); // Instantiate an object of x = 1 and y = 2 System . out . println ( sc . x ); // Prints 1 } }","title":"Object-Oriented Programming"},{"location":"gtc/android/day0b/#references","text":"Java Tutorial","title":"References"},{"location":"gtc/android/day1_androidstudio/","text":"Day 1: Introduction to Android Studio \u00b6 Welcome to the Android Workshop! For the workshop, we will be going through hands-on activities on how to create an Android App from scratch. We will be creating a \"Virtual Pets\" app. Our virtual pets app will be a simple app where you have pets on your mobile phone, and you can feed these pets. We will cover the following topics today: Creating Activities (Pages) for our Android App Creating/Designing an Android GUI Android Activity Lifecycle Scripting interactions between user and mobile app Tomorrow, we will be covering how to use Firebase (a simplified cloud platform) to enable additional interactive functionalities using authentication and online data storage. Creating New Project \u00b6 Welcome to Android Studio! This will be the starting page: click on \"Create New Project\" Depending on what kind of app/page template you want to start with, you can click on the options, but for the workshop (and in most cases) we will be using \"Empty Activity\". An activity refers to a single page of your app that it's referring to, so an app is comprised of many activities. Rename the file, and under options choose \"Java\" Wait for a while, the bottom should show some processes running on startup. When done, screen looks like this (... started). Dismiss the \"What's New\" panel. Inside Android Studio \u00b6 Files are on the left, editing in the middle, and the run bar at the top right AndroidManifest.xml is a special document that summarizes your app: permissions, pages it includes, etc. Setting up Virtual Device (Simulator) \u00b6 Setting up Virtual Device (Simulator). Go to the box beside app and click on AVD Manager to download a simulator of your choice. Download one of the latest releases and click next. It'll take a while to download (about 1.1GB) so just be patient. Run bar After launching, your simulator should show this (default 'hello world' code)","title":"Day 1.1 - Introduction to Android Studio"},{"location":"gtc/android/day1_androidstudio/#day-1-introduction-to-android-studio","text":"Welcome to the Android Workshop! For the workshop, we will be going through hands-on activities on how to create an Android App from scratch. We will be creating a \"Virtual Pets\" app. Our virtual pets app will be a simple app where you have pets on your mobile phone, and you can feed these pets. We will cover the following topics today: Creating Activities (Pages) for our Android App Creating/Designing an Android GUI Android Activity Lifecycle Scripting interactions between user and mobile app Tomorrow, we will be covering how to use Firebase (a simplified cloud platform) to enable additional interactive functionalities using authentication and online data storage.","title":"Day 1: Introduction to Android Studio"},{"location":"gtc/android/day1_androidstudio/#creating-new-project","text":"Welcome to Android Studio! This will be the starting page: click on \"Create New Project\" Depending on what kind of app/page template you want to start with, you can click on the options, but for the workshop (and in most cases) we will be using \"Empty Activity\". An activity refers to a single page of your app that it's referring to, so an app is comprised of many activities. Rename the file, and under options choose \"Java\" Wait for a while, the bottom should show some processes running on startup. When done, screen looks like this (... started). Dismiss the \"What's New\" panel.","title":"Creating New Project"},{"location":"gtc/android/day1_androidstudio/#inside-android-studio","text":"Files are on the left, editing in the middle, and the run bar at the top right AndroidManifest.xml is a special document that summarizes your app: permissions, pages it includes, etc.","title":"Inside Android Studio"},{"location":"gtc/android/day1_androidstudio/#setting-up-virtual-device-simulator","text":"Setting up Virtual Device (Simulator). Go to the box beside app and click on AVD Manager to download a simulator of your choice. Download one of the latest releases and click next. It'll take a while to download (about 1.1GB) so just be patient. Run bar After launching, your simulator should show this (default 'hello world' code)","title":"Setting up Virtual Device (Simulator)"},{"location":"gtc/android/day1_gui/","text":"Day 1: Introduction to Android GUI \u00b6 Start Page \u00b6 Now, we move onto the GUI, the place where you are going to arrange the layout of your app. This workshop will touch on the UI Designer method, but you can choose to code it out in the XML file directly too. Layouts are how we will be arranging our elements. Here, we use constraintlayout which will automatically organize for us the spacing depending on the constraints we set (already done by default). Try changing the textView \"Hello World\" to a start button, and see how it changes in the XML code. Alternative code method, from <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Hello World!\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> to <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Start!\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> All elements need an id: Assign id to the start button Code looks like that <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <Button android:id= \"@+id/startButton\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Start!\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> </androidx.constraintlayout.widget.ConstraintLayout> Result (Can try running it in the simulator to test it out) New page: Choose first pet \u00b6 Create new activity (or new page) called ChoosePetActivity1 for you to choose your first pet. ScrollView will allow the user to scroll the page if it takes up more space than allowed on the phone. Add ScrollView to the page Add Linear Layout inside ScrollView Download some images to be your pets and import them to your Android Studio/.../drawables folder. Open resource manager and import drawables. Import all images with import more files. You'll now be able to see images in the resource manager. Go to widgets and add the images to your page by dragging ImageView into linearlayout. Choose the image that you want. Some images may be too tall, so you need to set scaleType to centerInside and adjustViewBounds to true . We will need to get reference to each image in the Java file later. Name your pictures simply and distinguishably. Add a title to the page, in terms of a textView element. New page: Choose second pet \u00b6 Create another activity called ChoosePetActivity2 to pick your second pet. You can just copy the code from the first xml to the next, change tools:context to .ChoosePetActivity2 , change title text to Choose Pet #2 . New page: Display 2 pets \u00b6 Create activity called MyPetActivity to display the 2 pets. Convert root layout to LinearLayout by doing convert view, and change from horizontal to vertical Add two linear layouts Add an ImageView, textView and button for the first linear layout, and do the same for the second. Rename all the ids to be distinguishable so that they will be easy to call in the Java file.","title":"Day 1.2 - Introduction to GUI"},{"location":"gtc/android/day1_gui/#day-1-introduction-to-android-gui","text":"","title":"Day 1: Introduction to Android GUI"},{"location":"gtc/android/day1_gui/#start-page","text":"Now, we move onto the GUI, the place where you are going to arrange the layout of your app. This workshop will touch on the UI Designer method, but you can choose to code it out in the XML file directly too. Layouts are how we will be arranging our elements. Here, we use constraintlayout which will automatically organize for us the spacing depending on the constraints we set (already done by default). Try changing the textView \"Hello World\" to a start button, and see how it changes in the XML code. Alternative code method, from <TextView android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Hello World!\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> to <Button android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Start!\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> All elements need an id: Assign id to the start button Code looks like that <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <Button android:id= \"@+id/startButton\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" android:text= \"Start!\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> </androidx.constraintlayout.widget.ConstraintLayout> Result (Can try running it in the simulator to test it out)","title":"Start Page"},{"location":"gtc/android/day1_gui/#new-page-choose-first-pet","text":"Create new activity (or new page) called ChoosePetActivity1 for you to choose your first pet. ScrollView will allow the user to scroll the page if it takes up more space than allowed on the phone. Add ScrollView to the page Add Linear Layout inside ScrollView Download some images to be your pets and import them to your Android Studio/.../drawables folder. Open resource manager and import drawables. Import all images with import more files. You'll now be able to see images in the resource manager. Go to widgets and add the images to your page by dragging ImageView into linearlayout. Choose the image that you want. Some images may be too tall, so you need to set scaleType to centerInside and adjustViewBounds to true . We will need to get reference to each image in the Java file later. Name your pictures simply and distinguishably. Add a title to the page, in terms of a textView element.","title":"New page: Choose first pet"},{"location":"gtc/android/day1_gui/#new-page-choose-second-pet","text":"Create another activity called ChoosePetActivity2 to pick your second pet. You can just copy the code from the first xml to the next, change tools:context to .ChoosePetActivity2 , change title text to Choose Pet #2 .","title":"New page: Choose second pet"},{"location":"gtc/android/day1_gui/#new-page-display-2-pets","text":"Create activity called MyPetActivity to display the 2 pets. Convert root layout to LinearLayout by doing convert view, and change from horizontal to vertical Add two linear layouts Add an ImageView, textView and button for the first linear layout, and do the same for the second. Rename all the ids to be distinguishable so that they will be easy to call in the Java file.","title":"New page: Display 2 pets"},{"location":"gtc/android/day1_java/","text":"Day 1: Java in Android \u00b6 Activity Life Cycle \u00b6 onCreate() is called when the system first creates the activity. onStart() makes the activity visible to the user, as the app prepares for the activity for user interaction. onResume() is the state in which app is interactable to the user. onPause() indicates user leaving the activity, hence the activity not going to be in the foreground. onStop() is invoked after the activity is no longer visible to the user. onDestroy() is called before the activity is destroyed, after the completion of the event or from finish() being called Debugging \u00b6 Debugging is the practice of finding/resolving bugs in our Android app. Most of the time, it involves having to find out if certain blocks of code have been executed properly, or to check the values of some variables. Using Log \u00b6 Remember System.out.println() from our Day 0 Java Tutorial? In Android, we can use something similar, called Log to print out messages. For example, in MainActivity.java , in the onCreate() function, write Log . i ( \"MainActivity\" , \"Hello World\" ); Note: Log may appear red in your editor, which indicates an error. The error is because we need to import dependencies for Log . Do that by placing your text cursor over Log , wait for a line to appear under it and press Alt + Enter on your keyboard. If you go to the bottom right of your Android Studio and look for Logcat , open it and run the app, you should be able to see see the following Note that the Logcat at the bottom has filters that allows you to choose different devices, different processes and different log levels to show. Log.i prints INFO type messages. There are other functions like Log.d that prints DEBUG type messsages, and Log.e that prints ERROR type messages. Using the Debugger \u00b6 Android Studio gives you the capability to run the Android app is Debug mode . You are also able to set breakpoints in your code. In debug mode, Android Studio will cause a \"pause\" whenever you encounter these breakpoints , just before that line of code would be executed. You can choose to inspect the values of variables, or simply check that that part of the code is executed. After which, you can also choose to resume to program, or go through each subsequent line step-by-step. To create a breakpoint at a line, you can click on the small space at the right side of the line number. A red circle will appear, indicating the breakpoint has been set. To run the program in debug mode, click on the green bug icon in your run bar at the top right When you run the program, you should see the debug panel pop out at the bottom, where you can inspect the variables or choose to continue by clicking on the play button on the left. Note: Debug mode tends to slow your program quite significantly, so you should only use it when you need it. MainActivity.java \u00b6 MainActivity will be our start screen. It will contain a start button that when pressed goes to the next activity. Overriding onCreate() \u00b6 First, we need to have the onCreate() method in the MainActivity class. We override it. We add super.onCreate(savedInstanceState) so that the onCreate() of the parent class is run. (Should be auto-generated already) package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); }); } } setContentView() \u00b6 Next, we set the content view to the activity_main.xml created previously. This is done with the setContentView() method. protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); } findViewById() \u00b6 The activity_main.xml file contains a button with the id \"startButton\". To define the Button widget in our Java file, we need to instantiate(create) an Object of the Button class and assign the reference to the button. This can be done through the findViewById() method. Do remember to import the Button by adding import android.widget.Button; to the top of the file. protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); } onClickListener \u00b6 Now, we want to specify the action when the button is pressed. We use a click listener to do so. When the view that has been assigned an onClickListener is clicked, the corresponding onClick function will be called. protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( view -> { button . setText ( \"Hello\" ); }); } Intents and startActivity() \u00b6 An intent is an abstract description of an operation to be performed. When used with the startActivity() method, you can launch an activity. startActivity(Intent intent) is used to launch the activity. The intent passed into the startActivity() method is the description of the activity to start. button . setOnClickListener ( view -> { Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); }); This will allow us to start the next activity, which is ChoosePetActivity1.class . However, we observe that Android Studio highlights ChoosePetActivity1.class cannot be resolved. This is because we have not defined such a class. Proceed to create the class either by creating a new Java class in the Project File Tree, or alternatively, hover over the red highlighted ChoosePetActivity and use alt + shift + enter to create the class. Final Code of MainActivity.java package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View view ) { Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } }); } } ChoosePetActivity1 \u00b6 ChoosePetActivity1 is an activity for the user to select their first pet. It will contain 3 different images, each indicating a pet. When clicked, the first pet will be set to the corresponding pet. Selecting a pet will go to the next activity. setContentView() \u00b6 Similar to what we did in MainActivity, use setContentView() to set the activity content to the corresponding xml file. (The code is usually generated for you already) public class ChoosePetActivity1 extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); } } ImageView and findViewById() \u00b6 Define the 3 images in our xml by using findViewById() . Start by importing ImageView. Add import android.widget.ImageView; to the top of the Java file. Next, instantiate the ImageViews and assign the corresponding image to them. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); } SharedPreferences \u00b6 SharedPreferences is used to access and modify preference data. For any particular set of preferences, all clients share a single instance of the class. This allow usage of SharedPreference to save key-value data for the application. However, this is only reccomended for a relatively small collection of data. SharedPreferences uses expensive operations which may slow down an application, especially when frequently changed. Under res/values/strings.xml , add a preference_file_key . The name refers to the key or tag you are giving to this string. The VirtualPetsPreferenceKey is the actual string value itself. < resources > ... < string name = \"preference_file_key\" > VirtualPetsPreferenceKey </ string > </ resources > Here is how it should look after that Navigate back to the ChoosePetActivity1.java file. Start by importing SharedPreferences using import android.content.SharedPreferences; Get a reference to our SharedPreferences file by using getSharedPreferences . Note that the above getString(R.string.preference_key_file) gets a string from strings.xml . This string will help us to determine which SharedPreference file we are using. We will be access this same SharedPreference file in the future as well. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preferences_file_key ), Context . MODE_PRIVATE ); } To edit a key value pair, use the following method sharedPref.edit().putString(\"key\",\"value\").apply(); To access a key value pair, use the following method sharedPref.getString(\"key\",\"default_value\"); NOTE: This sharedPref.getString() is different from the getString() we used above!!! sharedPref.getString() gets a string from our SharedPreference file, while getString() gets a string from our strings.xml We will take a look at accessing and editing key value pairs in shared preferences a bit later. setOnClickListener() \u00b6 Like the button earlier, we will set onclick listeners for each image. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); catImage . setOnClickListener ( view -> { //catImage onclick function goes here }); dogImage . setOnClickListener ( view -> { //dogImage onclick function goes here }); fishImage . setOnClickListener ( view -> { //fishImage onclick function goes here }); } We want each image to store a key value pair corresponding to which image is clicked. As mentioned above, we use sharedPref.edit().putString(\"key\",\"value\").apply(); After storing the key value pair, we want to proceed to start the next activity to be launched. For convenience sake, we will create a method for it. protected void onCreate ( Butndle savedInstanceState ) { // code not shown } private void goNextActivity () { Intent intent = new Intent ( this , ChoosePetActivity2 . class ); startActivity ( intent ); } Hence, our setOnClickListener() would look first edit the shared preference to store the key value pair for pet choice, and then execute the method goNextActivity() . catImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"cat\" ). apply (); goNextActivity (); }); dogImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"dog\" ). apply (); goNextActivity (); }); fishImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"fish\" ). apply (); goNextActivity (); }); Final code for ChoosePetsActivity1.java looks like this package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.view.View ; import android.widget.ImageView ; public class ChoosePetActivity1 extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); // Set references to Images ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); // Get a reference to SharedPreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); catImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"cat\" ). apply (); goNextActivity (); }); dogImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"dog\" ). apply (); goNextActivity (); }); fishImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"fish\" ). apply (); goNextActivity (); }); } private void goNextActivity () { Intent intent = new Intent ( this , ChoosePetActivity2 . class ); startActivity ( intent ); } } ChoosePetActivity2 \u00b6 ChoosePetActivity2 allows the user to select their 2 nd pet. After selecting the 2 nd pet, the app will go to the next activity. ChoosePetActivity2 is largely the same as ChoosePetActivity1 . There are just 2 small changes to be made. Firstly, change pet1 to pet2 . Next, modify goNextActivity() to start MyPetActivity instead. private void goNextActivity () { Intent intent = new Intent ( this , MyPetActivity . class ); startActivity ( intent ); } Final code for ChoosePetActivity2 package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.ImageView ; public class ChoosePetActivity2 extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet2 ); // Set references to Images ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); // Get a reference to SharedPreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); catImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet2\" , \"cat\" ). apply (); goNextActivity (); }); dogImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet2\" , \"dog\" ). apply (); goNextActivity (); }); fishImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet2\" , \"fish\" ). apply (); goNextActivity (); }); } private void goNextActivity () { Intent intent = new Intent ( this , MyPetActivity . class ); startActivity ( intent ); } } MyPetActivity \u00b6 MyPetActivity is the activity for the management for the pets. It will list each pet, and allow the user to feed each pet, and change the pet's hunger level accordingly. onCreate() and setContentView() \u00b6 Similarly, we need override onCreate() method and set content view to the corresponding xml file. (This code should already be there) public class MyPetActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); } } findViewById() \u00b6 Similar to the previous files, get reference to all the views in the xml. Do remember to import Button , ImageView and TextView . @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); } sharedPreferences and getString() \u00b6 First, get a copy of the Shared Preferences. SharedPreferences sharedPref = getSharedPreferences(getString(R.string.preference_file_key), Context.MODE_PRIVATE); Next, get the values for pet1 and pet2 from Shared Preferences using getString method. We can set the default value of pet1 to be cat and pet2 to be dog. The getString() is used to retrieve a String value from the preferences. getString(String key, String defValue) retrieves the String value with the corresponding key from Shared Preferences. If the preference does not exist, the defValue is returned instead. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); } initializeWidgetForPet() \u00b6 Since each pet has the same behavior, we can use a function to avoid unnecessary repetition of the code. initializeWidgetForPet() will do 3 things. 1) Display the corresponding image for the selected pet 2) Initialize the hunger level of each pet 3) set an onClick listener for the button to increase hunger level by 1 for the pet when clicked. Start by defining the method initializeWidgetForPet() private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { // Code goes here } setImageResource() \u00b6 We can just check the type of pet using the input String \"pet\". We can then use setImageResource() to display the corresponding image for each pet. private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { petImage . setImageResource ( R . drawable . fish ); } } Initialize Hunger Value \u00b6 The hunger value is stored as the String value in the text of the hungerText TextView. Using setText() , we can initalize the value to 100. private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( 100 )); } setOnClickListener() \u00b6 The petButton gets the Integer of the hunger level from the hungerText TextView, increments it by 1 and sets the text value of the hungerText TextView to the new value. private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( 100 )); petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); }); } Final code for MyPetActivity.java package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; public class MyPetActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); initialiseWidgetsForPet ( pet1Image , pet1HungerText , pet1Button , pet1 ); initialiseWidgetsForPet ( pet2Image , pet2HungerText , pet2Button , pet2 ); } private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { // This function runs for each pet we have // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } // Set the hungerText to 100 at first hungerText . setText ( Integer . toString ( 100 )); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); }); } }","title":"Day 1.3 - Java in Android"},{"location":"gtc/android/day1_java/#day-1-java-in-android","text":"","title":"Day 1: Java in Android"},{"location":"gtc/android/day1_java/#activity-life-cycle","text":"onCreate() is called when the system first creates the activity. onStart() makes the activity visible to the user, as the app prepares for the activity for user interaction. onResume() is the state in which app is interactable to the user. onPause() indicates user leaving the activity, hence the activity not going to be in the foreground. onStop() is invoked after the activity is no longer visible to the user. onDestroy() is called before the activity is destroyed, after the completion of the event or from finish() being called","title":"Activity Life Cycle"},{"location":"gtc/android/day1_java/#debugging","text":"Debugging is the practice of finding/resolving bugs in our Android app. Most of the time, it involves having to find out if certain blocks of code have been executed properly, or to check the values of some variables.","title":"Debugging"},{"location":"gtc/android/day1_java/#using-log","text":"Remember System.out.println() from our Day 0 Java Tutorial? In Android, we can use something similar, called Log to print out messages. For example, in MainActivity.java , in the onCreate() function, write Log . i ( \"MainActivity\" , \"Hello World\" ); Note: Log may appear red in your editor, which indicates an error. The error is because we need to import dependencies for Log . Do that by placing your text cursor over Log , wait for a line to appear under it and press Alt + Enter on your keyboard. If you go to the bottom right of your Android Studio and look for Logcat , open it and run the app, you should be able to see see the following Note that the Logcat at the bottom has filters that allows you to choose different devices, different processes and different log levels to show. Log.i prints INFO type messages. There are other functions like Log.d that prints DEBUG type messsages, and Log.e that prints ERROR type messages.","title":"Using Log"},{"location":"gtc/android/day1_java/#using-the-debugger","text":"Android Studio gives you the capability to run the Android app is Debug mode . You are also able to set breakpoints in your code. In debug mode, Android Studio will cause a \"pause\" whenever you encounter these breakpoints , just before that line of code would be executed. You can choose to inspect the values of variables, or simply check that that part of the code is executed. After which, you can also choose to resume to program, or go through each subsequent line step-by-step. To create a breakpoint at a line, you can click on the small space at the right side of the line number. A red circle will appear, indicating the breakpoint has been set. To run the program in debug mode, click on the green bug icon in your run bar at the top right When you run the program, you should see the debug panel pop out at the bottom, where you can inspect the variables or choose to continue by clicking on the play button on the left. Note: Debug mode tends to slow your program quite significantly, so you should only use it when you need it.","title":"Using the Debugger"},{"location":"gtc/android/day1_java/#mainactivityjava","text":"MainActivity will be our start screen. It will contain a start button that when pressed goes to the next activity.","title":"MainActivity.java"},{"location":"gtc/android/day1_java/#overriding-oncreate","text":"First, we need to have the onCreate() method in the MainActivity class. We override it. We add super.onCreate(savedInstanceState) so that the onCreate() of the parent class is run. (Should be auto-generated already) package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); }); } }","title":"Overriding onCreate()"},{"location":"gtc/android/day1_java/#setcontentview","text":"Next, we set the content view to the activity_main.xml created previously. This is done with the setContentView() method. protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); }","title":"setContentView()"},{"location":"gtc/android/day1_java/#findviewbyid","text":"The activity_main.xml file contains a button with the id \"startButton\". To define the Button widget in our Java file, we need to instantiate(create) an Object of the Button class and assign the reference to the button. This can be done through the findViewById() method. Do remember to import the Button by adding import android.widget.Button; to the top of the file. protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); }","title":"findViewById()"},{"location":"gtc/android/day1_java/#onclicklistener","text":"Now, we want to specify the action when the button is pressed. We use a click listener to do so. When the view that has been assigned an onClickListener is clicked, the corresponding onClick function will be called. protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( view -> { button . setText ( \"Hello\" ); }); }","title":"onClickListener"},{"location":"gtc/android/day1_java/#intents-and-startactivity","text":"An intent is an abstract description of an operation to be performed. When used with the startActivity() method, you can launch an activity. startActivity(Intent intent) is used to launch the activity. The intent passed into the startActivity() method is the description of the activity to start. button . setOnClickListener ( view -> { Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); }); This will allow us to start the next activity, which is ChoosePetActivity1.class . However, we observe that Android Studio highlights ChoosePetActivity1.class cannot be resolved. This is because we have not defined such a class. Proceed to create the class either by creating a new Java class in the Project File Tree, or alternatively, hover over the red highlighted ChoosePetActivity and use alt + shift + enter to create the class. Final Code of MainActivity.java package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; public class MainActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View view ) { Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } }); } }","title":"Intents and startActivity()"},{"location":"gtc/android/day1_java/#choosepetactivity1","text":"ChoosePetActivity1 is an activity for the user to select their first pet. It will contain 3 different images, each indicating a pet. When clicked, the first pet will be set to the corresponding pet. Selecting a pet will go to the next activity.","title":"ChoosePetActivity1"},{"location":"gtc/android/day1_java/#setcontentview_1","text":"Similar to what we did in MainActivity, use setContentView() to set the activity content to the corresponding xml file. (The code is usually generated for you already) public class ChoosePetActivity1 extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); } }","title":"setContentView()"},{"location":"gtc/android/day1_java/#imageview-and-findviewbyid","text":"Define the 3 images in our xml by using findViewById() . Start by importing ImageView. Add import android.widget.ImageView; to the top of the Java file. Next, instantiate the ImageViews and assign the corresponding image to them. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); }","title":"ImageView and findViewById()"},{"location":"gtc/android/day1_java/#sharedpreferences","text":"SharedPreferences is used to access and modify preference data. For any particular set of preferences, all clients share a single instance of the class. This allow usage of SharedPreference to save key-value data for the application. However, this is only reccomended for a relatively small collection of data. SharedPreferences uses expensive operations which may slow down an application, especially when frequently changed. Under res/values/strings.xml , add a preference_file_key . The name refers to the key or tag you are giving to this string. The VirtualPetsPreferenceKey is the actual string value itself. < resources > ... < string name = \"preference_file_key\" > VirtualPetsPreferenceKey </ string > </ resources > Here is how it should look after that Navigate back to the ChoosePetActivity1.java file. Start by importing SharedPreferences using import android.content.SharedPreferences; Get a reference to our SharedPreferences file by using getSharedPreferences . Note that the above getString(R.string.preference_key_file) gets a string from strings.xml . This string will help us to determine which SharedPreference file we are using. We will be access this same SharedPreference file in the future as well. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preferences_file_key ), Context . MODE_PRIVATE ); } To edit a key value pair, use the following method sharedPref.edit().putString(\"key\",\"value\").apply(); To access a key value pair, use the following method sharedPref.getString(\"key\",\"default_value\"); NOTE: This sharedPref.getString() is different from the getString() we used above!!! sharedPref.getString() gets a string from our SharedPreference file, while getString() gets a string from our strings.xml We will take a look at accessing and editing key value pairs in shared preferences a bit later.","title":"SharedPreferences"},{"location":"gtc/android/day1_java/#setonclicklistener","text":"Like the button earlier, we will set onclick listeners for each image. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); catImage . setOnClickListener ( view -> { //catImage onclick function goes here }); dogImage . setOnClickListener ( view -> { //dogImage onclick function goes here }); fishImage . setOnClickListener ( view -> { //fishImage onclick function goes here }); } We want each image to store a key value pair corresponding to which image is clicked. As mentioned above, we use sharedPref.edit().putString(\"key\",\"value\").apply(); After storing the key value pair, we want to proceed to start the next activity to be launched. For convenience sake, we will create a method for it. protected void onCreate ( Butndle savedInstanceState ) { // code not shown } private void goNextActivity () { Intent intent = new Intent ( this , ChoosePetActivity2 . class ); startActivity ( intent ); } Hence, our setOnClickListener() would look first edit the shared preference to store the key value pair for pet choice, and then execute the method goNextActivity() . catImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"cat\" ). apply (); goNextActivity (); }); dogImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"dog\" ). apply (); goNextActivity (); }); fishImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"fish\" ). apply (); goNextActivity (); }); Final code for ChoosePetsActivity1.java looks like this package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.view.View ; import android.widget.ImageView ; public class ChoosePetActivity1 extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet1 ); // Set references to Images ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); // Get a reference to SharedPreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); catImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"cat\" ). apply (); goNextActivity (); }); dogImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"dog\" ). apply (); goNextActivity (); }); fishImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet1\" , \"fish\" ). apply (); goNextActivity (); }); } private void goNextActivity () { Intent intent = new Intent ( this , ChoosePetActivity2 . class ); startActivity ( intent ); } }","title":"setOnClickListener()"},{"location":"gtc/android/day1_java/#choosepetactivity2","text":"ChoosePetActivity2 allows the user to select their 2 nd pet. After selecting the 2 nd pet, the app will go to the next activity. ChoosePetActivity2 is largely the same as ChoosePetActivity1 . There are just 2 small changes to be made. Firstly, change pet1 to pet2 . Next, modify goNextActivity() to start MyPetActivity instead. private void goNextActivity () { Intent intent = new Intent ( this , MyPetActivity . class ); startActivity ( intent ); } Final code for ChoosePetActivity2 package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.ImageView ; public class ChoosePetActivity2 extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_choose_pet2 ); // Set references to Images ImageView catImage = findViewById ( R . id . catImage ); ImageView dogImage = findViewById ( R . id . dogImage ); ImageView fishImage = findViewById ( R . id . fishImage ); // Get a reference to SharedPreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); catImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet2\" , \"cat\" ). apply (); goNextActivity (); }); dogImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet2\" , \"dog\" ). apply (); goNextActivity (); }); fishImage . setOnClickListener ( view -> { sharedPref . edit (). putString ( \"pet2\" , \"fish\" ). apply (); goNextActivity (); }); } private void goNextActivity () { Intent intent = new Intent ( this , MyPetActivity . class ); startActivity ( intent ); } }","title":"ChoosePetActivity2"},{"location":"gtc/android/day1_java/#mypetactivity","text":"MyPetActivity is the activity for the management for the pets. It will list each pet, and allow the user to feed each pet, and change the pet's hunger level accordingly.","title":"MyPetActivity"},{"location":"gtc/android/day1_java/#oncreate-and-setcontentview","text":"Similarly, we need override onCreate() method and set content view to the corresponding xml file. (This code should already be there) public class MyPetActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); } }","title":"onCreate() and setContentView()"},{"location":"gtc/android/day1_java/#findviewbyid_1","text":"Similar to the previous files, get reference to all the views in the xml. Do remember to import Button , ImageView and TextView . @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); }","title":"findViewById()"},{"location":"gtc/android/day1_java/#sharedpreferences-and-getstring","text":"First, get a copy of the Shared Preferences. SharedPreferences sharedPref = getSharedPreferences(getString(R.string.preference_file_key), Context.MODE_PRIVATE); Next, get the values for pet1 and pet2 from Shared Preferences using getString method. We can set the default value of pet1 to be cat and pet2 to be dog. The getString() is used to retrieve a String value from the preferences. getString(String key, String defValue) retrieves the String value with the corresponding key from Shared Preferences. If the preference does not exist, the defValue is returned instead. @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); }","title":"sharedPreferences and getString()"},{"location":"gtc/android/day1_java/#initializewidgetforpet","text":"Since each pet has the same behavior, we can use a function to avoid unnecessary repetition of the code. initializeWidgetForPet() will do 3 things. 1) Display the corresponding image for the selected pet 2) Initialize the hunger level of each pet 3) set an onClick listener for the button to increase hunger level by 1 for the pet when clicked. Start by defining the method initializeWidgetForPet() private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { // Code goes here }","title":"initializeWidgetForPet()"},{"location":"gtc/android/day1_java/#setimageresource","text":"We can just check the type of pet using the input String \"pet\". We can then use setImageResource() to display the corresponding image for each pet. private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { petImage . setImageResource ( R . drawable . fish ); } }","title":"setImageResource()"},{"location":"gtc/android/day1_java/#initialize-hunger-value","text":"The hunger value is stored as the String value in the text of the hungerText TextView. Using setText() , we can initalize the value to 100. private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( 100 )); }","title":"Initialize Hunger Value"},{"location":"gtc/android/day1_java/#setonclicklistener_1","text":"The petButton gets the Integer of the hunger level from the hungerText TextView, increments it by 1 and sets the text value of the hungerText TextView to the new value. private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( 100 )); petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); }); } Final code for MyPetActivity.java package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; public class MyPetActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); initialiseWidgetsForPet ( pet1Image , pet1HungerText , pet1Button , pet1 ); initialiseWidgetsForPet ( pet2Image , pet2HungerText , pet2Button , pet2 ); } private void initialiseWidgetsForPet ( ImageView petImage , TextView hungerText , Button petButton , String pet ) { // This function runs for each pet we have // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } // Set the hungerText to 100 at first hungerText . setText ( Integer . toString ( 100 )); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); }); } }","title":"setOnClickListener()"},{"location":"gtc/android/day2-bonus/","text":"(Challenge) Feeding other user's pets \u00b6 You are challenged to add a functionality to feed other people's pets! (p.s. submit this to GTC for a higher chance to win a mechanical keyboard!) Here are some hints that I will give you: You will probably need to add a Sign Out button to switch users, for your convenience. The code to sign out of FirebaseAuth looks something like that ( finish() is used to make sure our VirtualPetsActivity is closed) signOutButton . setOnClickListener ( view -> { AuthUI . getInstance () . signOut ( this ) . addOnCompleteListener ( new OnCompleteListener < Void > () { public void onComplete ( @NonNull Task < Void > task ) { Intent intent = new Intent ( MyPetActivity . this , MainActivity . class ); startActivity ( intent ); finish (); } }); }); You need an EditText to let the user key in their details. Read the documentation to find out how to use EditText and get the value contained within it. You may want to store user's data by their Email instead in the realtime Database. Realtime Database doesn't allow for . in the key. So we can use a \"hack\" instead, replacing . with , . (recall that you need to replace this code in both MainAcitivty and MyPetActivity ) String userEmail = FirebaseAuth . getInstance (). getCurrentUser (). getEmail (). replace ( \".\" , \",\" ); You need a visit button, which should probably launch a new MyPetActivity.java and finish() the current one. You may want to change the way you getting the email for MyPetActivity.java . Perhaps you should store this email in SharedPreferences , after MainActivity , and also after the visit button is pressed, and the email retrieved in MyPetActivity should come from this SharedPreferences . Better yet, display the email of the person you are currently visiting in a TextView","title":"Day 2.6 - (Bonus) Feeding your Friend's Pets"},{"location":"gtc/android/day2-bonus/#challenge-feeding-other-users-pets","text":"You are challenged to add a functionality to feed other people's pets! (p.s. submit this to GTC for a higher chance to win a mechanical keyboard!) Here are some hints that I will give you: You will probably need to add a Sign Out button to switch users, for your convenience. The code to sign out of FirebaseAuth looks something like that ( finish() is used to make sure our VirtualPetsActivity is closed) signOutButton . setOnClickListener ( view -> { AuthUI . getInstance () . signOut ( this ) . addOnCompleteListener ( new OnCompleteListener < Void > () { public void onComplete ( @NonNull Task < Void > task ) { Intent intent = new Intent ( MyPetActivity . this , MainActivity . class ); startActivity ( intent ); finish (); } }); }); You need an EditText to let the user key in their details. Read the documentation to find out how to use EditText and get the value contained within it. You may want to store user's data by their Email instead in the realtime Database. Realtime Database doesn't allow for . in the key. So we can use a \"hack\" instead, replacing . with , . (recall that you need to replace this code in both MainAcitivty and MyPetActivity ) String userEmail = FirebaseAuth . getInstance (). getCurrentUser (). getEmail (). replace ( \".\" , \",\" ); You need a visit button, which should probably launch a new MyPetActivity.java and finish() the current one. You may want to change the way you getting the email for MyPetActivity.java . Perhaps you should store this email in SharedPreferences , after MainActivity , and also after the visit button is pressed, and the email retrieved in MyPetActivity should come from this SharedPreferences . Better yet, display the email of the person you are currently visiting in a TextView","title":"(Challenge) Feeding other user's pets"},{"location":"gtc/android/day2-distribute/","text":"Day 2: Distributing your App \u00b6 So far, we have learnt how to create a functioning app, complete with Firebase services support. What's left is to learn how to deploy and distribute our application! Google Play Store \u00b6 The most straightforward way to publish your app is to publish it on the Google Play Store. Publishing your app on the Play Store obviously means that you can target a very broad audience, but the main drawback is that it is not free. You will need to sign up for a Google Developer Account, and that account will cost you 25USD, which may not be worth it, especially if you are planning to make your app free. Amazon App Store \u00b6 An alternative is publish your App on alternative app stores like Amazon App Store. You do not have to pay for publishing on Amazon App Store, but obviously the Amazon App Store is not as popular. APK \u00b6 If however, you just want to package your application nicely so that your friends can install it easily, yon generate an APK file that can be distribute to your own means, such as through Email, messaging, Dropbox etc. Creating APKs \u00b6 Unsigned APK \u00b6 If you are submitting your app for GTC, use this method to build your app You can simply generate an unsigned apk distribution by going to Build -> Build APK/Bundles -> Build APK . Give the APK some time to build, then you can get your APK from app/build/outputs/apk/debug (Usually when the APK finishes building, they will give you the option to directly locate it). Try sending the APK to yourself through e.g. Telegram, and run it! Note that the user's phone will probably warn the user that they are installing from an untrusted source. If you want to fix this issue, it is best to generate a Signed APK instead. Unsigned APK's are usually used for testing purposes only. Signed APK \u00b6 Before releasing your app for commercial distribution, such as on an App Store like Google Play Store, you will need to digitally sign your APK to prove its authenticity. To do so, go to Build -> Generate Signed Bundle / APK , then select APK . You will see something like this. If you don\u2019t have a key store yet, click on Create new... , specify a path for your keystore and fill in the relevant details When you are done, click OK , then Next , then select your build to be for release and select V2 for signature version. Then click Finish . Your APK will finish building after some time, and it will show a message. Your APK has been created, either click on Locate , or go to the release folder in your app folder. You will find app-release.apk . You may proceed to upload this APK to a file-sharing site, App Store, or send it. Try sending the APK to yourself through e.g. Telegram, and run it! Note that Firebase will not work due to the SHA-1 signature being different. You will probably have to edit the SHA-1 signature on the Firebase Website, based on the SHA1-signature for the release version. (or you can just use the debug version) Extra: Publishing your Source Code on Github \u00b6 Relevant for GTC people If you would like to publish your code onto Github, you can easily do it using VCS -> Import into Version Control -> Share Project on Github . If you do it manually, do not forget to use a .gitignore file , most importantly do not share your google-services.json with others if you are using Firebase.","title":"Day 2.7 - Distributing your App"},{"location":"gtc/android/day2-distribute/#day-2-distributing-your-app","text":"So far, we have learnt how to create a functioning app, complete with Firebase services support. What's left is to learn how to deploy and distribute our application!","title":"Day 2: Distributing your App"},{"location":"gtc/android/day2-distribute/#google-play-store","text":"The most straightforward way to publish your app is to publish it on the Google Play Store. Publishing your app on the Play Store obviously means that you can target a very broad audience, but the main drawback is that it is not free. You will need to sign up for a Google Developer Account, and that account will cost you 25USD, which may not be worth it, especially if you are planning to make your app free.","title":"Google Play Store"},{"location":"gtc/android/day2-distribute/#amazon-app-store","text":"An alternative is publish your App on alternative app stores like Amazon App Store. You do not have to pay for publishing on Amazon App Store, but obviously the Amazon App Store is not as popular.","title":"Amazon App Store"},{"location":"gtc/android/day2-distribute/#apk","text":"If however, you just want to package your application nicely so that your friends can install it easily, yon generate an APK file that can be distribute to your own means, such as through Email, messaging, Dropbox etc.","title":"APK"},{"location":"gtc/android/day2-distribute/#creating-apks","text":"","title":"Creating APKs"},{"location":"gtc/android/day2-distribute/#unsigned-apk","text":"If you are submitting your app for GTC, use this method to build your app You can simply generate an unsigned apk distribution by going to Build -> Build APK/Bundles -> Build APK . Give the APK some time to build, then you can get your APK from app/build/outputs/apk/debug (Usually when the APK finishes building, they will give you the option to directly locate it). Try sending the APK to yourself through e.g. Telegram, and run it! Note that the user's phone will probably warn the user that they are installing from an untrusted source. If you want to fix this issue, it is best to generate a Signed APK instead. Unsigned APK's are usually used for testing purposes only.","title":"Unsigned APK"},{"location":"gtc/android/day2-distribute/#signed-apk","text":"Before releasing your app for commercial distribution, such as on an App Store like Google Play Store, you will need to digitally sign your APK to prove its authenticity. To do so, go to Build -> Generate Signed Bundle / APK , then select APK . You will see something like this. If you don\u2019t have a key store yet, click on Create new... , specify a path for your keystore and fill in the relevant details When you are done, click OK , then Next , then select your build to be for release and select V2 for signature version. Then click Finish . Your APK will finish building after some time, and it will show a message. Your APK has been created, either click on Locate , or go to the release folder in your app folder. You will find app-release.apk . You may proceed to upload this APK to a file-sharing site, App Store, or send it. Try sending the APK to yourself through e.g. Telegram, and run it! Note that Firebase will not work due to the SHA-1 signature being different. You will probably have to edit the SHA-1 signature on the Firebase Website, based on the SHA1-signature for the release version. (or you can just use the debug version)","title":"Signed APK"},{"location":"gtc/android/day2-distribute/#extra-publishing-your-source-code-on-github","text":"Relevant for GTC people If you would like to publish your code onto Github, you can easily do it using VCS -> Import into Version Control -> Share Project on Github . If you do it manually, do not forget to use a .gitignore file , most importantly do not share your google-services.json with others if you are using Firebase.","title":"Extra: Publishing your Source Code on Github"},{"location":"gtc/android/day2-firebase-auth/","text":"Day 2: Firebase Auth \u00b6 In this section, we shall learn to add a login system for our app, so that users can login from other devices, and multiple users can also login from the same device! Together with Realtime Database (which we cover in another section), we will be able to allow users to save pets online, and access their pets from any Android phone! An Introduction \u00b6 Firebase Auth allows for many different sign-in methods, including regular email and password sign-in, or accounts from other identity providers (think Google, Facebook, Twitter, Microsoft). Normally, manually enabling sign-ins like that require quite a bit of work. However, Firebase helps to simplify all that with FirebaseUI . What is FirebaseUI? \u00b6 Basically, FirebaseUI is a prebuilt authentication UI, that provides whatever Authentication providers we want to specify. It looks something like that on Android: All we have to do is to add a button to bring us to this UI, and configure what sign-in options we want the UI to have! Understanding the Flow in Technical Terms \u00b6 For authentication, our technical implementation will be something like this: User clicks on a button in the startup activity ( MainActivity in our case) to sign in MainActivity will launch up FirebaseUI to handle the sign-in for us. We just wait for the result. After receiving the sign-in result from FirebaseUI, If Sign-in Successful : Redirect user to our ChoosePetActivity1 like normal If Sign-in Unsuccessful : Stay on MainActivity , display a message (Toast) telling the user they were unsuccessful in signing in. To simplify things, we will just enable Email Sign-in and Google Sign-in for our app. Enabling Firebase Auth and Sign-in Methods on Firebase Console Website \u00b6 Enable Firebase Auth and by clicking on the authentication button. Click Setup Sign-in Method Various Sign-in providers should be displayed. Choose Google Flip the switch to Enable Google Sign-in Choose a name of your choice for Project public-facing name Select an email for the Project Support Email We have already added the SHA-1 fingerprint during the registration of our Firebase App. Just click Save . Do the same for Email/Password sign-in Adding dependencies for FirebaseUI to our project \u00b6 We'll need to add the following line to our module-level build.gradle file. implementation 'com.firebaseui:firebase-ui-auth:6.4.0' 2. Press Sync Now to sync the dependencies Register Google as a Sign-In provider in our Android App \u00b6 We'll need to modify the code in the activity that contains the Start button. Go to MainActivity.java and add google and email/password as a sign-in provider , by pasting the following code before the onCreate() function. (Note: RC_SIGN_IN is a request code we are using for our request for sign in. When FirebaseUI is done with the sign-in, we will use this request code to identify which is the result for our sign-in) List < AuthUI . IdpConfig > providers = Arrays . asList ( new AuthUI . IdpConfig . EmailBuilder (). build (), new AuthUI . IdpConfig . GoogleBuilder (). build ()); private static final int RC_SIGN_IN = 0 ; Bring up FirebaseUI using the button click \u00b6 In the setOnClickListener function for your button, we will need to: Bring up the FirebaseUI Indicate our intention to know the result of the FirebaseUI sign-in We will use startActivityForResult to bring up the new page. This allows us to request for FirebaseUI to tell us when it is done with the sign-in. Copy the following code into the start the SetOnClickListener startActivityForResult ( AuthUI . getInstance () . createSignInIntentBuilder () . setAvailableProviders ( providers ) . build (), RC_SIGN_IN ); Note that we have used RC_SIGN_IN as our request code. Listening for the sign-in result of FirebaseUI \u00b6 We will need to listen for the result of the sign-in from MainActivity.java . We can do this by adding a new function in our MainActivity class, called onActivityResult . This function will be called when FirebaseUI is done with its sign-in. Copy this code into your MainActivity class. if ( requestCode == RC_SIGN_IN ) { // Asserts that this result came from our FirebaseUI if ( resultCode == RESULT_OK ) { // Means the user successfully signed in // We can now get the details of the Firebase User FirebaseUser user = FirebaseAuth . getInstance (). getCurrentUser (); // Get the name of the user String userName = user . getDisplayName (); // Show a message welcoming the user Toast . makeText ( getApplicationContext (), \"Welcome \" + userName , Toast . LENGTH_SHORT ). show (); } else { Toast . makeText ( getApplicationContext (), \"Sign in Failed!\" , Toast . LENGTH_SHORT ). show (); } } Explanation: First we check that the result indeed came from our FirebaseUI We check the result code, to see if the user successfully signed in, or was rejected If they were successful, we get the username of the user Then using Toast.makeText() , we display a message welcoming them. The text to be displayed by Toast is the second parameter The Toast.LENGTH_SHORT indicates that the message should only be displayed for a short time If they were unsuccessful, display a message telling them the sign in failed Add a Transition to the next Activity for Successful Sign-In \u00b6 After the first Toast.makeText , you will also want to add a transition to the next activity. Move the transition that you originally wrote in onCreate, to after the Toast.makeText . The code in question (if you followed my naming convention): Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); You can test the result by running the app! It should bring up a google sign in page when you press the Start button. You can also see the users of your app (and their user Id) in the Firebase Console Website, in the Authentication home screen. Final Code for MainActivity.java package com.example.virtualpets ; import androidx.annotation.Nullable ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; import android.widget.Toast ; import com.firebase.ui.auth.AuthUI ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.auth.FirebaseUser ; import java.util.Arrays ; import java.util.List ; public class MainActivity extends AppCompatActivity { List < AuthUI . IdpConfig > providers = Arrays . asList ( new AuthUI . IdpConfig . EmailBuilder (). build (), new AuthUI . IdpConfig . GoogleBuilder (). build ()); private static final int RC_SIGN_IN = 0 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( view -> { startActivityForResult ( AuthUI . getInstance () . createSignInIntentBuilder () . setAvailableProviders ( providers ) . build (), RC_SIGN_IN ); }); } @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_SIGN_IN ) { // Asserts that this result came from our FirebaseUI if ( resultCode == RESULT_OK ) { // Means the user successfully signed in // We can now get the details of the Firebase User FirebaseUser user = FirebaseAuth . getInstance (). getCurrentUser (); // Get the name of the user String userName = user . getDisplayName (); // Show a message welcoming the user Toast . makeText ( this , \"Welcome \" + userName , Toast . LENGTH_SHORT ). show (); // Go to the ChoosePetActivity Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } else { Toast . makeText ( this , \"Sign in Failed!\" , Toast . LENGTH_SHORT ). show (); } } } }","title":"Day 2.3 - Adding Firebase Auth"},{"location":"gtc/android/day2-firebase-auth/#day-2-firebase-auth","text":"In this section, we shall learn to add a login system for our app, so that users can login from other devices, and multiple users can also login from the same device! Together with Realtime Database (which we cover in another section), we will be able to allow users to save pets online, and access their pets from any Android phone!","title":"Day 2: Firebase Auth"},{"location":"gtc/android/day2-firebase-auth/#an-introduction","text":"Firebase Auth allows for many different sign-in methods, including regular email and password sign-in, or accounts from other identity providers (think Google, Facebook, Twitter, Microsoft). Normally, manually enabling sign-ins like that require quite a bit of work. However, Firebase helps to simplify all that with FirebaseUI .","title":"An Introduction"},{"location":"gtc/android/day2-firebase-auth/#what-is-firebaseui","text":"Basically, FirebaseUI is a prebuilt authentication UI, that provides whatever Authentication providers we want to specify. It looks something like that on Android: All we have to do is to add a button to bring us to this UI, and configure what sign-in options we want the UI to have!","title":"What is FirebaseUI?"},{"location":"gtc/android/day2-firebase-auth/#understanding-the-flow-in-technical-terms","text":"For authentication, our technical implementation will be something like this: User clicks on a button in the startup activity ( MainActivity in our case) to sign in MainActivity will launch up FirebaseUI to handle the sign-in for us. We just wait for the result. After receiving the sign-in result from FirebaseUI, If Sign-in Successful : Redirect user to our ChoosePetActivity1 like normal If Sign-in Unsuccessful : Stay on MainActivity , display a message (Toast) telling the user they were unsuccessful in signing in. To simplify things, we will just enable Email Sign-in and Google Sign-in for our app.","title":"Understanding the Flow in Technical Terms"},{"location":"gtc/android/day2-firebase-auth/#enabling-firebase-auth-and-sign-in-methods-on-firebase-console-website","text":"Enable Firebase Auth and by clicking on the authentication button. Click Setup Sign-in Method Various Sign-in providers should be displayed. Choose Google Flip the switch to Enable Google Sign-in Choose a name of your choice for Project public-facing name Select an email for the Project Support Email We have already added the SHA-1 fingerprint during the registration of our Firebase App. Just click Save . Do the same for Email/Password sign-in","title":"Enabling Firebase Auth and Sign-in Methods on Firebase Console Website"},{"location":"gtc/android/day2-firebase-auth/#adding-dependencies-for-firebaseui-to-our-project","text":"We'll need to add the following line to our module-level build.gradle file. implementation 'com.firebaseui:firebase-ui-auth:6.4.0' 2. Press Sync Now to sync the dependencies","title":"Adding dependencies for FirebaseUI to our project"},{"location":"gtc/android/day2-firebase-auth/#register-google-as-a-sign-in-provider-in-our-android-app","text":"We'll need to modify the code in the activity that contains the Start button. Go to MainActivity.java and add google and email/password as a sign-in provider , by pasting the following code before the onCreate() function. (Note: RC_SIGN_IN is a request code we are using for our request for sign in. When FirebaseUI is done with the sign-in, we will use this request code to identify which is the result for our sign-in) List < AuthUI . IdpConfig > providers = Arrays . asList ( new AuthUI . IdpConfig . EmailBuilder (). build (), new AuthUI . IdpConfig . GoogleBuilder (). build ()); private static final int RC_SIGN_IN = 0 ;","title":"Register Google as a Sign-In provider in our Android App"},{"location":"gtc/android/day2-firebase-auth/#bring-up-firebaseui-using-the-button-click","text":"In the setOnClickListener function for your button, we will need to: Bring up the FirebaseUI Indicate our intention to know the result of the FirebaseUI sign-in We will use startActivityForResult to bring up the new page. This allows us to request for FirebaseUI to tell us when it is done with the sign-in. Copy the following code into the start the SetOnClickListener startActivityForResult ( AuthUI . getInstance () . createSignInIntentBuilder () . setAvailableProviders ( providers ) . build (), RC_SIGN_IN ); Note that we have used RC_SIGN_IN as our request code.","title":"Bring up FirebaseUI using the button click"},{"location":"gtc/android/day2-firebase-auth/#listening-for-the-sign-in-result-of-firebaseui","text":"We will need to listen for the result of the sign-in from MainActivity.java . We can do this by adding a new function in our MainActivity class, called onActivityResult . This function will be called when FirebaseUI is done with its sign-in. Copy this code into your MainActivity class. if ( requestCode == RC_SIGN_IN ) { // Asserts that this result came from our FirebaseUI if ( resultCode == RESULT_OK ) { // Means the user successfully signed in // We can now get the details of the Firebase User FirebaseUser user = FirebaseAuth . getInstance (). getCurrentUser (); // Get the name of the user String userName = user . getDisplayName (); // Show a message welcoming the user Toast . makeText ( getApplicationContext (), \"Welcome \" + userName , Toast . LENGTH_SHORT ). show (); } else { Toast . makeText ( getApplicationContext (), \"Sign in Failed!\" , Toast . LENGTH_SHORT ). show (); } } Explanation: First we check that the result indeed came from our FirebaseUI We check the result code, to see if the user successfully signed in, or was rejected If they were successful, we get the username of the user Then using Toast.makeText() , we display a message welcoming them. The text to be displayed by Toast is the second parameter The Toast.LENGTH_SHORT indicates that the message should only be displayed for a short time If they were unsuccessful, display a message telling them the sign in failed","title":"Listening for the sign-in result of FirebaseUI"},{"location":"gtc/android/day2-firebase-auth/#add-a-transition-to-the-next-activity-for-successful-sign-in","text":"After the first Toast.makeText , you will also want to add a transition to the next activity. Move the transition that you originally wrote in onCreate, to after the Toast.makeText . The code in question (if you followed my naming convention): Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); You can test the result by running the app! It should bring up a google sign in page when you press the Start button. You can also see the users of your app (and their user Id) in the Firebase Console Website, in the Authentication home screen. Final Code for MainActivity.java package com.example.virtualpets ; import androidx.annotation.Nullable ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Intent ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; import android.widget.Toast ; import com.firebase.ui.auth.AuthUI ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.auth.FirebaseUser ; import java.util.Arrays ; import java.util.List ; public class MainActivity extends AppCompatActivity { List < AuthUI . IdpConfig > providers = Arrays . asList ( new AuthUI . IdpConfig . EmailBuilder (). build (), new AuthUI . IdpConfig . GoogleBuilder (). build ()); private static final int RC_SIGN_IN = 0 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( view -> { startActivityForResult ( AuthUI . getInstance () . createSignInIntentBuilder () . setAvailableProviders ( providers ) . build (), RC_SIGN_IN ); }); } @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_SIGN_IN ) { // Asserts that this result came from our FirebaseUI if ( resultCode == RESULT_OK ) { // Means the user successfully signed in // We can now get the details of the Firebase User FirebaseUser user = FirebaseAuth . getInstance (). getCurrentUser (); // Get the name of the user String userName = user . getDisplayName (); // Show a message welcoming the user Toast . makeText ( this , \"Welcome \" + userName , Toast . LENGTH_SHORT ). show (); // Go to the ChoosePetActivity Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } else { Toast . makeText ( this , \"Sign in Failed!\" , Toast . LENGTH_SHORT ). show (); } } } }","title":"Add a Transition to the next Activity for Successful Sign-In"},{"location":"gtc/android/day2-firebase-db/","text":"Day 2: Firebase Database \u00b6 Right now, everytime we restart the app, we need to rechoose our pets and the hunger level of our pets get reset. We could try to save the pet's data on our phone and retrieve that data everytime we login, but what if we signed in from a different device? Our pet data woudl be lost! One good solution to this is to store our pets' data online in a database ! We can retrieve our pet's data anywhere from this database. Luckily for us, Firebase supports databases! Firebase Database stores data in a JSON-like structure . Meaning something like that { \"pets_database\" : { \"someuserid1\" : { \"pet1\" : { \"type\" : \"dog\" , \"hunger\" : 100 }, \"pet2\" : { \"type\" : \"cat\" , \"hunger\" : 80 } }, \"someuserid2\" : { \"pet1\" : { \"type\" : \"cat\" , \"hunger\" : 88 }, \"pet2\" : { \"type\" : \"fish\" , \"hunger\" : 66 } } } } Note that this is a tree-like data structure with parent and child elements . We shall be using this JSON structure to store our pet data! Creating a Firebase Database \u00b6 Head back to the Firebase Console website. Select Realtime Database from the left panel. Click on Create Database and just select United States for the location. Select Start in Test Mode to allow all read/writes to our database, for our convenience for now. The page should now look like this: You can actually interact with the database like this graphically. But we will not do it for now Adding Firebase Realtime Database to our Android app \u00b6 We will need to add the dependency for Realtime Database. Go to the module-level build.gradle file and add the following line under dependencies: implementation 'com.google.firebase:firebase-database' Then press Sync now , Writing to Firebase Database \u00b6 Let us save our data to Firebase Database when we choose pets. Head over to MyPetActivity.java . First, we need to get a reference to our Firebase Database. Copy the following code into MyPetActivity.java , before the onCreate function. (Remember to import using alt-enter) DatabaseReference mDatabase ; DatabaseReference mUserRef ; Before the onCreate function, below the part where we retrieved our pet names from SharedPreferences , copy the following code mDatabase = FirebaseDatabase . getInstance (). getReference (); We now need to create references to where we want to put our pet data. We want to put our data under our userId. So get the userId from Firebase Auth using the following code String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); Now to get a reference where we want to put our own user's pet data, use the following code mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); Now that we have a reference of where to write our data, we just need to write the data in the respective fields. We have 4 data to write (The type of pet1, the hunger value of pet1, the type of pet2 and the hunger value of pet2). We shall do this using the following code mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( 100 ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( 100 ); We will also need to do some modifications to allow the feed button to automatically write the new hunger value to database as well. First, we need to modify the initialiseWidgetsForPet function to take in the petId (i.e. \"pet1\" or \"pet2\"), so that we know which pet value we are changing. private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet , int petHungerValue ) { ... Right after the part where we set the Textview to the new value in the initaliseWidgetsForPet function, we need to write to the database the new pet hunger value mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); Try out the app, try selecting your 2 pets. Now check back with your Firebase Realtime Database on the website. You should now see there is new data. Click on the big \"+\" sign to expand all data, and you should see your data like this: If you check the long string under the pets_database , you will realise it corresponds to your UserID in Firebase Auth (you can see it on the website)! If you feed your pets, you should also see the pet's hunger value increasing in the Firebase Database. Final Code for MyPetActivity.java package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; public class MyPetActivity extends AppCompatActivity { DatabaseReference mDatabase ; DatabaseReference mUserRef ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); // Get a reference to our Firebase Realtime Database mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get our user's Id String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); // Get reference to our user's pet data mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( 100 ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( 100 ); initialiseWidgetsForPet ( \"pet1\" , pet1Image , pet1HungerText , pet1Button , pet1 ); initialiseWidgetsForPet ( \"pet2\" , pet2Image , pet2HungerText , pet2Button , pet2 ); } private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet ) { // This function runs for each pet we have // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } // Set the hungerText to 100 at first hungerText . setText ( Integer . toString ( 100 )); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); }); } } Reading from Firebase Realtime Database Once \u00b6 Now that we are able to store data on the Database, we also need a way to read the data. This will allow us to access our stored pet data anytime from any device! More specifically, if we already have pet data stored on Database, we do not want to go through the choosing pet sequence all over again, and we want to immediately see our current pets and their hunger values. In technical terms, after User Sign-in in MainActivity , we want to: Check if the user already has pre-existing pet data in database If yes, bring them to MyPetActivity directly Replace the ImageViews' image with their pets Replace the TextViews with their pets' actual hunger values We also want to constantly listen to hunger value changes and update them (e.g. we feed our pet from another device) Let's start! Let's start off by going to MainActivity 's onActivityResult function, when the user successfully signs in We will need the user's id, get that by pasting the below code, into the part right after the Toast.makeText where we welcome the user. String userId = user . getUid (); Then, we will to set up reference to our database and where we expect our user's data to be. DatabaseReference mDatabase = FirebaseDatabase . getInstance (). getReference (); DatabaseReference mUser = mDatabase . child ( \"pets_database\" ). child ( userId ); Now we will need to attempt to read data from where we expect the user's data to be. We use addListenerForSingleValueEvent() , which lets us send a single request for the user's data. The result will be returned as a DataSnapshot in the onDataChange function mUser . addListenerForSingleValueEvent ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); We need to fill in the onDataChange function. To check whether the data actually exists, we can use if (snapshot.exists()) . Shift the part where we navigate to the ChoosePetActivity1 to the else statement (i.e. user pet data does not exist) public void onDataChange ( @NonNull DataSnapshot snapshot ) { if ( snapshot . exists ()) { } else { // Go to ChoosePetActivity Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } } If the snapshot exists, we will extract out the data and put it into SharedPreferences. Note that previously we did not put hunger values in SharedPreferences. We will have to create a new key for it. Recall that we can get SharedPreferences with SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); Recall we can edit SharedPreferences with sharedPref.edit() To extract pet 1's type, we use snapshot.child(\"pet1\").child(\"type\").getValue(String.class); . Note that String.class is used to tell Firebase we know we are extracting a string To extract pet 1's hunger value, we use snapshot.child(\"pet1\").child(\"hunger\").getValue(int.class); . Note that int.class is used since hunger value is an int. We repeat the same for pet 2, and commit these changes into SharedPreferences, using apply() . To sum up Steps 7-10, the code looks like this sharedPref . edit () . putString ( \"pet1\" , snapshot . child ( \"pet1\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet1hunger\" , snapshot . child ( \"pet1\" ). child ( \"hunger\" ). getValue ( int . class )) . putString ( \"pet2\" , snapshot . child ( \"pet2\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet2hunger\" , snapshot . child ( \"pet2\" ). child ( \"hunger\" ). getValue ( int . class )) . apply (); Don't forget that we need to navigate the user to MyPetActivity instead now. Intent intent = new Intent ( MainActivity . this , MyPetActivity . class ); startActivity ( intent ); We need to modify the code in MyPetActivity.java a little as well, to accept our new pet1hunger and pet2hunger we are passing into SharedPreferences. At the part where we get the pet types from SharedPreferences, we will get these 2 values, and set them to a default of 100 if they did not exist before (i.e. pet data did not previously exist). int pet1HungerValue = sharedPref . getInt ( \"pet1hunger\" , 100 ); int pet2HungerValue = sharedPref . getInt ( \"pet2hunger\" , 100 ); We will also need to update the part where we set the initial values for the pet's hunger in the Firebase Database. Recall that we previously set it to a constant 100, but this value may change depdending on the value we get from sharedPreferences. mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( pet1HungerValue ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( pet2HungerValue ); We need to modify the initialiseWidgetsForPet function to accept our new initial hunger values as a parameter. private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet , int petHungerValue ) { ... Then within initaliseWidgetsForPet , we need to modify the hungerText.setText() to set the initial hunger value to the petHungerValue . hungerText . setText ( Integer . toString ( petHungerValue )); Phew, we're done! If you test your app now, you should realise that if you have signed in before, you should automatically get brought to the MyPetActivity with your previous data. Final code for MainActivity.java package com.example.virtualpets ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; import android.widget.Toast ; import com.firebase.ui.auth.AuthUI ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.auth.FirebaseUser ; import com.google.firebase.database.DataSnapshot ; import com.google.firebase.database.DatabaseError ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; import com.google.firebase.database.ValueEventListener ; import java.util.Arrays ; import java.util.List ; public class MainActivity extends AppCompatActivity { List < AuthUI . IdpConfig > providers = Arrays . asList ( new AuthUI . IdpConfig . GoogleBuilder (). build ()); private static final int RC_SIGN_IN = 0 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( view -> { startActivityForResult ( AuthUI . getInstance () . createSignInIntentBuilder () . setAvailableProviders ( providers ) . build (), RC_SIGN_IN ); }); } @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_SIGN_IN ) { // Asserts that this result came from our FirebaseUI if ( resultCode == RESULT_OK ) { // Means the user successfully signed in // We can now get the details of the Firebase User FirebaseUser user = FirebaseAuth . getInstance (). getCurrentUser (); // Get the name of the user String userName = user . getDisplayName (); // Show a message welcoming the user Toast . makeText ( this , \"Welcome \" + userName , Toast . LENGTH_SHORT ). show (); // Get Signed-in user's id String userId = user . getUid (); // Get Reference to database DatabaseReference mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get Reference to where we expect user's data to be DatabaseReference mUser = mDatabase . child ( \"pets_database\" ). child ( userId ); // Use this function to attempt to read data from our reference mUser . addListenerForSingleValueEvent ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { // Check whether user has does indeed have existing pet data if ( snapshot . exists ()) { // If data exists, we want to extract the pet types and hunger values // And store them into sharedPreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); sharedPref . edit () . putString ( \"pet1\" , snapshot . child ( \"pet1\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet1hunger\" , snapshot . child ( \"pet1\" ). child ( \"hunger\" ). getValue ( int . class )) . putString ( \"pet2\" , snapshot . child ( \"pet2\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet2hunger\" , snapshot . child ( \"pet2\" ). child ( \"hunger\" ). getValue ( int . class )) . apply (); // Go to MyPetActivity Intent intent = new Intent ( MainActivity . this , MyPetActivity . class ); startActivity ( intent ); } else { // Go to ChoosePetActivity Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); } else { Toast . makeText ( this , \"Sign in Failed!\" , Toast . LENGTH_SHORT ). show (); } } } } Final code for MyPetActivity.java package com.example.virtualpets ; import androidx.annotation.NonNull ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.database.DataSnapshot ; import com.google.firebase.database.DatabaseError ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; import com.google.firebase.database.ValueEventListener ; public class MyPetActivity extends AppCompatActivity { DatabaseReference mDatabase ; DatabaseReference mUserRef ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); int pet1HungerValue = sharedPref . getInt ( \"pet1hunger\" , 100 ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); int pet2HungerValue = sharedPref . getInt ( \"pet2hunger\" , 100 ); // Get a reference to our Firebase Realtime Database mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get our user's Id String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); // Get reference to our user's pet data mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( pet1HungerValue ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( pet2HungerValue ); initialiseWidgetsForPet ( \"pet1\" , pet1Image , pet1HungerText , pet1Button , pet1 , pet1HungerValue ); initialiseWidgetsForPet ( \"pet2\" , pet2Image , pet2HungerText , pet2Button , pet2 , pet2HungerValue ); } private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet , int petHungerValue ) { // This function runs for each pet we have // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( petHungerValue )); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); }); } } Continously listening for updates to Firebase Realtime Database \u00b6 Now, we need our MyPetActivity to continuously listen for updates from the Firebase Realtime Database! This is to accomodate for the case where the user is logged in from multiple devices at the same time. To do that, instead of addListenerForSingleValueEvent() , we can use addValueEventListener() , which constantly listens for changes in values. The syntax is almost the same as addListenerForSingleValueEvent() . Think about where to put this code, how to get the correct reference, and what you need to do when the hunger value changes. Hint: you can get the value we want with snapshot.getValue(int.class) < fillInWithYourRef > . addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { // What should you do when the hunger value changes? } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); Answer mUserRef . child ( petId ). child ( \"hunger\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { hungerText . setText ( Integer . toString ( snapshot . getValue ( int . class ))); } @Override public void onCancelled ( @NonNull DatabaseError error ) { } });","title":"Day 2.4 - Adding Firebase Realtime Database"},{"location":"gtc/android/day2-firebase-db/#day-2-firebase-database","text":"Right now, everytime we restart the app, we need to rechoose our pets and the hunger level of our pets get reset. We could try to save the pet's data on our phone and retrieve that data everytime we login, but what if we signed in from a different device? Our pet data woudl be lost! One good solution to this is to store our pets' data online in a database ! We can retrieve our pet's data anywhere from this database. Luckily for us, Firebase supports databases! Firebase Database stores data in a JSON-like structure . Meaning something like that { \"pets_database\" : { \"someuserid1\" : { \"pet1\" : { \"type\" : \"dog\" , \"hunger\" : 100 }, \"pet2\" : { \"type\" : \"cat\" , \"hunger\" : 80 } }, \"someuserid2\" : { \"pet1\" : { \"type\" : \"cat\" , \"hunger\" : 88 }, \"pet2\" : { \"type\" : \"fish\" , \"hunger\" : 66 } } } } Note that this is a tree-like data structure with parent and child elements . We shall be using this JSON structure to store our pet data!","title":"Day 2: Firebase Database"},{"location":"gtc/android/day2-firebase-db/#creating-a-firebase-database","text":"Head back to the Firebase Console website. Select Realtime Database from the left panel. Click on Create Database and just select United States for the location. Select Start in Test Mode to allow all read/writes to our database, for our convenience for now. The page should now look like this: You can actually interact with the database like this graphically. But we will not do it for now","title":"Creating a Firebase Database"},{"location":"gtc/android/day2-firebase-db/#adding-firebase-realtime-database-to-our-android-app","text":"We will need to add the dependency for Realtime Database. Go to the module-level build.gradle file and add the following line under dependencies: implementation 'com.google.firebase:firebase-database' Then press Sync now ,","title":"Adding Firebase Realtime Database to our Android app"},{"location":"gtc/android/day2-firebase-db/#writing-to-firebase-database","text":"Let us save our data to Firebase Database when we choose pets. Head over to MyPetActivity.java . First, we need to get a reference to our Firebase Database. Copy the following code into MyPetActivity.java , before the onCreate function. (Remember to import using alt-enter) DatabaseReference mDatabase ; DatabaseReference mUserRef ; Before the onCreate function, below the part where we retrieved our pet names from SharedPreferences , copy the following code mDatabase = FirebaseDatabase . getInstance (). getReference (); We now need to create references to where we want to put our pet data. We want to put our data under our userId. So get the userId from Firebase Auth using the following code String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); Now to get a reference where we want to put our own user's pet data, use the following code mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); Now that we have a reference of where to write our data, we just need to write the data in the respective fields. We have 4 data to write (The type of pet1, the hunger value of pet1, the type of pet2 and the hunger value of pet2). We shall do this using the following code mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( 100 ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( 100 ); We will also need to do some modifications to allow the feed button to automatically write the new hunger value to database as well. First, we need to modify the initialiseWidgetsForPet function to take in the petId (i.e. \"pet1\" or \"pet2\"), so that we know which pet value we are changing. private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet , int petHungerValue ) { ... Right after the part where we set the Textview to the new value in the initaliseWidgetsForPet function, we need to write to the database the new pet hunger value mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); Try out the app, try selecting your 2 pets. Now check back with your Firebase Realtime Database on the website. You should now see there is new data. Click on the big \"+\" sign to expand all data, and you should see your data like this: If you check the long string under the pets_database , you will realise it corresponds to your UserID in Firebase Auth (you can see it on the website)! If you feed your pets, you should also see the pet's hunger value increasing in the Firebase Database. Final Code for MyPetActivity.java package com.example.virtualpets ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; public class MyPetActivity extends AppCompatActivity { DatabaseReference mDatabase ; DatabaseReference mUserRef ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); // Get a reference to our Firebase Realtime Database mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get our user's Id String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); // Get reference to our user's pet data mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( 100 ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( 100 ); initialiseWidgetsForPet ( \"pet1\" , pet1Image , pet1HungerText , pet1Button , pet1 ); initialiseWidgetsForPet ( \"pet2\" , pet2Image , pet2HungerText , pet2Button , pet2 ); } private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet ) { // This function runs for each pet we have // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } // Set the hungerText to 100 at first hungerText . setText ( Integer . toString ( 100 )); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); }); } }","title":"Writing to Firebase Database"},{"location":"gtc/android/day2-firebase-db/#reading-from-firebase-realtime-database-once","text":"Now that we are able to store data on the Database, we also need a way to read the data. This will allow us to access our stored pet data anytime from any device! More specifically, if we already have pet data stored on Database, we do not want to go through the choosing pet sequence all over again, and we want to immediately see our current pets and their hunger values. In technical terms, after User Sign-in in MainActivity , we want to: Check if the user already has pre-existing pet data in database If yes, bring them to MyPetActivity directly Replace the ImageViews' image with their pets Replace the TextViews with their pets' actual hunger values We also want to constantly listen to hunger value changes and update them (e.g. we feed our pet from another device) Let's start! Let's start off by going to MainActivity 's onActivityResult function, when the user successfully signs in We will need the user's id, get that by pasting the below code, into the part right after the Toast.makeText where we welcome the user. String userId = user . getUid (); Then, we will to set up reference to our database and where we expect our user's data to be. DatabaseReference mDatabase = FirebaseDatabase . getInstance (). getReference (); DatabaseReference mUser = mDatabase . child ( \"pets_database\" ). child ( userId ); Now we will need to attempt to read data from where we expect the user's data to be. We use addListenerForSingleValueEvent() , which lets us send a single request for the user's data. The result will be returned as a DataSnapshot in the onDataChange function mUser . addListenerForSingleValueEvent ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); We need to fill in the onDataChange function. To check whether the data actually exists, we can use if (snapshot.exists()) . Shift the part where we navigate to the ChoosePetActivity1 to the else statement (i.e. user pet data does not exist) public void onDataChange ( @NonNull DataSnapshot snapshot ) { if ( snapshot . exists ()) { } else { // Go to ChoosePetActivity Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } } If the snapshot exists, we will extract out the data and put it into SharedPreferences. Note that previously we did not put hunger values in SharedPreferences. We will have to create a new key for it. Recall that we can get SharedPreferences with SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); Recall we can edit SharedPreferences with sharedPref.edit() To extract pet 1's type, we use snapshot.child(\"pet1\").child(\"type\").getValue(String.class); . Note that String.class is used to tell Firebase we know we are extracting a string To extract pet 1's hunger value, we use snapshot.child(\"pet1\").child(\"hunger\").getValue(int.class); . Note that int.class is used since hunger value is an int. We repeat the same for pet 2, and commit these changes into SharedPreferences, using apply() . To sum up Steps 7-10, the code looks like this sharedPref . edit () . putString ( \"pet1\" , snapshot . child ( \"pet1\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet1hunger\" , snapshot . child ( \"pet1\" ). child ( \"hunger\" ). getValue ( int . class )) . putString ( \"pet2\" , snapshot . child ( \"pet2\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet2hunger\" , snapshot . child ( \"pet2\" ). child ( \"hunger\" ). getValue ( int . class )) . apply (); Don't forget that we need to navigate the user to MyPetActivity instead now. Intent intent = new Intent ( MainActivity . this , MyPetActivity . class ); startActivity ( intent ); We need to modify the code in MyPetActivity.java a little as well, to accept our new pet1hunger and pet2hunger we are passing into SharedPreferences. At the part where we get the pet types from SharedPreferences, we will get these 2 values, and set them to a default of 100 if they did not exist before (i.e. pet data did not previously exist). int pet1HungerValue = sharedPref . getInt ( \"pet1hunger\" , 100 ); int pet2HungerValue = sharedPref . getInt ( \"pet2hunger\" , 100 ); We will also need to update the part where we set the initial values for the pet's hunger in the Firebase Database. Recall that we previously set it to a constant 100, but this value may change depdending on the value we get from sharedPreferences. mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( pet1HungerValue ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( pet2HungerValue ); We need to modify the initialiseWidgetsForPet function to accept our new initial hunger values as a parameter. private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet , int petHungerValue ) { ... Then within initaliseWidgetsForPet , we need to modify the hungerText.setText() to set the initial hunger value to the petHungerValue . hungerText . setText ( Integer . toString ( petHungerValue )); Phew, we're done! If you test your app now, you should realise that if you have signed in before, you should automatically get brought to the MyPetActivity with your previous data. Final code for MainActivity.java package com.example.virtualpets ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.view.View ; import android.widget.Button ; import android.widget.Toast ; import com.firebase.ui.auth.AuthUI ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.auth.FirebaseUser ; import com.google.firebase.database.DataSnapshot ; import com.google.firebase.database.DatabaseError ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; import com.google.firebase.database.ValueEventListener ; import java.util.Arrays ; import java.util.List ; public class MainActivity extends AppCompatActivity { List < AuthUI . IdpConfig > providers = Arrays . asList ( new AuthUI . IdpConfig . GoogleBuilder (). build ()); private static final int RC_SIGN_IN = 0 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Button button = findViewById ( R . id . startButton ); button . setOnClickListener ( view -> { startActivityForResult ( AuthUI . getInstance () . createSignInIntentBuilder () . setAvailableProviders ( providers ) . build (), RC_SIGN_IN ); }); } @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_SIGN_IN ) { // Asserts that this result came from our FirebaseUI if ( resultCode == RESULT_OK ) { // Means the user successfully signed in // We can now get the details of the Firebase User FirebaseUser user = FirebaseAuth . getInstance (). getCurrentUser (); // Get the name of the user String userName = user . getDisplayName (); // Show a message welcoming the user Toast . makeText ( this , \"Welcome \" + userName , Toast . LENGTH_SHORT ). show (); // Get Signed-in user's id String userId = user . getUid (); // Get Reference to database DatabaseReference mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get Reference to where we expect user's data to be DatabaseReference mUser = mDatabase . child ( \"pets_database\" ). child ( userId ); // Use this function to attempt to read data from our reference mUser . addListenerForSingleValueEvent ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { // Check whether user has does indeed have existing pet data if ( snapshot . exists ()) { // If data exists, we want to extract the pet types and hunger values // And store them into sharedPreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); sharedPref . edit () . putString ( \"pet1\" , snapshot . child ( \"pet1\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet1hunger\" , snapshot . child ( \"pet1\" ). child ( \"hunger\" ). getValue ( int . class )) . putString ( \"pet2\" , snapshot . child ( \"pet2\" ). child ( \"type\" ). getValue ( String . class )) . putInt ( \"pet2hunger\" , snapshot . child ( \"pet2\" ). child ( \"hunger\" ). getValue ( int . class )) . apply (); // Go to MyPetActivity Intent intent = new Intent ( MainActivity . this , MyPetActivity . class ); startActivity ( intent ); } else { // Go to ChoosePetActivity Intent intent = new Intent ( MainActivity . this , ChoosePetActivity1 . class ); startActivity ( intent ); } } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); } else { Toast . makeText ( this , \"Sign in Failed!\" , Toast . LENGTH_SHORT ). show (); } } } } Final code for MyPetActivity.java package com.example.virtualpets ; import androidx.annotation.NonNull ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.SharedPreferences ; import android.os.Bundle ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.database.DataSnapshot ; import com.google.firebase.database.DatabaseError ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; import com.google.firebase.database.ValueEventListener ; public class MyPetActivity extends AppCompatActivity { DatabaseReference mDatabase ; DatabaseReference mUserRef ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); int pet1HungerValue = sharedPref . getInt ( \"pet1hunger\" , 100 ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); int pet2HungerValue = sharedPref . getInt ( \"pet2hunger\" , 100 ); // Get a reference to our Firebase Realtime Database mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get our user's Id String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); // Get reference to our user's pet data mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( pet1HungerValue ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( pet2HungerValue ); initialiseWidgetsForPet ( \"pet1\" , pet1Image , pet1HungerText , pet1Button , pet1 , pet1HungerValue ); initialiseWidgetsForPet ( \"pet2\" , pet2Image , pet2HungerText , pet2Button , pet2 , pet2HungerValue ); } private void initialiseWidgetsForPet ( String petId , ImageView petImage , TextView hungerText , Button petButton , String pet , int petHungerValue ) { // This function runs for each pet we have // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( petHungerValue )); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); }); } }","title":"Reading from Firebase Realtime Database Once"},{"location":"gtc/android/day2-firebase-db/#continously-listening-for-updates-to-firebase-realtime-database","text":"Now, we need our MyPetActivity to continuously listen for updates from the Firebase Realtime Database! This is to accomodate for the case where the user is logged in from multiple devices at the same time. To do that, instead of addListenerForSingleValueEvent() , we can use addValueEventListener() , which constantly listens for changes in values. The syntax is almost the same as addListenerForSingleValueEvent() . Think about where to put this code, how to get the correct reference, and what you need to do when the hunger value changes. Hint: you can get the value we want with snapshot.getValue(int.class) < fillInWithYourRef > . addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { // What should you do when the hunger value changes? } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); Answer mUserRef . child ( petId ). child ( \"hunger\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { hungerText . setText ( Integer . toString ( snapshot . getValue ( int . class ))); } @Override public void onCancelled ( @NonNull DatabaseError error ) { } });","title":"Continously listening for updates to Firebase Realtime Database"},{"location":"gtc/android/day2-firebase-intro/","text":"Day 2: Introduction to Firebase \u00b6 Our App So Far \u00b6 Refer to Firebase Docs for more detailed documentation regarding Firebase If you are falling behind in the lesson, missed the first session, or you are encountering some issues with you app, feel free to download the \"completed\" version of the Congratulations so far, on creating a basic Android app, in terms of both UI and adding interactivity to it! However, there are still many things missing from our Android app, which most conventional Android apps have. For example: There is no login system We have no way of storing data online . All of our pets' data we have input into the app is reset when we close the app. There are no \"online\" interactions in our app. For example, other people can't view our pets, or feed them :( Firebase to the Rescue! (Kinda) \u00b6 Most of the above issues listed above can resolved with Firebase. In a nutshell, Firebase is a simplified cloud platform that can add many online interactivities for your Android application, and is relatively easy to integrate. It is a suite of many services that can be added on individually. First, we will need to enable Firebase for our Android app . Then, we will focus on just a few core services: Auth to enable a working login system for our app Realtime Database to allow us to store app data online (e.g. pet data) Storage to let us store more complex files online (e.g. pet photos)","title":"Day 2.1 - Firebase Introduction"},{"location":"gtc/android/day2-firebase-intro/#day-2-introduction-to-firebase","text":"","title":"Day 2: Introduction to Firebase"},{"location":"gtc/android/day2-firebase-intro/#our-app-so-far","text":"Refer to Firebase Docs for more detailed documentation regarding Firebase If you are falling behind in the lesson, missed the first session, or you are encountering some issues with you app, feel free to download the \"completed\" version of the Congratulations so far, on creating a basic Android app, in terms of both UI and adding interactivity to it! However, there are still many things missing from our Android app, which most conventional Android apps have. For example: There is no login system We have no way of storing data online . All of our pets' data we have input into the app is reset when we close the app. There are no \"online\" interactions in our app. For example, other people can't view our pets, or feed them :(","title":"Our App So Far"},{"location":"gtc/android/day2-firebase-intro/#firebase-to-the-rescue-kinda","text":"Most of the above issues listed above can resolved with Firebase. In a nutshell, Firebase is a simplified cloud platform that can add many online interactivities for your Android application, and is relatively easy to integrate. It is a suite of many services that can be added on individually. First, we will need to enable Firebase for our Android app . Then, we will focus on just a few core services: Auth to enable a working login system for our app Realtime Database to allow us to store app data online (e.g. pet data) Storage to let us store more complex files online (e.g. pet photos)","title":"Firebase to the Rescue! (Kinda)"},{"location":"gtc/android/day2-firebase-sdk/","text":"Day 2: Adding Firebase to your project \u00b6 Before we are able to use any of Firebase services, you need to connect the Firebase Cloud to your project. Let's begin! Step 1: Create a Firebase Account \u00b6 Go to https://firebase.google.com , and sign in with a Google account. After logging in, you should be redirected to https://console.firebase.google.com/ . Step 2: Create a Firebase Project \u00b6 Click on the big Add Project Button , and enter a project name for your application (I will use PetApp ) The next screen will ask if you want to enable Google Analytics for your app. This doesn't really matter since we won't be using it, but I would just disable it for now. Go ahead and click Create Project Wait for it to be done and click Continue . You have now created your first Firebase Project! Step 3: Linking the Firebase Project to your Android App \u00b6 Click on the Android Icon to add Firebase to Android The first field will ask you for your Android package name. To find it, go to the build.gradle(Module:app) file in your Android Studio project (It is found under Gradle Scripts ). Look for the applicationId Fill in a nickname for App nickname We need the debug certificate finger . Open a terminal (look at your bottom bar), and key in the following command (choose based on your OS): If you are facing issues with keytool , consider using the GUI method described here # For Windows keytool -list -v -alias androiddebugkey -keystore %USERPROFILE% \\. android \\d ebug.keystore # For Mac/Linux keytool -list -v \\ -alias androiddebugkey -keystore ~/.android/debug.keystore When prompted for the password, type in android It will display the debug key under SHA1 . Copy the numbers after it, and paste it into the signing certificate field on firebase. Click Register Download the google-services.json into your app folder. Then click Next We now need to add Firebase SDK to our app. Go to the project-level build.gradle and add the following code under dependencies : classpath 'com.google.gms:google-services:4.3.4' Now go to the module-level build.gradle . Add the following code under plugins : id 'com.google.gms.google-services' While still in module-level build.gradle , add the following code under dependencies : implementation platform ( 'com.google.firebase:firebase-bom:26.2.0' ) Press Sync Now near the top right. Gradle will take some time to sync. You can see its progress near the bottom of the screen. Meanwhile you are done with the setup on the Firebase Website, so click Next and Continue to the Console . We are now done with adding the core Firebase SDK! Now let us start adding the individual Firebase components!","title":"Day 2.2 - Adding Firebase to Your Project"},{"location":"gtc/android/day2-firebase-sdk/#day-2-adding-firebase-to-your-project","text":"Before we are able to use any of Firebase services, you need to connect the Firebase Cloud to your project. Let's begin!","title":"Day 2: Adding Firebase to your project"},{"location":"gtc/android/day2-firebase-sdk/#step-1-create-a-firebase-account","text":"Go to https://firebase.google.com , and sign in with a Google account. After logging in, you should be redirected to https://console.firebase.google.com/ .","title":"Step 1: Create a Firebase Account"},{"location":"gtc/android/day2-firebase-sdk/#step-2-create-a-firebase-project","text":"Click on the big Add Project Button , and enter a project name for your application (I will use PetApp ) The next screen will ask if you want to enable Google Analytics for your app. This doesn't really matter since we won't be using it, but I would just disable it for now. Go ahead and click Create Project Wait for it to be done and click Continue . You have now created your first Firebase Project!","title":"Step 2: Create a Firebase Project"},{"location":"gtc/android/day2-firebase-sdk/#step-3-linking-the-firebase-project-to-your-android-app","text":"Click on the Android Icon to add Firebase to Android The first field will ask you for your Android package name. To find it, go to the build.gradle(Module:app) file in your Android Studio project (It is found under Gradle Scripts ). Look for the applicationId Fill in a nickname for App nickname We need the debug certificate finger . Open a terminal (look at your bottom bar), and key in the following command (choose based on your OS): If you are facing issues with keytool , consider using the GUI method described here # For Windows keytool -list -v -alias androiddebugkey -keystore %USERPROFILE% \\. android \\d ebug.keystore # For Mac/Linux keytool -list -v \\ -alias androiddebugkey -keystore ~/.android/debug.keystore When prompted for the password, type in android It will display the debug key under SHA1 . Copy the numbers after it, and paste it into the signing certificate field on firebase. Click Register Download the google-services.json into your app folder. Then click Next We now need to add Firebase SDK to our app. Go to the project-level build.gradle and add the following code under dependencies : classpath 'com.google.gms:google-services:4.3.4' Now go to the module-level build.gradle . Add the following code under plugins : id 'com.google.gms.google-services' While still in module-level build.gradle , add the following code under dependencies : implementation platform ( 'com.google.firebase:firebase-bom:26.2.0' ) Press Sync Now near the top right. Gradle will take some time to sync. You can see its progress near the bottom of the screen. Meanwhile you are done with the setup on the Firebase Website, so click Next and Continue to the Console . We are now done with adding the core Firebase SDK! Now let us start adding the individual Firebase components!","title":"Step 3: Linking the Firebase Project to your Android App"},{"location":"gtc/android/day2-firebase-storage/","text":"Day 2: Firebase Storage \u00b6 So far, we have learnt how to store data such as strings, integers on our Realtime Database. However, what if we wanted to store something a little more complex, such as images? For example, let's say we want to give users the option to change the display image of their pets, and we want these images to be shared across any device they use, how should we go about doing that? Firebase Storage is a great solution to this problem. Creating a Firebase Storage Bucket \u00b6 Go to the Firebase Console Website, and look on the left for Storage . Click on Get Started , click Next , and then select your Cloud Storage Location. Select asia-southeast2 for the location, and press Done . After it is done loading, you should see something like this You now have a Storage Bucket. Right now, our Firebase Storage only allows Authenticated users to access this storage. This is okay for us since our users need to be authenticated to use the app. Setting up Firebase Storage on our Android app \u00b6 We'll need to add this line of dependency to the module-level build.gradle file, under dependencies : implementation 'com.google.firebase:firebase-storage' As usual, remember to press Sync now Overall Flow for our App \u00b6 Our overall flow we need to add in the Android App will be to: Display an Image Picker when the images in MyPetActivity are clicked Using the image selected, upload the image to a predefined location in Firebase Storage Retrieve the Image Url of the uploaded image Store this Image Url under our user and corresponding pet in Firebase Realtime Database At the same time, we will also need our App to: Constantly listen for changes in the Image Url of the pets Download the new image if any image url is changed Set the ImageView to our new downloaded image Creating an Image Picker \u00b6 Let's try to make it such that clicking on the pet images in MyPetActivity triggers a dialog to open an Image Picker. We will first need to configure our ImageViews in MyPetActivity to open a dialog for us to choose an Image to change to. To start off, create an onClickistener for each of other ImageViews, by pasting this code in the initialiseWidgetsForPets function. petImage . setOnClickListener ( view -> { }); 2. Then will need to create an Intent to select an image. Similar to opening our FirebaseUI, we first need a request code for this intent. In this case actually, we will use 2 request codes to differentiate between the 2 different pets. Copy the following to the top level of our MyPetActivity class. private final static int RC_PICK_IMAGE_1 = 1 ; private final static int RC_PICK_IMAGE_2 = 2 ; We will need to modify our initialiseWidgetsForPet function to accept a request code as a parameter, so that the function knows which request code to use. private void initialiseWidgetsForPet ( String petId , ImageView petImage , int imageRC , TextView hungerText , Button petButton , String pet , int petHungerValue ) { ... Now we need to actually create the intent. Inside our OnClickListener, copy this Intent intent = new Intent (); intent . setType ( \"image/*\" ); intent . setAction ( Intent . ACTION_GET_CONTENT ); startActivityForResult ( Intent . createChooser ( intent , \"Select Picture\" ), imageRC ); Uploading a file to Firebase Storage, and getting the URL \u00b6 Once again, we will need to listen for the result of our Image Picker Request, using the OnActivityResultFunction , and also check that the result indeed came from the image picker request. In our MyPetActivity class, type in the following function: @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_PICK_IMAGE_1 || requestCode == RC_PICK_IMAGE_2 ){ // more code goes here } } We can use an InputStream which will eventually help us to upload the image. I will not describe much about the input stream, because it is out of the scope of this workshop. Note: A try/catch block is used, since there is a chance the upload will fail try { InputStream inputStream = getContentResolver (). openInputStream ( data . getData ()); // need to do more work here } catch ( FileNotFoundException ex ) { } We now need to get a reference to our Firebase Storage, and the location we want to put it in. For now, we will put our image under a folder named after our user id. We shall name the image either 1 or 2 depending on which pet it is. Conveniently, this will be the same number as our request code imageRC . The syntax to get the references are similar to Firebase Realtime Database. StorageReference storageRef = FirebaseStorage . getInstance (). getReference (); String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); StorageReference userStorageRef = storageRef . child ( userId ). child ( Integer . toString ( requestCode )); Warning: Steps 4 to 8 are fairly complex, it's ok if you cant understand Now that we have a reference to where we want to upload our image, we just need to push the stream that we created in Step 6 to our reference. This can be done using putStream(stream) method. This putStream method is a task that executes asynchronously (sepearate from the UI). Recall we want to get the download URL for our image as well. While this can be performed by using userStorageRef.getDownloadUrl() , this in itself is an additional side-task that we must perform and request from Firebase Storage. We can continue from our previous putStream task using continueWithTask(newtask) . Finally, we need to collect the result of the getDownloadUrl() task. This can be done with addCompleteListener(task -> {}) . After collecting the result, we need to check if the task was successful. If the task was successful, we can get the image URL using task.getResult().toString() Now we need to upload the new image URL to the Firebase Realtime Database , under our user and the correct pet . Note that we can get the correct pet by simply combining \"pet\" with the request code value. userStorageRef . putStream ( inputStream ) // Step 4 . continueWithTask ( taskSnapshot -> { // Step 5 return userStorageRef . getDownloadUrl (); }). addOnCompleteListener ( task -> { // Step 6 if ( task . isSuccessful ()) { // Step 7 String imageUrl = task . getResult (). toString (); // Step 8 mUserRef . child ( \"pet\" + requestCode ) . child ( \"imageUrl\" ). setValue ( imageUrl ); // Step 9 } }); If you test out now by picking an image (Hint, you can download images on your phone by going to the mobile Chrome Browser), you should be able to see the image being uploaded to Firebase Storage , and the image URL appear in Firebase Realtime Database . Storage: Realtime Database: Downloading an Image from Firebase Storage \u00b6 We now need to get our ImageView to automatically update whenever a new image is uploaded to Firebase Storage. To do that, we need to listen for changes in the imageUrl of each pet on Firebase Realtime Database . Hold up, if we upload a new image to the same directory in our Firebase Storage, won't there be no change in the image URL? The answer is that Firebase Storage actually uploads new images to new storage locations on the Firebase servers, so the image URL will actually change. We need to add a ValueEventListener to listen for changes in the imageUrl of each pet. To do that, add the following code in the initialiseWidgetsForPet function (after the whole block of petImage.setResource s) mUserRef . child ( petId ). child ( \"imageUrl\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { // need to add more code here } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); For safety, we need to check if the imageUrl actually exists, using snapshot.exists() At this point, we just need to download the image and set it to the ImageView. Unfortunately, this by itself is an extremely tedious task again, because you will need to run the download asynchronously in a way to not cause \"hangs\" in our UI while downloading. Just copy this setBitmapFromURL function which I have written for you to the bottom of your MyPetActivity class. It takes in the download url and the image view you want to seet as the parameters, and does all the work for you. You can read the code comments to try understand the code if you want. private void setBitmapFromURL ( String imageString , ImageView imageView ) { new Thread (() -> { // We will need to download the image, on a separate thread/process to avoid hanging our UI try { // We use try/catch since our download may not succeed // First convert the url to a URL type object URL imageURL = new URL ( imageString ); // Set up connection to the URL HttpURLConnection connection = ( HttpURLConnection ) imageURL . openConnection (); // Used to indicate we are using the URL connection for input connection . setDoInput ( true ); // Attempt to initiate the connection connection . connect (); // Get an inputstream that will receive our Image InputStream inputStream = connection . getInputStream (); // Convert the bytes received from the stream into a Bitmap Bitmap bitmap = BitmapFactory . decodeStream ( inputStream ); // Now that we have our downloading Bitmap, we go back to the thread running the UI // so we can finally set the bitmap to the ImageView runOnUiThread (() -> imageView . setImageBitmap ( bitmap )); } catch ( Exception ex ) { } }). start (); } Since I have done all the work writing the function for you, all that's left to do is to extract the imageUrl from the dataSnapshot in onDataChange and use the function I gave you. String imageUrlString = snapshot . getValue ( String . class ); setBitmapFromURL ( imageUrlString , petImage ); Final Code for MyPetActivity.java package com.example.virtualpets ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.graphics.Bitmap ; import android.graphics.BitmapFactory ; import android.net.Uri ; import android.os.Bundle ; import android.util.Log ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import com.google.android.gms.tasks.Task ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.auth.FirebaseUser ; import com.google.firebase.database.DataSnapshot ; import com.google.firebase.database.DatabaseError ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; import com.google.firebase.database.ValueEventListener ; import com.google.firebase.storage.FirebaseStorage ; import com.google.firebase.storage.StorageReference ; import java.io.FileNotFoundException ; import java.io.InputStream ; import java.net.HttpURLConnection ; import java.net.URL ; public class MyPetActivity extends AppCompatActivity { DatabaseReference mDatabase ; DatabaseReference mUserRef ; private final static int RC_PICK_IMAGE_1 = 1 ; private final static int RC_PICK_IMAGE_2 = 2 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); int pet1HungerValue = sharedPref . getInt ( \"pet1hunger\" , 100 ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); int pet2HungerValue = sharedPref . getInt ( \"pet2hunger\" , 100 ); // Get a reference to our Firebase Realtime Database mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get our user's email String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); // Get reference to our user's pet data mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( pet1HungerValue ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( pet2HungerValue ); initialiseWidgetsForPet ( \"pet1\" , pet1Image , RC_PICK_IMAGE_1 , pet1HungerText , pet1Button , pet1 , pet1HungerValue ); initialiseWidgetsForPet ( \"pet2\" , pet2Image , RC_PICK_IMAGE_2 , pet2HungerText , pet2Button , pet2 , pet2HungerValue ); } private void initialiseWidgetsForPet ( String petId , ImageView petImage , int imageRC , TextView hungerText , Button petButton , String pet , int petHungerValue ) { // This function runs for each pet we have petImage . setOnClickListener ( view -> { Intent intent = new Intent (); intent . setType ( \"image/*\" ); intent . setAction ( Intent . ACTION_GET_CONTENT ); startActivityForResult ( Intent . createChooser ( intent , \"Select Picture\" ), imageRC ); }); // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( petHungerValue )); mUserRef . child ( petId ). child ( \"hunger\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { hungerText . setText ( Integer . toString ( snapshot . getValue ( int . class ))); } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); mUserRef . child ( petId ). child ( \"imageUrl\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { if ( snapshot . exists ()) { String imageUrlString = snapshot . getValue ( String . class ); setBitmapFromURL ( imageUrlString , petImage ); } } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); }); } @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_PICK_IMAGE_1 || requestCode == RC_PICK_IMAGE_2 ) { try { InputStream inputStream = getContentResolver (). openInputStream ( data . getData ()); StorageReference storageRef = FirebaseStorage . getInstance (). getReference (); String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); StorageReference userStorageRef = storageRef . child ( userId ). child ( Integer . toString ( requestCode )); userStorageRef . putStream ( inputStream ) . continueWithTask ( taskSnapshot -> { return userStorageRef . getDownloadUrl (); }). addOnCompleteListener ( task -> { if ( task . isSuccessful ()) { String imageUrl = task . getResult (). toString (); mUserRef . child ( \"pet\" + requestCode ). child ( \"imageUrl\" ). setValue ( imageUrl ); } }); } catch ( FileNotFoundException ex ) { } } } /** * Generic function to set an ImageView from a given url */ private void setBitmapFromURL ( String imageString , ImageView imageView ) { new Thread (() -> { // We will need to download the image, on a separate thread/process to avoid hanging our UI try { // We use try/catch since our download may not succeed // First convert the url to a URL type object URL imageURL = new URL ( imageString ); // Set up connection to the URL HttpURLConnection connection = ( HttpURLConnection ) imageURL . openConnection (); // Used to indicate we are using the URL connection for input connection . setDoInput ( true ); // Attempt to initiate the connection connection . connect (); // Get an inputstream that will receive our Image InputStream inputStream = connection . getInputStream (); // Convert the bytes received from the stream into a Bitmap Bitmap bitmap = BitmapFactory . decodeStream ( inputStream ); // Now that we have our downloading Bitmap, we go back to the thread running the UI // so we can finally set the bitmap to the ImageView runOnUiThread (() -> imageView . setImageBitmap ( bitmap )); } catch ( Exception ex ) { } }). start (); } } Test out your app now! The images should change when you choose a new image from your image picker!","title":"Day 2.5 - Adding Firebase Storage"},{"location":"gtc/android/day2-firebase-storage/#day-2-firebase-storage","text":"So far, we have learnt how to store data such as strings, integers on our Realtime Database. However, what if we wanted to store something a little more complex, such as images? For example, let's say we want to give users the option to change the display image of their pets, and we want these images to be shared across any device they use, how should we go about doing that? Firebase Storage is a great solution to this problem.","title":"Day 2: Firebase Storage"},{"location":"gtc/android/day2-firebase-storage/#creating-a-firebase-storage-bucket","text":"Go to the Firebase Console Website, and look on the left for Storage . Click on Get Started , click Next , and then select your Cloud Storage Location. Select asia-southeast2 for the location, and press Done . After it is done loading, you should see something like this You now have a Storage Bucket. Right now, our Firebase Storage only allows Authenticated users to access this storage. This is okay for us since our users need to be authenticated to use the app.","title":"Creating a Firebase Storage Bucket"},{"location":"gtc/android/day2-firebase-storage/#setting-up-firebase-storage-on-our-android-app","text":"We'll need to add this line of dependency to the module-level build.gradle file, under dependencies : implementation 'com.google.firebase:firebase-storage' As usual, remember to press Sync now","title":"Setting up Firebase Storage on our Android app"},{"location":"gtc/android/day2-firebase-storage/#overall-flow-for-our-app","text":"Our overall flow we need to add in the Android App will be to: Display an Image Picker when the images in MyPetActivity are clicked Using the image selected, upload the image to a predefined location in Firebase Storage Retrieve the Image Url of the uploaded image Store this Image Url under our user and corresponding pet in Firebase Realtime Database At the same time, we will also need our App to: Constantly listen for changes in the Image Url of the pets Download the new image if any image url is changed Set the ImageView to our new downloaded image","title":"Overall Flow for our App"},{"location":"gtc/android/day2-firebase-storage/#creating-an-image-picker","text":"Let's try to make it such that clicking on the pet images in MyPetActivity triggers a dialog to open an Image Picker. We will first need to configure our ImageViews in MyPetActivity to open a dialog for us to choose an Image to change to. To start off, create an onClickistener for each of other ImageViews, by pasting this code in the initialiseWidgetsForPets function. petImage . setOnClickListener ( view -> { }); 2. Then will need to create an Intent to select an image. Similar to opening our FirebaseUI, we first need a request code for this intent. In this case actually, we will use 2 request codes to differentiate between the 2 different pets. Copy the following to the top level of our MyPetActivity class. private final static int RC_PICK_IMAGE_1 = 1 ; private final static int RC_PICK_IMAGE_2 = 2 ; We will need to modify our initialiseWidgetsForPet function to accept a request code as a parameter, so that the function knows which request code to use. private void initialiseWidgetsForPet ( String petId , ImageView petImage , int imageRC , TextView hungerText , Button petButton , String pet , int petHungerValue ) { ... Now we need to actually create the intent. Inside our OnClickListener, copy this Intent intent = new Intent (); intent . setType ( \"image/*\" ); intent . setAction ( Intent . ACTION_GET_CONTENT ); startActivityForResult ( Intent . createChooser ( intent , \"Select Picture\" ), imageRC );","title":"Creating an Image Picker"},{"location":"gtc/android/day2-firebase-storage/#uploading-a-file-to-firebase-storage-and-getting-the-url","text":"Once again, we will need to listen for the result of our Image Picker Request, using the OnActivityResultFunction , and also check that the result indeed came from the image picker request. In our MyPetActivity class, type in the following function: @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_PICK_IMAGE_1 || requestCode == RC_PICK_IMAGE_2 ){ // more code goes here } } We can use an InputStream which will eventually help us to upload the image. I will not describe much about the input stream, because it is out of the scope of this workshop. Note: A try/catch block is used, since there is a chance the upload will fail try { InputStream inputStream = getContentResolver (). openInputStream ( data . getData ()); // need to do more work here } catch ( FileNotFoundException ex ) { } We now need to get a reference to our Firebase Storage, and the location we want to put it in. For now, we will put our image under a folder named after our user id. We shall name the image either 1 or 2 depending on which pet it is. Conveniently, this will be the same number as our request code imageRC . The syntax to get the references are similar to Firebase Realtime Database. StorageReference storageRef = FirebaseStorage . getInstance (). getReference (); String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); StorageReference userStorageRef = storageRef . child ( userId ). child ( Integer . toString ( requestCode )); Warning: Steps 4 to 8 are fairly complex, it's ok if you cant understand Now that we have a reference to where we want to upload our image, we just need to push the stream that we created in Step 6 to our reference. This can be done using putStream(stream) method. This putStream method is a task that executes asynchronously (sepearate from the UI). Recall we want to get the download URL for our image as well. While this can be performed by using userStorageRef.getDownloadUrl() , this in itself is an additional side-task that we must perform and request from Firebase Storage. We can continue from our previous putStream task using continueWithTask(newtask) . Finally, we need to collect the result of the getDownloadUrl() task. This can be done with addCompleteListener(task -> {}) . After collecting the result, we need to check if the task was successful. If the task was successful, we can get the image URL using task.getResult().toString() Now we need to upload the new image URL to the Firebase Realtime Database , under our user and the correct pet . Note that we can get the correct pet by simply combining \"pet\" with the request code value. userStorageRef . putStream ( inputStream ) // Step 4 . continueWithTask ( taskSnapshot -> { // Step 5 return userStorageRef . getDownloadUrl (); }). addOnCompleteListener ( task -> { // Step 6 if ( task . isSuccessful ()) { // Step 7 String imageUrl = task . getResult (). toString (); // Step 8 mUserRef . child ( \"pet\" + requestCode ) . child ( \"imageUrl\" ). setValue ( imageUrl ); // Step 9 } }); If you test out now by picking an image (Hint, you can download images on your phone by going to the mobile Chrome Browser), you should be able to see the image being uploaded to Firebase Storage , and the image URL appear in Firebase Realtime Database . Storage: Realtime Database:","title":"Uploading a file to Firebase Storage, and getting the URL"},{"location":"gtc/android/day2-firebase-storage/#downloading-an-image-from-firebase-storage","text":"We now need to get our ImageView to automatically update whenever a new image is uploaded to Firebase Storage. To do that, we need to listen for changes in the imageUrl of each pet on Firebase Realtime Database . Hold up, if we upload a new image to the same directory in our Firebase Storage, won't there be no change in the image URL? The answer is that Firebase Storage actually uploads new images to new storage locations on the Firebase servers, so the image URL will actually change. We need to add a ValueEventListener to listen for changes in the imageUrl of each pet. To do that, add the following code in the initialiseWidgetsForPet function (after the whole block of petImage.setResource s) mUserRef . child ( petId ). child ( \"imageUrl\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { // need to add more code here } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); For safety, we need to check if the imageUrl actually exists, using snapshot.exists() At this point, we just need to download the image and set it to the ImageView. Unfortunately, this by itself is an extremely tedious task again, because you will need to run the download asynchronously in a way to not cause \"hangs\" in our UI while downloading. Just copy this setBitmapFromURL function which I have written for you to the bottom of your MyPetActivity class. It takes in the download url and the image view you want to seet as the parameters, and does all the work for you. You can read the code comments to try understand the code if you want. private void setBitmapFromURL ( String imageString , ImageView imageView ) { new Thread (() -> { // We will need to download the image, on a separate thread/process to avoid hanging our UI try { // We use try/catch since our download may not succeed // First convert the url to a URL type object URL imageURL = new URL ( imageString ); // Set up connection to the URL HttpURLConnection connection = ( HttpURLConnection ) imageURL . openConnection (); // Used to indicate we are using the URL connection for input connection . setDoInput ( true ); // Attempt to initiate the connection connection . connect (); // Get an inputstream that will receive our Image InputStream inputStream = connection . getInputStream (); // Convert the bytes received from the stream into a Bitmap Bitmap bitmap = BitmapFactory . decodeStream ( inputStream ); // Now that we have our downloading Bitmap, we go back to the thread running the UI // so we can finally set the bitmap to the ImageView runOnUiThread (() -> imageView . setImageBitmap ( bitmap )); } catch ( Exception ex ) { } }). start (); } Since I have done all the work writing the function for you, all that's left to do is to extract the imageUrl from the dataSnapshot in onDataChange and use the function I gave you. String imageUrlString = snapshot . getValue ( String . class ); setBitmapFromURL ( imageUrlString , petImage ); Final Code for MyPetActivity.java package com.example.virtualpets ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.appcompat.app.AppCompatActivity ; import android.content.Context ; import android.content.Intent ; import android.content.SharedPreferences ; import android.graphics.Bitmap ; import android.graphics.BitmapFactory ; import android.net.Uri ; import android.os.Bundle ; import android.util.Log ; import android.widget.Button ; import android.widget.ImageView ; import android.widget.TextView ; import com.google.android.gms.tasks.Task ; import com.google.firebase.auth.FirebaseAuth ; import com.google.firebase.auth.FirebaseUser ; import com.google.firebase.database.DataSnapshot ; import com.google.firebase.database.DatabaseError ; import com.google.firebase.database.DatabaseReference ; import com.google.firebase.database.FirebaseDatabase ; import com.google.firebase.database.ValueEventListener ; import com.google.firebase.storage.FirebaseStorage ; import com.google.firebase.storage.StorageReference ; import java.io.FileNotFoundException ; import java.io.InputStream ; import java.net.HttpURLConnection ; import java.net.URL ; public class MyPetActivity extends AppCompatActivity { DatabaseReference mDatabase ; DatabaseReference mUserRef ; private final static int RC_PICK_IMAGE_1 = 1 ; private final static int RC_PICK_IMAGE_2 = 2 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_my_pet ); // Set references to widgets in layout file ImageView pet1Image = findViewById ( R . id . pet1Image ); TextView pet1HungerText = findViewById ( R . id . pet1HungerText ); Button pet1Button = findViewById ( R . id . pet1Button ); ImageView pet2Image = findViewById ( R . id . pet2Image ); TextView pet2HungerText = findViewById ( R . id . pet2HungerText ); Button pet2Button = findViewById ( R . id . pet2Button ); // Get copy of sharedpreferences SharedPreferences sharedPref = getSharedPreferences ( getString ( R . string . preference_file_key ), Context . MODE_PRIVATE ); // Get Pet1, default to cat String pet1 = sharedPref . getString ( \"pet1\" , \"cat\" ); int pet1HungerValue = sharedPref . getInt ( \"pet1hunger\" , 100 ); // Get Pet2, default to dog String pet2 = sharedPref . getString ( \"pet2\" , \"dog\" ); int pet2HungerValue = sharedPref . getInt ( \"pet2hunger\" , 100 ); // Get a reference to our Firebase Realtime Database mDatabase = FirebaseDatabase . getInstance (). getReference (); // Get our user's email String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); // Get reference to our user's pet data mUserRef = mDatabase . child ( \"pets_database\" ). child ( userId ); mUserRef . child ( \"pet1\" ). child ( \"type\" ). setValue ( pet1 ); mUserRef . child ( \"pet1\" ). child ( \"hunger\" ). setValue ( pet1HungerValue ); mUserRef . child ( \"pet2\" ). child ( \"type\" ). setValue ( pet2 ); mUserRef . child ( \"pet2\" ). child ( \"hunger\" ). setValue ( pet2HungerValue ); initialiseWidgetsForPet ( \"pet1\" , pet1Image , RC_PICK_IMAGE_1 , pet1HungerText , pet1Button , pet1 , pet1HungerValue ); initialiseWidgetsForPet ( \"pet2\" , pet2Image , RC_PICK_IMAGE_2 , pet2HungerText , pet2Button , pet2 , pet2HungerValue ); } private void initialiseWidgetsForPet ( String petId , ImageView petImage , int imageRC , TextView hungerText , Button petButton , String pet , int petHungerValue ) { // This function runs for each pet we have petImage . setOnClickListener ( view -> { Intent intent = new Intent (); intent . setType ( \"image/*\" ); intent . setAction ( Intent . ACTION_GET_CONTENT ); startActivityForResult ( Intent . createChooser ( intent , \"Select Picture\" ), imageRC ); }); // Set the image based on which pet it is if ( pet . equals ( \"cat\" )) { petImage . setImageResource ( R . drawable . cat ); } else if ( pet . equals ( \"dog\" )) { petImage . setImageResource ( R . drawable . dog ); } else { // Else it probably is a fish petImage . setImageResource ( R . drawable . fish ); } hungerText . setText ( Integer . toString ( petHungerValue )); mUserRef . child ( petId ). child ( \"hunger\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { hungerText . setText ( Integer . toString ( snapshot . getValue ( int . class ))); } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); mUserRef . child ( petId ). child ( \"imageUrl\" ). addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot snapshot ) { if ( snapshot . exists ()) { String imageUrlString = snapshot . getValue ( String . class ); setBitmapFromURL ( imageUrlString , petImage ); } } @Override public void onCancelled ( @NonNull DatabaseError error ) { } }); // Set onclicklistener to increment hunger by 1 for each button click petButton . setOnClickListener ( view -> { int oldHunger = Integer . parseInt ( hungerText . getText (). toString ()); hungerText . setText ( Integer . toString ( oldHunger + 1 )); mUserRef . child ( petId ). child ( \"hunger\" ). setValue ( oldHunger + 1 ); }); } @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { super . onActivityResult ( requestCode , resultCode , data ); if ( requestCode == RC_PICK_IMAGE_1 || requestCode == RC_PICK_IMAGE_2 ) { try { InputStream inputStream = getContentResolver (). openInputStream ( data . getData ()); StorageReference storageRef = FirebaseStorage . getInstance (). getReference (); String userId = FirebaseAuth . getInstance (). getCurrentUser (). getUid (); StorageReference userStorageRef = storageRef . child ( userId ). child ( Integer . toString ( requestCode )); userStorageRef . putStream ( inputStream ) . continueWithTask ( taskSnapshot -> { return userStorageRef . getDownloadUrl (); }). addOnCompleteListener ( task -> { if ( task . isSuccessful ()) { String imageUrl = task . getResult (). toString (); mUserRef . child ( \"pet\" + requestCode ). child ( \"imageUrl\" ). setValue ( imageUrl ); } }); } catch ( FileNotFoundException ex ) { } } } /** * Generic function to set an ImageView from a given url */ private void setBitmapFromURL ( String imageString , ImageView imageView ) { new Thread (() -> { // We will need to download the image, on a separate thread/process to avoid hanging our UI try { // We use try/catch since our download may not succeed // First convert the url to a URL type object URL imageURL = new URL ( imageString ); // Set up connection to the URL HttpURLConnection connection = ( HttpURLConnection ) imageURL . openConnection (); // Used to indicate we are using the URL connection for input connection . setDoInput ( true ); // Attempt to initiate the connection connection . connect (); // Get an inputstream that will receive our Image InputStream inputStream = connection . getInputStream (); // Convert the bytes received from the stream into a Bitmap Bitmap bitmap = BitmapFactory . decodeStream ( inputStream ); // Now that we have our downloading Bitmap, we go back to the thread running the UI // so we can finally set the bitmap to the ImageView runOnUiThread (() -> imageView . setImageBitmap ( bitmap )); } catch ( Exception ex ) { } }). start (); } } Test out your app now! The images should change when you choose a new image from your image picker!","title":"Downloading an Image from Firebase Storage"},{"location":"gtc/android/firebase-intro/","text":"Day 2: Introduction to Firebase \u00b6 Our App So Far \u00b6 Refer to Firebase Docs for more detailed documentation regarding Firebase If you are falling behind in the lesson, missed the first session, or you are encountering some issues with you app, feel free to download the \"completed\" version of the Congratulations so far, on creating a basic Android app, in terms of both UI and adding interactivity to it! However, there are still many things missing from our Android app, which most conventional Android apps have. For example: There is no login system We have no way of storing data online . All of our pets' data we have input into the app is reset when we close the app. There are no \"online\" interactions in our app. For example, other people can't view our pets, or feed them :( Firebase to the Rescue! (Kinda) \u00b6 Most of the above issues listed above can resolved with Firebase. In a nutshell, Firebase is a cloud platform that can add many online interactivities for your Android application, and is relatively easy to integrate. It is a suite of many services that can be added on individually. First, we will need to enable Firebase for our Android app . Then, we will focus on just a few core services: Auth to enable a working login system for our app Realtime Database to allow us to store app data online (e.g. pet data) Storage to let us store more complex files online (e.g. pet photos)","title":"Day 2: Introduction to Firebase"},{"location":"gtc/android/firebase-intro/#day-2-introduction-to-firebase","text":"","title":"Day 2: Introduction to Firebase"},{"location":"gtc/android/firebase-intro/#our-app-so-far","text":"Refer to Firebase Docs for more detailed documentation regarding Firebase If you are falling behind in the lesson, missed the first session, or you are encountering some issues with you app, feel free to download the \"completed\" version of the Congratulations so far, on creating a basic Android app, in terms of both UI and adding interactivity to it! However, there are still many things missing from our Android app, which most conventional Android apps have. For example: There is no login system We have no way of storing data online . All of our pets' data we have input into the app is reset when we close the app. There are no \"online\" interactions in our app. For example, other people can't view our pets, or feed them :(","title":"Our App So Far"},{"location":"gtc/android/firebase-intro/#firebase-to-the-rescue-kinda","text":"Most of the above issues listed above can resolved with Firebase. In a nutshell, Firebase is a cloud platform that can add many online interactivities for your Android application, and is relatively easy to integrate. It is a suite of many services that can be added on individually. First, we will need to enable Firebase for our Android app . Then, we will focus on just a few core services: Auth to enable a working login system for our app Realtime Database to allow us to store app data online (e.g. pet data) Storage to let us store more complex files online (e.g. pet photos)","title":"Firebase to the Rescue! (Kinda)"},{"location":"gtc/android/wrapup/","text":"Wrapup and Futher Reading \u00b6 We have taught you the basics of building an Android Application. Some of what we taught you may be simple methods, but not neccessarily the best methods or practices. I will direct you to the following articles if you would like to adopt these better practices. String Resources . Ideally, you want to keep business logic (like the words displayed on your app) and app logic separate. String resources help you to achieve that separation. String resources are also necessary if you would like to create list of strings for say a Spinner (Dropdown list) . Fragments . Creating multiple activities is not the ideal way to go to creating a dynamic reusable UI. Fragments must live within an activity. Fragments are also part of the core of many Android Navigation Libraries which make designing navigation in your app much more stable. RecyclerView . A major limitation of our android app so far is that it is not very dynamic. We only allow for each user to have 2 pets. Ideally we should have abstraction to allow for more dynamic use cases. RecyclerViews allow you to have a dynamic number of elements in a scrollable view. Custom View Elements . Almost essential if you need to make reusable UI elements, comprising of multiple elements from the standard Android UI library. Additionally, we focused a lot on adding functionality for our Android App, but did not talk much about beautifying the UI. You may want to consider reading in depth about each UI element on the Android Documentation. Resources and guidelines from Material Design helps you to create good UIs for your Android App. You can also use UI prototyping software like Adobe XD to help you. Other ways to develop Android Apps \u00b6 As it turns out, there are many different ways to do Android development. Using Android Studio is considered the \u201cNative\u201d way of doing Android development, the way Google designed it to be, but there are other methods. For starters, you may choose to use Kotlin instead of Java as a programming language. Kotlin is still a native method to do android development, and is in fact recommended by Google over Java. This is due to features like type-safety that come with the Kotlin programming language. Nowadays, Google prioritises adding features in their Kotlin SDK over their Java SDK, so it is probably worthwhile to learn Kotlin if you are planning to do serious Android Development in the future. Cross-Platform Mobile Development \u00b6 What if your project manager or boss decided that he wanted to develop the app for iOS as well? After all, iOS has a huge market as well, especially in Singapore. While iOS apps are generally natively developed in XCode and Swift programming language, there are a few ways to develop Android and iOS apps simultaneously. Do note they are in languages other than Java React Native Flutter Xamarin Google Tech Challenge (GTC) \u00b6 Thank you for going through our workshop. If you have completed your application, you may consider adding a few more functionalities and submitting your project to Google Tech Challenge , for a chance to win prizes (1 st prize is a mechanical keyboard)! Here are some more challenges if you are participating in Google Tech Challenge (list is not exhaustive): Note that you may have to do further reading Do the bonus challenge previously mentioned (feeding others pets) Make the UI more pleasing to the eye Use Firebase Cloud Functions to periodically decrease pets' hunger Make the number of pets a user can have dynamic Add a friends function Make a page that can display everyone's pets Make different buttons that can add different amounts of hunger points Add a cooldown to the feed button You can make use of Firebase Crashlytics to help you with debugging Survey \u00b6 If you have any feedback, please share them with us using this anonymous survey .","title":"Wrapup"},{"location":"gtc/android/wrapup/#wrapup-and-futher-reading","text":"We have taught you the basics of building an Android Application. Some of what we taught you may be simple methods, but not neccessarily the best methods or practices. I will direct you to the following articles if you would like to adopt these better practices. String Resources . Ideally, you want to keep business logic (like the words displayed on your app) and app logic separate. String resources help you to achieve that separation. String resources are also necessary if you would like to create list of strings for say a Spinner (Dropdown list) . Fragments . Creating multiple activities is not the ideal way to go to creating a dynamic reusable UI. Fragments must live within an activity. Fragments are also part of the core of many Android Navigation Libraries which make designing navigation in your app much more stable. RecyclerView . A major limitation of our android app so far is that it is not very dynamic. We only allow for each user to have 2 pets. Ideally we should have abstraction to allow for more dynamic use cases. RecyclerViews allow you to have a dynamic number of elements in a scrollable view. Custom View Elements . Almost essential if you need to make reusable UI elements, comprising of multiple elements from the standard Android UI library. Additionally, we focused a lot on adding functionality for our Android App, but did not talk much about beautifying the UI. You may want to consider reading in depth about each UI element on the Android Documentation. Resources and guidelines from Material Design helps you to create good UIs for your Android App. You can also use UI prototyping software like Adobe XD to help you.","title":"Wrapup and Futher Reading"},{"location":"gtc/android/wrapup/#other-ways-to-develop-android-apps","text":"As it turns out, there are many different ways to do Android development. Using Android Studio is considered the \u201cNative\u201d way of doing Android development, the way Google designed it to be, but there are other methods. For starters, you may choose to use Kotlin instead of Java as a programming language. Kotlin is still a native method to do android development, and is in fact recommended by Google over Java. This is due to features like type-safety that come with the Kotlin programming language. Nowadays, Google prioritises adding features in their Kotlin SDK over their Java SDK, so it is probably worthwhile to learn Kotlin if you are planning to do serious Android Development in the future.","title":"Other ways to develop Android Apps"},{"location":"gtc/android/wrapup/#cross-platform-mobile-development","text":"What if your project manager or boss decided that he wanted to develop the app for iOS as well? After all, iOS has a huge market as well, especially in Singapore. While iOS apps are generally natively developed in XCode and Swift programming language, there are a few ways to develop Android and iOS apps simultaneously. Do note they are in languages other than Java React Native Flutter Xamarin","title":"Cross-Platform Mobile Development"},{"location":"gtc/android/wrapup/#google-tech-challenge-gtc","text":"Thank you for going through our workshop. If you have completed your application, you may consider adding a few more functionalities and submitting your project to Google Tech Challenge , for a chance to win prizes (1 st prize is a mechanical keyboard)! Here are some more challenges if you are participating in Google Tech Challenge (list is not exhaustive): Note that you may have to do further reading Do the bonus challenge previously mentioned (feeding others pets) Make the UI more pleasing to the eye Use Firebase Cloud Functions to periodically decrease pets' hunger Make the number of pets a user can have dynamic Add a friends function Make a page that can display everyone's pets Make different buttons that can add different amounts of hunger points Add a cooldown to the feed button You can make use of Firebase Crashlytics to help you with debugging","title":"Google Tech Challenge (GTC)"},{"location":"gtc/android/wrapup/#survey","text":"If you have any feedback, please share them with us using this anonymous survey .","title":"Survey"},{"location":"gtc/cloud/cloud/","text":"Cloud Workshop \u00b6 Instructors: Shoham Chakraborty, Tan Li Ling Stream Link: https://www.twitch.tv/3dcdsc Link to Session Materials: https://3dc.opensutd.org/Cloud_2021/ VOD \u00b6","title":"Session 1"},{"location":"gtc/cloud/cloud/#cloud-workshop","text":"Instructors: Shoham Chakraborty, Tan Li Ling Stream Link: https://www.twitch.tv/3dcdsc Link to Session Materials: https://3dc.opensutd.org/Cloud_2021/","title":"Cloud Workshop"},{"location":"gtc/cloud/cloud/#vod","text":"","title":"VOD"},{"location":"gtc/telebot/day1/","text":"Telegram Bot Workshop Day 1 \u00b6 Instructor: Chester Koh Stream Link: Join MS Teams Group with code 8gpyugn Environment Setup: Readme Slides: https://tinyurl.com/iap2021-telebot-1 Starter Code: https://github.com/chesnutcase/telebot-iap-starter VOD \u00b6 Part 1 \u00b6 Part 2 \u00b6","title":"Day 1"},{"location":"gtc/telebot/day1/#telegram-bot-workshop-day-1","text":"Instructor: Chester Koh Stream Link: Join MS Teams Group with code 8gpyugn Environment Setup: Readme Slides: https://tinyurl.com/iap2021-telebot-1 Starter Code: https://github.com/chesnutcase/telebot-iap-starter","title":"Telegram Bot Workshop Day 1"},{"location":"gtc/telebot/day1/#vod","text":"","title":"VOD"},{"location":"gtc/telebot/day1/#part-1","text":"","title":"Part 1"},{"location":"gtc/telebot/day1/#part-2","text":"","title":"Part 2"},{"location":"gtc/telebot/day2/","text":"Telegram Bot Workshop Day 2 \u00b6 Instructor: Chester Koh Stream Link: Join MS Teams Group with code 8gpyugn Slides: To be released VODs \u00b6 To be released","title":"Day 2"},{"location":"gtc/telebot/day2/#telegram-bot-workshop-day-2","text":"Instructor: Chester Koh Stream Link: Join MS Teams Group with code 8gpyugn Slides: To be released","title":"Telegram Bot Workshop Day 2"},{"location":"gtc/telebot/day2/#vods","text":"To be released","title":"VODs"},{"location":"gtc/web/day1/","text":"Day 1: Back-end (Django) Web Development \u00b6 Instructor: Weihong Qiu Stream Link: https://www.twitch.tv/3dcdsc Link to Session Materials: https://gist.github.com/weihong0827/c4eee39b5b0e1766850e780c0ce5527f VOD \u00b6","title":"Day 1: Back-end (Django) Development"},{"location":"gtc/web/day1/#day-1-back-end-django-web-development","text":"Instructor: Weihong Qiu Stream Link: https://www.twitch.tv/3dcdsc Link to Session Materials: https://gist.github.com/weihong0827/c4eee39b5b0e1766850e780c0ce5527f","title":"Day 1: Back-end (Django) Web Development"},{"location":"gtc/web/day1/#vod","text":"","title":"VOD"},{"location":"gtc/web/day2/","text":"Day 2: Front-end (React) Web Development \u00b6 Instructor: Clarence Lee Sheng Stream Link: https://www.twitch.tv/3dcdsc Link to Session Materials: https://github.com/Reckonzz/ReactWorkshop_cookerino_student_version VOD \u00b6","title":"Day 2: Front-end (React) Development"},{"location":"gtc/web/day2/#day-2-front-end-react-web-development","text":"Instructor: Clarence Lee Sheng Stream Link: https://www.twitch.tv/3dcdsc Link to Session Materials: https://github.com/Reckonzz/ReactWorkshop_cookerino_student_version","title":"Day 2: Front-end (React) Web Development"},{"location":"gtc/web/day2/#vod","text":"","title":"VOD"}]}